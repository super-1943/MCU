Sunplus u'nSP Assembler - Ver. 1.14.3.1
              Listing File Has Been Relocated
                            	// GCC for SUNPLUS u'nSP version 1.0.21-3
                            	// Command: C:\PROGRA~1\Sunplus\UNSPID~1.0\cc1.exe c:\temp\ccENaaaa.i -fkeep-inline-functions -quiet -dumpbase main.c -mglobal-var-iram -gstabs -Wall -o .\Debug/main.asm
                            		.external __sn_func_ptr_sec
                            	
                            	// gcc2_compiled.:
                            	
00000000                    	.debug
00000000 2E 00 73 00        		.dw '.stabs "E:/program/sun/kkk  yuyinshibie/",0x64,0,3,',0,0,offset Ltext0,seg Ltext0,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         45 00 3A 00
         2F 00 70 00
         72 00 6F 00
         67 00 72 00
         61 00 6D 00
         2F 00 73 00
         75 00 6E 00
         2F 00 6B 00
         6B 00 6B 00
         20 00 20 00
         79 00 75 00
         79 00 69 00
         6E 00 73 00
         68 00 69 00
         62 00 69 00
         65 00 2F 00
         22 00 2C 00
         30 00 78 00
         36 00 34 00
         2C 00 30 00
         2C 00 33 00
         2C 00 00 00
         00 00 00 00
         00 00 0D 00
         0A 00      
0000A6C9                    	.code
00000039                    	.debug
00000039 2E 00 73 00        		.dw '.stabs "E:/program/sun/kkk  yuyinshibie/main.c",0x64,0,3,',0,0,offset Ltext0,seg Ltext0,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         45 00 3A 00
         2F 00 70 00
         72 00 6F 00
         67 00 72 00
         61 00 6D 00
         2F 00 73 00
         75 00 6E 00
         2F 00 6B 00
         6B 00 6B 00
         20 00 20 00
         79 00 75 00
         79 00 69 00
         6E 00 73 00
         68 00 69 00
         62 00 69 00
         65 00 2F 00
         6D 00 61 00
         69 00 6E 00
         2E 00 63 00
         22 00 2C 00
         30 00 78 00
         36 00 34 00
         2C 00 30 00
         2C 00 33 00
         2C 00 00 00
         00 00 00 00
         00 00 0D 00
         0A 00      
0000A6C9                    	.code
0000A6C9                    	.code
                            	Ltext0:
00000078                    	.debug
00000078 2E 00 73 00        		.dw '.stabs "int:t1=r1;-32768;32767;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         69 00 6E 00
         74 00 3A 00
         74 00 31 00
         3D 00 72 00
         31 00 3B 00
         2D 00 33 00
         32 00 37 00
         36 00 38 00
         3B 00 33 00
         32 00 37 00
         36 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
000000A4                    	.debug
000000A4 2E 00 73 00        		.dw '.stabs "char:t2=r2;0;127;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 68 00
         61 00 72 00
         3A 00 74 00
         32 00 3D 00
         72 00 32 00
         3B 00 30 00
         3B 00 31 00
         32 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
000000CA                    	.debug
000000CA 2E 00 73 00        		.dw '.stabs "long int:t3=r3;-2147483648;2147483647;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         33 00 3D 00
         72 00 33 00
         3B 00 2D 00
         32 00 31 00
         34 00 37 00
         34 00 38 00
         33 00 36 00
         34 00 38 00
         3B 00 32 00
         31 00 34 00
         37 00 34 00
         38 00 33 00
         36 00 34 00
         37 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
00000105                    	.debug
00000105 2E 00 73 00        		.dw '.stabs "unsigned int:t4=r4;0;65535;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         34 00 3D 00
         72 00 34 00
         3B 00 30 00
         3B 00 36 00
         35 00 35 00
         33 00 35 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
00000135                    	.debug
00000135 2E 00 73 00        		.dw '.stabs "long unsigned int:t5=r5;0;4294967295;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 75 00
         6E 00 73 00
         69 00 67 00
         6E 00 65 00
         64 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 35 00
         3D 00 72 00
         35 00 3B 00
         30 00 3B 00
         34 00 32 00
         39 00 34 00
         39 00 36 00
         37 00 32 00
         39 00 35 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
0000016F                    	.debug
0000016F 2E 00 73 00        		.dw '.stabs "long long int:t6=r6;-2147483648;2147483647;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 6C 00
         6F 00 6E 00
         67 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 36 00
         3D 00 72 00
         36 00 3B 00
         2D 00 32 00
         31 00 34 00
         37 00 34 00
         38 00 33 00
         36 00 34 00
         38 00 3B 00
         32 00 31 00
         34 00 37 00
         34 00 38 00
         33 00 36 00
         34 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
000001AF                    	.debug
000001AF 2E 00 73 00        		.dw '.stabs "long long unsigned int:t7=r7;0;4294967295;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 6C 00
         6F 00 6E 00
         67 00 20 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         37 00 3D 00
         72 00 37 00
         3B 00 30 00
         3B 00 34 00
         32 00 39 00
         34 00 39 00
         36 00 37 00
         32 00 39 00
         35 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
000001EE                    	.debug
000001EE 2E 00 73 00        		.dw '.stabs "short int:t8=r8;-32768;32767;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 68 00
         6F 00 72 00
         74 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 38 00
         3D 00 72 00
         38 00 3B 00
         2D 00 33 00
         32 00 37 00
         36 00 38 00
         3B 00 33 00
         32 00 37 00
         36 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
00000220                    	.debug
00000220 2E 00 73 00        		.dw '.stabs "short unsigned int:t9=r9;0;65535;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 68 00
         6F 00 72 00
         74 00 20 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         39 00 3D 00
         72 00 39 00
         3B 00 30 00
         3B 00 36 00
         35 00 35 00
         33 00 35 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
00000256                    	.debug
00000256 2E 00 73 00        		.dw '.stabs "signed char:t10=r10;-32768;32767;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 63 00
         68 00 61 00
         72 00 3A 00
         74 00 31 00
         30 00 3D 00
         72 00 31 00
         30 00 3B 00
         2D 00 33 00
         32 00 37 00
         36 00 38 00
         3B 00 33 00
         32 00 37 00
         36 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
0000028C                    	.debug
0000028C 2E 00 73 00        		.dw '.stabs "unsigned char:t11=r11;0;65535;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 63 00
         68 00 61 00
         72 00 3A 00
         74 00 31 00
         31 00 3D 00
         72 00 31 00
         31 00 3B 00
         30 00 3B 00
         36 00 35 00
         35 00 33 00
         35 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
000002BF                    	.debug
000002BF 2E 00 73 00        		.dw '.stabs "float:t12=r1;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         66 00 6C 00
         6F 00 61 00
         74 00 3A 00
         74 00 31 00
         32 00 3D 00
         72 00 31 00
         3B 00 32 00
         3B 00 30 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
000002E5                    	.debug
000002E5 2E 00 73 00        		.dw '.stabs "double:t13=r1;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 6F 00
         75 00 62 00
         6C 00 65 00
         3A 00 74 00
         31 00 33 00
         3D 00 72 00
         31 00 3B 00
         32 00 3B 00
         30 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
0000030C                    	.debug
0000030C 2E 00 73 00        		.dw '.stabs "long double:t14=r1;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 64 00
         6F 00 75 00
         62 00 6C 00
         65 00 3A 00
         74 00 31 00
         34 00 3D 00
         72 00 31 00
         3B 00 32 00
         3B 00 30 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
00000338                    	.debug
00000338 2E 00 73 00        		.dw '.stabs "complex int:t15=s2real:1,0,16;imag:1,16,16;;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 31 00
         35 00 3D 00
         73 00 32 00
         72 00 65 00
         61 00 6C 00
         3A 00 31 00
         2C 00 30 00
         2C 00 31 00
         36 00 3B 00
         69 00 6D 00
         61 00 67 00
         3A 00 31 00
         2C 00 31 00
         36 00 2C 00
         31 00 36 00
         3B 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
00000379                    	.debug
00000379 2E 00 73 00        		.dw '.stabs "complex float:t16=r16;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         66 00 6C 00
         6F 00 61 00
         74 00 3A 00
         74 00 31 00
         36 00 3D 00
         72 00 31 00
         36 00 3B 00
         32 00 3B 00
         30 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
000003A8                    	.debug
000003A8 2E 00 73 00        		.dw '.stabs "complex double:t17=r17;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         64 00 6F 00
         75 00 62 00
         6C 00 65 00
         3A 00 74 00
         31 00 37 00
         3D 00 72 00
         31 00 37 00
         3B 00 32 00
         3B 00 30 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
000003D8                    	.debug
000003D8 2E 00 73 00        		.dw '.stabs "complex long double:t18=r18;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         6C 00 6F 00
         6E 00 67 00
         20 00 64 00
         6F 00 75 00
         62 00 6C 00
         65 00 3A 00
         74 00 31 00
         38 00 3D 00
         72 00 31 00
         38 00 3B 00
         32 00 3B 00
         30 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A6C9                    	.CODE
0000040D                    	.debug
0000040D 2E 00 73 00        		.dw '.stabs "void:t19=19",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         76 00 6F 00
         69 00 64 00
         3A 00 74 00
         31 00 39 00
         3D 00 31 00
         39 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6C9                    	.CODE
0000A6C9                    	.code
0000042D                    	.debug
0000042D 2E 00 73 00        		.dw '.stabs "Delay:F19",36,0,0,',0,0,offset _Delay,seg _Delay,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         44 00 65 00
         6C 00 61 00
         79 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         00 00 00 00
         0D 00 0A 00
0000A6C9                    	.CODE
                            	.public _Delay
                            	_Delay:	.proc
0000044D                    	.debug
0000044D 2E 00 73 00        		.dw '.stabn 0x44,0,67,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 37 00
         2C 00 00 00
         00 00      
00000460 00 00 00 00        		.dd LM1-_Delay
00000462 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6C9                    	.code
                            	LM1:
                            		// total=1, vars=1
                            		// frame_pointer_needed: 1
0000A6C9 88 DA              		push bp to [sp]
0000A6CA 41 20              		sp-=1
0000A6CB 08 0B 01 00        		bp=sp+1
                            	
0000A6CD 0D 03 04 00        		R1=BP+4
00000464                    	.debug
00000464 2E 00 73 00        		.dw '.stabn 0x44,0,68,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 38 00
         2C 00 00 00
         00 00      
00000477 06 00 00 00        		.dd LM2-_Delay
00000479 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6CF                    	.code
                            	LM2:
                            	LBB2:
0000047B                    	.debug
0000047B 2E 00 73 00        		.dw '.stabn 0x44,0,69,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 39 00
         2C 00 00 00
         00 00      
0000048E 06 00 00 00        		.dd LM3-_Delay
00000490 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6CF                    	.code
                            	LM3:
0000A6CF 40 94              		R2=0	// QImode move
0000A6D0 C5 D4              		[BP]=R2	// QImode move
                            	L3:
0000A6D1 C5 94              		R2=[BP]	// QImode move
0000A6D2 0A 45 FE 3F        		CMP R2,16382	// QImode compare
0000A6D4 04 8E 01 EE        		NSJNA L6	//QImode LEU
         00 EE      
0000A6D7 0F 9F E2 A6        		pc=L4	// Indirect jump
                            	L6:
00000492                    	.debug
00000492 2E 00 73 00        		.dw '.stabn 0x44,0,71,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 31 00
         2C 00 00 00
         00 00      
000004A5 10 00 00 00        		.dd LM4-_Delay
000004A7 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6D9                    	.code
                            	LM4:
0000A6D9 41 94              		R2=1	// QImode move
0000A6DA 1A D5 12 70        		[28690]=R2	// QImode move
000004A9                    	.debug
000004A9 2E 00 73 00        		.dw '.stabn 0x44,0,69,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 39 00
         2C 00 00 00
         00 00      
000004BC 13 00 00 00        		.dd LM5-_Delay
000004BE 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6DC                    	.code
                            	LM5:
                            	L5:
0000A6DC C5 94              		R2=[BP]	// QImode move
0000A6DD 0A 07 01 00        		R3=R2+1
0000A6DF C5 D6              		[BP]=R3	// QImode move
0000A6E0 0F 9F D1 A6        		pc=L3	// Indirect jump
                            	L4:
000004C0                    	.debug
000004C0 2E 00 73 00        		.dw '.stabn 0x44,0,73,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 33 00
         2C 00 00 00
         00 00      
000004D3 19 00 00 00        		.dd LM6-_Delay
000004D5 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6E2                    	.code
                            	LM6:
                            	LBE2:
000004D7                    	.debug
000004D7 2E 00 73 00        		.dw '.stabn 0x44,0,73,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 33 00
         2C 00 00 00
         00 00      
000004EA 19 00 00 00        		.dd LM7-_Delay
000004EC 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6E2                    	.code
                            	LM7:
                            	L2:
                            	
0000A6E2 41 00              		sp+=1
0000A6E3 88 98              		pop bp from [sp]
0000A6E4 90 9A              		retf
                            		.endp	// end of Delay
                            	
000004EE                    	.debug
000004EE 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000500 06 00 00 00        		.dd LBB2-_Delay
00000502 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6E5                    	.code
00000504                    	.debug
00000504 2E 00 73 00        		.dw '.stabs "i:4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         69 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A6E5                    	.CODE
0000051C                    	.debug
0000051C 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
0000052E 19 00 00 00        		.dd LBE2-_Delay
00000530 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6E5                    	.code
00000532                    	.debug
00000532 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
0000053B 1C 00 00 00        		.dd LME1-_Delay
0000053D 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6E5                    	.code
                            	LME1:
0000A6E5                    	.code
0000053F                    	.debug
0000053F 2E 00 73 00        		.dw '.stabs "PlaySnd:F19",36,0,0,',0,0,offset _PlaySnd,seg _PlaySnd,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         50 00 6C 00
         61 00 79 00
         53 00 6E 00
         64 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         1C 00 00 00
         0D 00 0A 00
0000A6E5                    	.CODE
                            	.public _PlaySnd
                            	_PlaySnd:	.proc
00000561                    	.debug
00000561 2E 00 73 00        		.dw '.stabn 0x44,0,83,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 33 00
         2C 00 00 00
         00 00      
00000574 00 00 00 00        		.dd LM8-_PlaySnd
00000576 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6E5                    	.code
                            	LM8:
                            		// total=1, vars=1
                            		// frame_pointer_needed: 1
0000A6E5 88 DA              		push bp to [sp]
0000A6E6 41 20              		sp-=1
0000A6E7 08 0B 01 00        		bp=sp+1
                            	
0000A6E9 0D 03 04 00        		R1=BP+4
0000A6EB C5 D2              		[BP]=R1	// QImode move
00000578                    	.debug
00000578 2E 00 73 00        		.dw '.stabn 0x44,0,84,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 34 00
         2C 00 00 00
         00 00      
0000058B 07 00 00 00        		.dd LM9-_PlaySnd
0000058D 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6EC                    	.code
                            	LM9:
0000A6EC 40 F0 72 9B        		call _BSR_StopRecognizer	// call without return value
0000058F                    	.debug
0000058F 2E 00 73 00        		.dw '.stabn 0x44,0,85,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 35 00
         2C 00 00 00
         00 00      
000005A2 09 00 00 00        		.dd LM10-_PlaySnd
000005A4 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6EE                    	.code
                            	LM10:
0000A6EE 41 92              		R1=1	// QImode move
0000A6EF C8 D2              		[SP--]=R1	// QImode move
0000A6F0 40 F0 C0 9F        		call _SACM_S480_Initial	// call with return value
0000A6F2 41 00              		SP = SP + 1	//SP
000005A6                    	.debug
000005A6 2E 00 73 00        		.dw '.stabn 0x44,0,86,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 36 00
         2C 00 00 00
         00 00      
000005B9 0E 00 00 00        		.dd LM11-_PlaySnd
000005BB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A6F3                    	.code
                            	LM11:
0000A6F3 43 92              		R1=3	// QImode move
0000A6F4 C8 D2              		[SP--]=R1	// QImode move
0000A6F5 C5 92              		R1=[BP]	// QImode move
0000A6F6 C5 96              		R3=[BP]	// QImode move
0000A6F7 0B 05 01 00        		R2=R3+1
0000A6F9 02 97              		R3=R2	// QImode move
0000A6FA C3 92              		R1=[R3]	// QImode move
0000A6FB C8 D2              		[SP--]=R1	// QImode move
0000A6FC C5 94              		R2=[BP]	// QImode move
0000A6FD C2 92              		R1=[R2]	// QImode move
0000A6FE C8 D2              		[SP--]=R1	// QImode move
0000A6FF 40 F0 F7 9F        		call _SACM_S480_Play	// call with return value
0000A701 43 00              		SP = SP + 3	//SP
000005BD                    	.debug
000005BD 2E 00 73 00        		.dw '.stabn 0x44,0,87,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 37 00
         2C 00 00 00
         00 00      
000005D0 1D 00 00 00        		.dd LM12-_PlaySnd
000005D2 0D 00 0A 00        		.dw 0x0d,0x0a
0000A702                    	.code
                            	LM12:
                            	L9:
0000A702 40 F0 D9 A0        		call _SACM_S480_Status	// call with return value
0000A704 09 B5 01 00        		R2=R1&1
0000A706 40 44              		CMP R2,0	// QImode test
0000A707 04 4E 01 EE        		NSJNZ L11	//QImode NE
         00 EE      
0000A70A 0F 9F 13 A7        		pc=L10	// Indirect jump
                            	L11:
000005D4                    	.debug
000005D4 2E 00 73 00        		.dw '.stabn 0x44,0,89,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 39 00
         2C 00 00 00
         00 00      
000005E7 27 00 00 00        		.dd LM13-_PlaySnd
000005E9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A70C                    	.code
                            	LM13:
0000A70C 40 F0 30 A1        		call _SACM_S480_ServiceLoop	// call with return value
000005EB                    	.debug
000005EB 2E 00 73 00        		.dw '.stabn 0x44,0,90,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 30 00
         2C 00 00 00
         00 00      
000005FE 29 00 00 00        		.dd LM14-_PlaySnd
00000600 0D 00 0A 00        		.dw 0x0d,0x0a
0000A70E                    	.code
                            	LM14:
0000A70E 41 92              		R1=1	// QImode move
0000A70F 19 D3 12 70        		[28690]=R1	// QImode move
00000602                    	.debug
00000602 2E 00 73 00        		.dw '.stabn 0x44,0,91,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 31 00
         2C 00 00 00
         00 00      
00000615 2C 00 00 00        		.dd LM15-_PlaySnd
00000617 0D 00 0A 00        		.dw 0x0d,0x0a
0000A711                    	.code
                            	LM15:
0000A711 0F 9F 02 A7        		pc=L9	// Indirect jump
                            	L10:
00000619                    	.debug
00000619 2E 00 73 00        		.dw '.stabn 0x44,0,92,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 32 00
         2C 00 00 00
         00 00      
0000062C 2E 00 00 00        		.dd LM16-_PlaySnd
0000062E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A713                    	.code
                            	LM16:
0000A713 40 F0 8F A0        		call _SACM_S480_Stop	// call with return value
00000630                    	.debug
00000630 2E 00 73 00        		.dw '.stabn 0x44,0,93,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 33 00
         2C 00 00 00
         00 00      
00000643 30 00 00 00        		.dd LM17-_PlaySnd
00000645 0D 00 0A 00        		.dw 0x0d,0x0a
0000A715                    	.code
                            	LM17:
0000A715 40 92              		R1=0	// QImode move
0000A716 C8 D2              		[SP--]=R1	// QImode move
0000A717 40 F0 7F 9B        		call _BSR_InitRecognizer	// call with return value
0000A719 41 00              		SP = SP + 1	//SP
00000647                    	.debug
00000647 2E 00 73 00        		.dw '.stabn 0x44,0,94,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 34 00
         2C 00 00 00
         00 00      
0000065A 35 00 00 00        		.dd LM18-_PlaySnd
0000065C 0D 00 0A 00        		.dw 0x0d,0x0a
0000A71A                    	.code
                            	LM18:
0000065E                    	.debug
0000065E 2E 00 73 00        		.dw '.stabn 0x44,0,94,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 34 00
         2C 00 00 00
         00 00      
00000671 35 00 00 00        		.dd LM19-_PlaySnd
00000673 0D 00 0A 00        		.dw 0x0d,0x0a
0000A71A                    	.code
                            	LM19:
                            	L8:
                            	
0000A71A 41 00              		sp+=1
0000A71B 88 98              		pop bp from [sp]
0000A71C 90 9A              		retf
                            		.endp	// end of PlaySnd
                            	
00000675                    	.debug
00000675 2E 00 73 00        		.dw '.stabs "SndIndex:p4",160,0,0,4',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         53 00 6E 00
         64 00 49 00
         6E 00 64 00
         65 00 78 00
         3A 00 70 00
         34 00 22 00
         2C 00 31 00
         36 00 30 00
         2C 00 30 00
         2C 00 30 00
         2C 00 34 00
         0D 00 0A 00
0000A71D                    	.CODE
00000695                    	.debug
00000695 2E 00 73 00        		.dw '.stabs "DAC_Channel:p4",160,0,0,5',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         44 00 41 00
         43 00 5F 00
         43 00 68 00
         61 00 6E 00
         6E 00 65 00
         6C 00 3A 00
         70 00 34 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         35 00 0D 00
         0A 00      
0000A71D                    	.CODE
000006B8                    	.debug
000006B8 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
000006C1 38 00 00 00        		.dd LME2-_PlaySnd
000006C3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A71D                    	.code
                            	LME2:
0000A71D                    	.code
000006C5                    	.debug
000006C5 2E 00 73 00        		.dw '.stabs "TrainWord:F1",36,0,0,',0,0,offset _TrainWord,seg _TrainWord,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         54 00 72 00
         61 00 69 00
         6E 00 57 00
         6F 00 72 00
         64 00 3A 00
         46 00 31 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 54 00
         00 00 0D 00
         0A 00      
0000A71D                    	.CODE
                            	.public _TrainWord
                            	_TrainWord:	.proc
000006E8                    	.debug
000006E8 2E 00 73 00        		.dw '.stabn 0x44,0,104,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         34 00 2C 00
         00 00 00 00
000006FC 00 00 00 00        		.dd LM20-_TrainWord
000006FE 0D 00 0A 00        		.dw 0x0d,0x0a
0000A71D                    	.code
                            	LM20:
                            		// total=2, vars=2
                            		// frame_pointer_needed: 1
0000A71D 88 DA              		push bp to [sp]
0000A71E 42 20              		sp-=2
0000A71F 08 0B 01 00        		bp=sp+1
                            	
0000A721 0D 03 05 00        		R1=BP+5
0000A723 01 D2              		[bp+1]=R1	// QImode move
00000700                    	.debug
00000700 2E 00 73 00        		.dw '.stabn 0x44,0,105,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         35 00 2C 00
         00 00 00 00
00000714 07 00 00 00        		.dd LM21-_TrainWord
00000716 0D 00 0A 00        		.dw 0x0d,0x0a
0000A724                    	.code
                            	LM21:
                            	LBB3:
00000718                    	.debug
00000718 2E 00 73 00        		.dw '.stabn 0x44,0,106,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         36 00 2C 00
         00 00 00 00
0000072C 07 00 00 00        		.dd LM22-_TrainWord
0000072E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A724                    	.code
                            	LM22:
0000A724 43 92              		R1=3	// QImode move
0000A725 C8 D2              		[SP--]=R1	// QImode move
0000A726 01 92              		R1=[bp+1]	// QImode move
0000A727 01 96              		R3=[bp+1]	// QImode move
0000A728 0B 05 01 00        		R2=R3+1
0000A72A 02 97              		R3=R2	// QImode move
0000A72B C3 92              		R1=[R3]	// QImode move
0000A72C C8 D2              		[SP--]=R1	// QImode move
0000A72D 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A72F 42 00              		SP = SP + 2	//SP
00000730                    	.debug
00000730 2E 00 73 00        		.dw '.stabn 0x44,0,107,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         37 00 2C 00
         00 00 00 00
00000744 13 00 00 00        		.dd LM23-_TrainWord
00000746 0D 00 0A 00        		.dw 0x0d,0x0a
0000A730                    	.code
                            	LM23:
                            	L14:
0000A730 0F 9F 34 A7        		pc=L16	// Indirect jump
0000A732 0F 9F 83 A7        		pc=L15	// Indirect jump
                            	L16:
00000748                    	.debug
00000748 2E 00 73 00        		.dw '.stabn 0x44,0,109,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         39 00 2C 00
         00 00 00 00
0000075C 17 00 00 00        		.dd LM24-_TrainWord
0000075E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A734                    	.code
                            	LM24:
0000A734 40 92              		R1=0	// QImode move
0000A735 C8 D2              		[SP--]=R1	// QImode move
0000A736 01 94              		R2=[bp+1]	// QImode move
0000A737 C2 92              		R1=[R2]	// QImode move
0000A738 C8 D2              		[SP--]=R1	// QImode move
0000A739 40 F0 F1 87        		call _BSR_Train	// call with return value
0000A73B 42 00              		SP = SP + 2	//SP
0000A73C C5 D2              		[BP]=R1	// QImode move
00000760                    	.debug
00000760 2E 00 73 00        		.dw '.stabn 0x44,0,111,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         31 00 2C 00
         00 00 00 00
00000774 20 00 00 00        		.dd LM25-_TrainWord
00000776 0D 00 0A 00        		.dw 0x0d,0x0a
0000A73D                    	.code
                            	LM25:
0000A73D C5 92              		R1=[BP]	// QImode move
0000A73E 40 42              		CMP R1,0	// QImode test
0000A73F 04 4E 01 EE        		NSJNZ L17	//QImode NE
         00 EE      
0000A742 0F 9F 83 A7        		pc=L15	// Indirect jump
                            	L17:
00000778                    	.debug
00000778 2E 00 73 00        		.dw '.stabn 0x44,0,112,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         32 00 2C 00
         00 00 00 00
0000078C 27 00 00 00        		.dd LM26-_TrainWord
0000078E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A744                    	.code
                            	LM26:
0000A744 C5 94              		R2=[BP]	// QImode move
0000A745 02 93              		R1=R2	// QImode move
0000A746 09 23 FA FF        		R1=R1-(-6)
0000A748 45 42              		CMP R1,5	// QImode compare
0000A749 35 9E 01 EE        		NSJA L25	//QImode GTU
         00 EE      
0000A74C 0A 95 99 9F        		R2=L26	// QImode move
0000A74E 02 03              		R1 = R1 + R2	//addqi3
0000A74F 01 97              		R3=R1	// QImode move
0000A750 C3 92              		R1=[R3]	// QImode move
0000A751 01 9F              		pc=R1	// tablejump
00009F99                    	.text
                            	L26:
00009F99 7C A7              		.dw L24
00009F9A 72 A7              		.dw L23
00009F9B 6F A7              		.dw L22
00009F9C 65 A7              		.dw L21
00009F9D 5C A7              		.dw L20
00009F9E 52 A7              		.dw L19
0000A752                    	.code
                            	L19:
00000790                    	.debug
00000790 2E 00 73 00        		.dw '.stabn 0x44,0,115,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         35 00 2C 00
         00 00 00 00
000007A4 35 00 00 00        		.dd LM27-_TrainWord
000007A6 0D 00 0A 00        		.dw 0x0d,0x0a
0000A752                    	.code
                            	LM27:
0000A752 43 92              		R1=3	// QImode move
0000A753 C8 D2              		[SP--]=R1	// QImode move
0000A754 47 92              		R1=7	// QImode move
0000A755 C8 D2              		[SP--]=R1	// QImode move
0000A756 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A758 42 00              		SP = SP + 2	//SP
000007A8                    	.debug
000007A8 2E 00 73 00        		.dw '.stabn 0x44,0,116,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         36 00 2C 00
         00 00 00 00
000007BC 3C 00 00 00        		.dd LM28-_TrainWord
000007BE 0D 00 0A 00        		.dw 0x0d,0x0a
0000A759                    	.code
                            	LM28:
0000A759 41 62              		R1=(-1)	// QImode move
0000A75A 0F 9F 86 A7        		pc=L13	// Indirect jump
                            	L20:
000007C0                    	.debug
000007C0 2E 00 73 00        		.dw '.stabn 0x44,0,118,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         38 00 2C 00
         00 00 00 00
000007D4 3F 00 00 00        		.dd LM29-_TrainWord
000007D6 0D 00 0A 00        		.dw 0x0d,0x0a
0000A75C                    	.code
                            	LM29:
0000A75C 43 92              		R1=3	// QImode move
0000A75D C8 D2              		[SP--]=R1	// QImode move
0000A75E 46 92              		R1=6	// QImode move
0000A75F C8 D2              		[SP--]=R1	// QImode move
0000A760 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A762 42 00              		SP = SP + 2	//SP
000007D8                    	.debug
000007D8 2E 00 73 00        		.dw '.stabn 0x44,0,119,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         39 00 2C 00
         00 00 00 00
000007EC 46 00 00 00        		.dd LM30-_TrainWord
000007EE 0D 00 0A 00        		.dw 0x0d,0x0a
0000A763                    	.code
                            	LM30:
0000A763 0F 9F 81 A7        		pc=L18	// Indirect jump
                            	L21:
000007F0                    	.debug
000007F0 2E 00 73 00        		.dw '.stabn 0x44,0,121,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         31 00 2C 00
         00 00 00 00
00000804 48 00 00 00        		.dd LM31-_TrainWord
00000806 0D 00 0A 00        		.dw 0x0d,0x0a
0000A765                    	.code
                            	LM31:
0000A765 43 92              		R1=3	// QImode move
0000A766 C8 D2              		[SP--]=R1	// QImode move
0000A767 48 92              		R1=8	// QImode move
0000A768 C8 D2              		[SP--]=R1	// QImode move
0000A769 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A76B 42 00              		SP = SP + 2	//SP
00000808                    	.debug
00000808 2E 00 73 00        		.dw '.stabn 0x44,0,122,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         32 00 2C 00
         00 00 00 00
0000081C 4F 00 00 00        		.dd LM32-_TrainWord
0000081E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A76C                    	.code
                            	LM32:
0000A76C 43 62              		R1=(-3)	// QImode move
0000A76D 0F 9F 86 A7        		pc=L13	// Indirect jump
                            	L22:
00000820                    	.debug
00000820 2E 00 73 00        		.dw '.stabn 0x44,0,124,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         34 00 2C 00
         00 00 00 00
00000834 52 00 00 00        		.dd LM33-_TrainWord
00000836 0D 00 0A 00        		.dw 0x0d,0x0a
0000A76F                    	.code
                            	LM33:
0000A76F 44 62              		R1=(-4)	// QImode move
0000A770 0F 9F 86 A7        		pc=L13	// Indirect jump
                            	L23:
00000838                    	.debug
00000838 2E 00 73 00        		.dw '.stabn 0x44,0,126,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         36 00 2C 00
         00 00 00 00
0000084C 55 00 00 00        		.dd LM34-_TrainWord
0000084E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A772                    	.code
                            	LM34:
0000A772 43 92              		R1=3	// QImode move
0000A773 C8 D2              		[SP--]=R1	// QImode move
0000A774 48 92              		R1=8	// QImode move
0000A775 C8 D2              		[SP--]=R1	// QImode move
0000A776 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A778 42 00              		SP = SP + 2	//SP
00000850                    	.debug
00000850 2E 00 73 00        		.dw '.stabn 0x44,0,127,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         37 00 2C 00
         00 00 00 00
00000864 5C 00 00 00        		.dd LM35-_TrainWord
00000866 0D 00 0A 00        		.dw 0x0d,0x0a
0000A779                    	.code
                            	LM35:
0000A779 45 62              		R1=(-5)	// QImode move
0000A77A 0F 9F 86 A7        		pc=L13	// Indirect jump
                            	L24:
00000868                    	.debug
00000868 2E 00 73 00        		.dw '.stabn 0x44,0,129,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         39 00 2C 00
         00 00 00 00
0000087C 5F 00 00 00        		.dd LM36-_TrainWord
0000087E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A77C                    	.code
                            	LM36:
0000A77C 46 62              		R1=(-6)	// QImode move
0000A77D 0F 9F 86 A7        		pc=L13	// Indirect jump
                            	L25:
00000880                    	.debug
00000880 2E 00 73 00        		.dw '.stabn 0x44,0,131,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 33 00
         31 00 2C 00
         00 00 00 00
00000894 62 00 00 00        		.dd LM37-_TrainWord
00000896 0D 00 0A 00        		.dw 0x0d,0x0a
0000A77F                    	.code
                            	LM37:
0000A77F 0F 9F 81 A7        		pc=L18	// Indirect jump
                            	L18:
00000898                    	.debug
00000898 2E 00 73 00        		.dw '.stabn 0x44,0,133,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 33 00
         33 00 2C 00
         00 00 00 00
000008AC 64 00 00 00        		.dd LM38-_TrainWord
000008AE 0D 00 0A 00        		.dw 0x0d,0x0a
0000A781                    	.code
                            	LM38:
0000A781 0F 9F 30 A7        		pc=L14	// Indirect jump
                            	L15:
000008B0                    	.debug
000008B0 2E 00 73 00        		.dw '.stabn 0x44,0,134,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 33 00
         34 00 2C 00
         00 00 00 00
000008C4 66 00 00 00        		.dd LM39-_TrainWord
000008C6 0D 00 0A 00        		.dw 0x0d,0x0a
0000A783                    	.code
                            	LM39:
0000A783 40 92              		R1=0	// QImode move
0000A784 0F 9F 86 A7        		pc=L13	// Indirect jump
000008C8                    	.debug
000008C8 2E 00 73 00        		.dw '.stabn 0x44,0,135,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 33 00
         35 00 2C 00
         00 00 00 00
000008DC 69 00 00 00        		.dd LM40-_TrainWord
000008DE 0D 00 0A 00        		.dw 0x0d,0x0a
0000A786                    	.code
                            	LM40:
                            	LBE3:
000008E0                    	.debug
000008E0 2E 00 73 00        		.dw '.stabn 0x44,0,135,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 33 00
         35 00 2C 00
         00 00 00 00
000008F4 69 00 00 00        		.dd LM41-_TrainWord
000008F6 0D 00 0A 00        		.dw 0x0d,0x0a
0000A786                    	.code
                            	LM41:
                            	L13:
                            	
0000A786 42 00              		sp+=2
0000A787 88 98              		pop bp from [sp]
0000A788 90 9A              		retf
                            		.endp	// end of TrainWord
                            	
000008F8                    	.debug
000008F8 2E 00 73 00        		.dw '.stabs "WordID:p4",160,0,0,5',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         57 00 6F 00
         72 00 64 00
         49 00 44 00
         3A 00 70 00
         34 00 22 00
         2C 00 31 00
         36 00 30 00
         2C 00 30 00
         2C 00 30 00
         2C 00 35 00
         0D 00 0A 00
0000A789                    	.CODE
00000916                    	.debug
00000916 2E 00 73 00        		.dw '.stabs "SndID:p4",160,0,0,6',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         53 00 6E 00
         64 00 49 00
         44 00 3A 00
         70 00 34 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         36 00 0D 00
         0A 00      
0000A789                    	.CODE
00000933                    	.debug
00000933 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000945 07 00 00 00        		.dd LBB3-_TrainWord
00000947 0D 00 0A 00        		.dw 0x0d,0x0a
0000A789                    	.code
00000949                    	.debug
00000949 2E 00 73 00        		.dw '.stabs "Result:1",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         52 00 65 00
         73 00 75 00
         6C 00 74 00
         3A 00 31 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A789                    	.CODE
00000966                    	.debug
00000966 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000978 69 00 00 00        		.dd LBE3-_TrainWord
0000097A 0D 00 0A 00        		.dw 0x0d,0x0a
0000A789                    	.code
0000097C                    	.debug
0000097C 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000985 6C 00 00 00        		.dd LME3-_TrainWord
00000987 0D 00 0A 00        		.dw 0x0d,0x0a
0000A789                    	.code
                            	LME3:
0000A789                    	.code
00000989                    	.debug
00000989 2E 00 73 00        		.dw '.stabs "TrainSD:F19",36,0,0,',0,0,offset _TrainSD,seg _TrainSD,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         54 00 72 00
         61 00 69 00
         6E 00 53 00
         44 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         C0 00 00 00
         0D 00 0A 00
0000A789                    	.CODE
                            	.public _TrainSD
                            	_TrainSD:	.proc
000009AB                    	.debug
000009AB 2E 00 73 00        		.dw '.stabn 0x44,0,144,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 34 00
         34 00 2C 00
         00 00 00 00
000009BF 00 00 00 00        		.dd LM42-_TrainSD
000009C1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A789                    	.code
                            	LM42:
                            		// total=1, vars=1
                            		// frame_pointer_needed: 1
0000A789 88 DA              		push bp to [sp]
0000A78A 41 20              		sp-=1
0000A78B 08 0B 01 00        		bp=sp+1
                            	
0000A78D 0D 03 04 00        		R1=BP+4
0000A78F C5 D2              		[BP]=R1	// QImode move
000009C3                    	.debug
000009C3 2E 00 73 00        		.dw '.stabn 0x44,0,145,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 34 00
         35 00 2C 00
         00 00 00 00
000009D7 07 00 00 00        		.dd LM43-_TrainSD
000009D9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A790                    	.code
                            	LM43:
                            	L30:
0000A790 40 92              		R1=0	// QImode move
0000A791 C8 D2              		[SP--]=R1	// QImode move
0000A792 09 93 00 01        		R1=256	// QImode move
0000A794 C8 D2              		[SP--]=R1	// QImode move
0000A795 40 F0 1D A7        		call _TrainWord	// call with return value
0000A797 42 00              		SP = SP + 2	//SP
0000A798 40 42              		CMP R1,0	// QImode test
0000A799 04 4E 01 EE        		NSJNZ L32	//QImode NE
         00 EE      
0000A79C 0F 9F A0 A7        		pc=L31	// Indirect jump
                            	L32:
0000A79E 0F 9F 90 A7        		pc=L30	// Indirect jump
                            	L31:
000009DB                    	.debug
000009DB 2E 00 73 00        		.dw '.stabn 0x44,0,146,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 34 00
         36 00 2C 00
         00 00 00 00
000009EF 17 00 00 00        		.dd LM44-_TrainSD
000009F1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7A0                    	.code
                            	LM44:
                            	L33:
0000A7A0 41 92              		R1=1	// QImode move
0000A7A1 C8 D2              		[SP--]=R1	// QImode move
0000A7A2 09 93 01 01        		R1=257	// QImode move
0000A7A4 C8 D2              		[SP--]=R1	// QImode move
0000A7A5 40 F0 1D A7        		call _TrainWord	// call with return value
0000A7A7 42 00              		SP = SP + 2	//SP
0000A7A8 40 42              		CMP R1,0	// QImode test
0000A7A9 04 4E 01 EE        		NSJNZ L35	//QImode NE
         00 EE      
0000A7AC 0F 9F B0 A7        		pc=L34	// Indirect jump
                            	L35:
0000A7AE 0F 9F A0 A7        		pc=L33	// Indirect jump
                            	L34:
000009F3                    	.debug
000009F3 2E 00 73 00        		.dw '.stabn 0x44,0,150,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 35 00
         30 00 2C 00
         00 00 00 00
00000A07 27 00 00 00        		.dd LM45-_TrainSD
00000A09 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7B0                    	.code
                            	LM45:
00000A0B                    	.debug
00000A0B 2E 00 73 00        		.dw '.stabn 0x44,0,150,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 35 00
         30 00 2C 00
         00 00 00 00
00000A1F 27 00 00 00        		.dd LM46-_TrainSD
00000A21 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7B0                    	.code
                            	LM46:
                            	L29:
                            	
0000A7B0 41 00              		sp+=1
0000A7B1 88 98              		pop bp from [sp]
0000A7B2 90 9A              		retf
                            		.endp	// end of TrainSD
                            	
00000A23                    	.debug
00000A23 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000A2C 2A 00 00 00        		.dd LME4-_TrainSD
00000A2E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7B3                    	.code
                            	LME4:
0000A7B3                    	.code
00000A30                    	.debug
00000A30 2E 00 73 00        		.dw '.stabs "StoreSD:F19",36,0,0,',0,0,offset _StoreSD,seg _StoreSD,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         53 00 74 00
         6F 00 72 00
         65 00 53 00
         44 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         EA 00 00 00
         0D 00 0A 00
0000A7B3                    	.CODE
                            	.public _StoreSD
                            	_StoreSD:	.proc
00000A52                    	.debug
00000A52 2E 00 73 00        		.dw '.stabn 0x44,0,159,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 35 00
         39 00 2C 00
         00 00 00 00
00000A66 00 00 00 00        		.dd LM47-_StoreSD
00000A68 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7B3                    	.code
                            	LM47:
                            		// total=7, vars=7
                            		// frame_pointer_needed: 1
0000A7B3 88 DA              		push bp to [sp]
0000A7B4 47 20              		sp-=7
0000A7B5 08 0B 01 00        		bp=sp+1
                            	
0000A7B7 0D 03 0A 00        		R1=BP+10
0000A7B9 04 D2              		[bp+4]=R1	// QImode move
00000A6A                    	.debug
00000A6A 2E 00 73 00        		.dw '.stabn 0x44,0,159,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 35 00
         39 00 2C 00
         00 00 00 00
00000A7E 07 00 00 00        		.dd LM48-_StoreSD
00000A80 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7BA                    	.code
                            	LM48:
                            	LBB4:
00000A82                    	.debug
00000A82 2E 00 73 00        		.dw '.stabn 0x44,0,160,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         30 00 2C 00
         00 00 00 00
00000A96 07 00 00 00        		.dd LM49-_StoreSD
00000A98 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7BA                    	.code
                            	LM49:
0000A7BA 09 63 00 20        		R1=(-8192)	// QImode move
0000A7BC C8 D2              		[SP--]=R1	// QImode move
0000A7BD 40 F0 66 AC        		call _F_FlashErase	// call without return value
0000A7BF 41 00              		SP = SP + 1	//SP
00000A9A                    	.debug
00000A9A 2E 00 73 00        		.dw '.stabn 0x44,0,161,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         31 00 2C 00
         00 00 00 00
00000AAE 0D 00 00 00        		.dd LM50-_StoreSD
00000AB0 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7C0                    	.code
                            	LM50:
0000A7C0 09 63 00 1F        		R1=(-7936)	// QImode move
0000A7C2 C8 D2              		[SP--]=R1	// QImode move
0000A7C3 40 F0 66 AC        		call _F_FlashErase	// call without return value
0000A7C5 41 00              		SP = SP + 1	//SP
00000AB2                    	.debug
00000AB2 2E 00 73 00        		.dw '.stabn 0x44,0,162,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         32 00 2C 00
         00 00 00 00
00000AC6 13 00 00 00        		.dd LM51-_StoreSD
00000AC8 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7C6                    	.code
                            	LM51:
0000A7C6 09 63 00 20        		R1=(-8192)	// QImode move
0000A7C8 C5 D2              		[BP]=R1	// QImode move
00000ACA                    	.debug
00000ACA 2E 00 73 00        		.dw '.stabn 0x44,0,163,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         33 00 2C 00
         00 00 00 00
00000ADE 16 00 00 00        		.dd LM52-_StoreSD
00000AE0 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7C9                    	.code
                            	LM52:
0000A7C9 05 93              		R1=BP	// QImode move
0000A7CA 0D 05 02 00        		R2=BP+2
0000A7CC 09 93 00 01        		R1=256	// QImode move
0000A7CE 02 97              		R3=R2	// QImode move
0000A7CF C3 D2              		[R3]=R1	// QImode move
                            	L39:
0000A7D0 05 93              		R1=BP	// QImode move
0000A7D1 0D 05 02 00        		R2=BP+2
0000A7D3 02 99              		R4=R2	// QImode move
0000A7D4 C4 92              		R1=[R4]	// QImode move
0000A7D5 09 43 01 01        		CMP R1,257	// QImode compare
0000A7D7 04 8E 01 EE        		NSJNA L42	//QImode LEU
         00 EE      
0000A7DA 0F 9F 4F A8        		pc=L40	// Indirect jump
                            	L42:
00000AE2                    	.debug
00000AE2 2E 00 73 00        		.dw '.stabn 0x44,0,165,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         35 00 2C 00
         00 00 00 00
00000AF6 29 00 00 00        		.dd LM53-_StoreSD
00000AF8 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7DC                    	.code
                            	LM53:
0000A7DC 05 93              		R1=BP	// QImode move
0000A7DD 0D 03 03 00        		R1=BP+3
0000A7DF 05 D2              		[bp+5]=R1	// QImode move
0000A7E0 05 93              		R1=BP	// QImode move
0000A7E1 0D 05 02 00        		R2=BP+2
0000A7E3 02 97              		R3=R2	// QImode move
0000A7E4 C3 92              		R1=[R3]	// QImode move
0000A7E5 C8 D2              		[SP--]=R1	// QImode move
0000A7E6 40 F0 17 85        		call _BSR_ExportSDWord	// call with return value
0000A7E8 41 00              		SP = SP + 1	//SP
0000A7E9 05 98              		R4=[bp+5]	// QImode move
0000A7EA C4 D2              		[R4]=R1	// QImode move
00000AFA                    	.debug
00000AFA 2E 00 73 00        		.dw '.stabn 0x44,0,166,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         36 00 2C 00
         00 00 00 00
00000B0E 38 00 00 00        		.dd LM54-_StoreSD
00000B10 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7EB                    	.code
                            	LM54:
                            	L43:
0000A7EB 05 93              		R1=BP	// QImode move
0000A7EC 0D 05 03 00        		R2=BP+3
0000A7EE 02 97              		R3=R2	// QImode move
0000A7EF C3 92              		R1=[R3]	// QImode move
0000A7F0 40 42              		CMP R1,0	// QImode test
0000A7F1 04 4E 01 EE        		NSJNZ L45	//QImode NE
         00 EE      
0000A7F4 0F 9F 07 A8        		pc=L44	// Indirect jump
                            	L45:
00000B12                    	.debug
00000B12 2E 00 73 00        		.dw '.stabn 0x44,0,167,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         37 00 2C 00
         00 00 00 00
00000B26 43 00 00 00        		.dd LM55-_StoreSD
00000B28 0D 00 0A 00        		.dw 0x0d,0x0a
0000A7F6                    	.code
                            	LM55:
0000A7F6 05 93              		R1=BP	// QImode move
0000A7F7 0D 09 03 00        		R4=BP+3
0000A7F9 06 D8              		[bp+6]=R4	// QImode move
0000A7FA 05 93              		R1=BP	// QImode move
0000A7FB 0D 05 02 00        		R2=BP+2
0000A7FD 02 97              		R3=R2	// QImode move
0000A7FE C3 92              		R1=[R3]	// QImode move
0000A7FF C8 D2              		[SP--]=R1	// QImode move
0000A800 40 F0 17 85        		call _BSR_ExportSDWord	// call with return value
0000A802 41 00              		SP = SP + 1	//SP
0000A803 06 98              		R4=[bp+6]	// QImode move
0000A804 C4 D2              		[R4]=R1	// QImode move
0000A805 0F 9F EB A7        		pc=L43	// Indirect jump
                            	L44:
00000B2A                    	.debug
00000B2A 2E 00 73 00        		.dw '.stabn 0x44,0,168,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         38 00 2C 00
         00 00 00 00
00000B3E 54 00 00 00        		.dd LM56-_StoreSD
00000B40 0D 00 0A 00        		.dw 0x0d,0x0a
0000A807                    	.code
                            	LM56:
0000A807 05 93              		R1=BP	// QImode move
0000A808 0D 05 01 00        		R2=BP+1
0000A80A 40 92              		R1=0	// QImode move
0000A80B 02 97              		R3=R2	// QImode move
0000A80C C3 D2              		[R3]=R1	// QImode move
                            	L46:
0000A80D 05 93              		R1=BP	// QImode move
0000A80E 0D 05 01 00        		R2=BP+1
0000A810 02 99              		R4=R2	// QImode move
0000A811 C4 92              		R1=[R4]	// QImode move
0000A812 09 43 63 00        		CMP R1,99	// QImode compare
0000A814 04 8E 01 EE        		NSJNA L49	//QImode LEU
         00 EE      
0000A817 0F 9F 3E A8        		pc=L41	// Indirect jump
                            	L49:
00000B42                    	.debug
00000B42 2E 00 73 00        		.dw '.stabn 0x44,0,170,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 37 00
         30 00 2C 00
         00 00 00 00
00000B56 66 00 00 00        		.dd LM57-_StoreSD
00000B58 0D 00 0A 00        		.dw 0x0d,0x0a
0000A819                    	.code
                            	LM57:
0000A819 05 93              		R1=BP	// QImode move
0000A81A 0D 05 01 00        		R2=BP+1
0000A81C 09 93 62 03        		R1=_BSR_SDModel	// QImode move
0000A81E 02 97              		R3=R2	// QImode move
0000A81F C3 94              		R2=[R3]	// QImode move
0000A820 02 03              		R1 = R1 + R2	//addqi3
0000A821 01 99              		R4=R1	// QImode move
0000A822 C4 94              		R2=[R4]	// QImode move
0000A823 C8 D4              		[SP--]=R2	// QImode move
0000A824 C5 92              		R1=[BP]	// QImode move
0000A825 C8 D2              		[SP--]=R1	// QImode move
0000A826 40 F0 40 AC        		call _F_FlashWrite1Word	// call without return value
0000A828 42 00              		SP = SP + 2	//SP
00000B5A                    	.debug
00000B5A 2E 00 73 00        		.dw '.stabn 0x44,0,171,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 37 00
         31 00 2C 00
         00 00 00 00
00000B6E 76 00 00 00        		.dd LM58-_StoreSD
00000B70 0D 00 0A 00        		.dw 0x0d,0x0a
0000A829                    	.code
                            	LM58:
0000A829 C5 92              		R1=[BP]	// QImode move
0000A82A 09 05 01 00        		R2=R1+1
0000A82C C5 D4              		[BP]=R2	// QImode move
00000B72                    	.debug
00000B72 2E 00 73 00        		.dw '.stabn 0x44,0,168,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         38 00 2C 00
         00 00 00 00
00000B86 7A 00 00 00        		.dd LM59-_StoreSD
00000B88 0D 00 0A 00        		.dw 0x0d,0x0a
0000A82D                    	.code
                            	LM59:
                            	L48:
0000A82D 05 93              		R1=BP	// QImode move
0000A82E 0D 05 01 00        		R2=BP+1
0000A830 05 97              		R3=BP	// QImode move
0000A831 0D 03 01 00        		R1=BP+1
0000A833 05 95              		R2=BP	// QImode move
0000A834 0D 07 01 00        		R3=BP+1
0000A836 03 99              		R4=R3	// QImode move
0000A837 C4 94              		R2=[R4]	// QImode move
0000A838 0A 07 01 00        		R3=R2+1
0000A83A 01 95              		R2=R1	// QImode move
0000A83B C2 D6              		[R2]=R3	// QImode move
0000A83C 0F 9F 0D A8        		pc=L46	// Indirect jump
                            	L47:
00000B8A                    	.debug
00000B8A 2E 00 73 00        		.dw '.stabn 0x44,0,163,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 36 00
         33 00 2C 00
         00 00 00 00
00000B9E 8B 00 00 00        		.dd LM60-_StoreSD
00000BA0 0D 00 0A 00        		.dw 0x0d,0x0a
0000A83E                    	.code
                            	LM60:
                            	L41:
0000A83E 05 93              		R1=BP	// QImode move
0000A83F 0D 05 02 00        		R2=BP+2
0000A841 05 97              		R3=BP	// QImode move
0000A842 0D 03 02 00        		R1=BP+2
0000A844 05 95              		R2=BP	// QImode move
0000A845 0D 07 02 00        		R3=BP+2
0000A847 03 99              		R4=R3	// QImode move
0000A848 C4 94              		R2=[R4]	// QImode move
0000A849 0A 07 01 00        		R3=R2+1
0000A84B 01 95              		R2=R1	// QImode move
0000A84C C2 D6              		[R2]=R3	// QImode move
0000A84D 0F 9F D0 A7        		pc=L39	// Indirect jump
                            	L40:
00000BA2                    	.debug
00000BA2 2E 00 73 00        		.dw '.stabn 0x44,0,174,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 37 00
         34 00 2C 00
         00 00 00 00
00000BB6 9C 00 00 00        		.dd LM61-_StoreSD
00000BB8 0D 00 0A 00        		.dw 0x0d,0x0a
0000A84F                    	.code
                            	LM61:
                            	LBE4:
00000BBA                    	.debug
00000BBA 2E 00 73 00        		.dw '.stabn 0x44,0,174,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 37 00
         34 00 2C 00
         00 00 00 00
00000BCE 9C 00 00 00        		.dd LM62-_StoreSD
00000BD0 0D 00 0A 00        		.dw 0x0d,0x0a
0000A84F                    	.code
                            	LM62:
                            	L38:
                            	
0000A84F 47 00              		sp+=7
0000A850 88 98              		pop bp from [sp]
0000A851 90 9A              		retf
                            		.endp	// end of StoreSD
                            	
00000BD2                    	.debug
00000BD2 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000BE4 07 00 00 00        		.dd LBB4-_StoreSD
00000BE6 0D 00 0A 00        		.dw 0x0d,0x0a
0000A852                    	.code
00000BE8                    	.debug
00000BE8 2E 00 73 00        		.dw '.stabs "ulAddr:4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         75 00 6C 00
         41 00 64 00
         64 00 72 00
         3A 00 34 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000A852                    	.CODE
00000C05                    	.debug
00000C05 2E 00 73 00        		.dw '.stabs "i:4",128,0,0,1',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         69 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 31 00
         0D 00 0A 00
0000A852                    	.CODE
00000C1D                    	.debug
00000C1D 2E 00 73 00        		.dw '.stabs "commandID:4",128,0,0,2',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 6D 00
         61 00 6E 00
         64 00 49 00
         44 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 32 00
         0D 00 0A 00
0000A852                    	.CODE
00000C3D                    	.debug
00000C3D 2E 00 73 00        		.dw '.stabs "g_Ret:4",128,0,0,3',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         67 00 5F 00
         52 00 65 00
         74 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 33 00
         0D 00 0A 00
0000A852                    	.CODE
00000C59                    	.debug
00000C59 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000C6B 9C 00 00 00        		.dd LBE4-_StoreSD
00000C6D 0D 00 0A 00        		.dw 0x0d,0x0a
0000A852                    	.code
00000C6F                    	.debug
00000C6F 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000C78 9F 00 00 00        		.dd LME5-_StoreSD
00000C7A 0D 00 0A 00        		.dw 0x0d,0x0a
0000A852                    	.code
                            	LME5:
0000A852                    	.code
00000C7C                    	.debug
00000C7C 2E 00 73 00        		.dw '.stabs "LoadSD:F19",36,0,0,',0,0,offset _LoadSD,seg _LoadSD,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         4C 00 6F 00
         61 00 64 00
         53 00 44 00
         3A 00 46 00
         31 00 39 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 89 01
         00 00 0D 00
         0A 00      
0000A852                    	.CODE
                            	.public _LoadSD
                            	_LoadSD:	.proc
00000C9D                    	.debug
00000C9D 2E 00 73 00        		.dw '.stabn 0x44,0,183,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         33 00 2C 00
         00 00 00 00
00000CB1 00 00 00 00        		.dd LM63-_LoadSD
00000CB3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A852                    	.code
                            	LM63:
                            		// total=8, vars=8
                            		// frame_pointer_needed: 1
0000A852 88 DA              		push bp to [sp]
0000A853 48 20              		sp-=8
0000A854 08 0B 01 00        		bp=sp+1
                            	
0000A856 0D 03 0B 00        		R1=BP+11
0000A858 05 D2              		[bp+5]=R1	// QImode move
00000CB5                    	.debug
00000CB5 2E 00 73 00        		.dw '.stabn 0x44,0,183,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         33 00 2C 00
         00 00 00 00
00000CC9 07 00 00 00        		.dd LM64-_LoadSD
00000CCB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A859                    	.code
                            	LM64:
                            	LBB5:
00000CCD                    	.debug
00000CCD 2E 00 73 00        		.dw '.stabn 0x44,0,184,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         34 00 2C 00
         00 00 00 00
00000CE1 07 00 00 00        		.dd LM65-_LoadSD
00000CE3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A859                    	.code
                            	LM65:
0000A859 09 63 00 20        		R1=(-8192)	// QImode move
0000A85B C5 D2              		[BP]=R1	// QImode move
00000CE5                    	.debug
00000CE5 2E 00 73 00        		.dw '.stabn 0x44,0,185,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         35 00 2C 00
         00 00 00 00
00000CF9 0A 00 00 00        		.dd LM66-_LoadSD
00000CFB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A85C                    	.code
                            	LM66:
0000A85C 05 93              		R1=BP	// QImode move
0000A85D 0D 05 02 00        		R2=BP+2
0000A85F 40 92              		R1=0	// QImode move
0000A860 02 97              		R3=R2	// QImode move
0000A861 C3 D2              		[R3]=R1	// QImode move
                            	L54:
0000A862 05 93              		R1=BP	// QImode move
0000A863 0D 05 02 00        		R2=BP+2
0000A865 02 99              		R4=R2	// QImode move
0000A866 C4 92              		R1=[R4]	// QImode move
0000A867 41 42              		CMP R1,1	// QImode compare
0000A868 04 8E 01 EE        		NSJNA L57	//QImode LEU
         00 EE      
0000A86B 0F 9F D9 A8        		pc=L55	// Indirect jump
                            	L57:
00000CFD                    	.debug
00000CFD 2E 00 73 00        		.dw '.stabn 0x44,0,187,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         37 00 2C 00
         00 00 00 00
00000D11 1B 00 00 00        		.dd LM67-_LoadSD
00000D13 0D 00 0A 00        		.dw 0x0d,0x0a
0000A86D                    	.code
                            	LM67:
0000A86D 05 93              		R1=BP	// QImode move
0000A86E 0D 05 01 00        		R2=BP+1
0000A870 40 92              		R1=0	// QImode move
0000A871 02 97              		R3=R2	// QImode move
0000A872 C3 D2              		[R3]=R1	// QImode move
                            	L58:
0000A873 05 93              		R1=BP	// QImode move
0000A874 0D 05 01 00        		R2=BP+1
0000A876 02 99              		R4=R2	// QImode move
0000A877 C4 92              		R1=[R4]	// QImode move
0000A878 09 43 63 00        		CMP R1,99	// QImode compare
0000A87A 04 8E 01 EE        		NSJNA L61	//QImode LEU
         00 EE      
0000A87D 0F 9F AB A8        		pc=L59	// Indirect jump
                            	L61:
00000D15                    	.debug
00000D15 2E 00 73 00        		.dw '.stabn 0x44,0,189,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         39 00 2C 00
         00 00 00 00
00000D29 2D 00 00 00        		.dd LM68-_LoadSD
00000D2B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A87F                    	.code
                            	LM68:
0000A87F 05 95              		R2=BP	// QImode move
0000A880 0D 03 03 00        		R1=BP+3
0000A882 C5 94              		R2=[BP]	// QImode move
0000A883 02 99              		R4=R2	// QImode move
0000A884 C4 96              		R3=[R4]	// QImode move
0000A885 01 95              		R2=R1	// QImode move
0000A886 C2 D6              		[R2]=R3	// QImode move
00000D2D                    	.debug
00000D2D 2E 00 73 00        		.dw '.stabn 0x44,0,190,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         30 00 2C 00
         00 00 00 00
00000D41 35 00 00 00        		.dd LM69-_LoadSD
00000D43 0D 00 0A 00        		.dw 0x0d,0x0a
0000A887                    	.code
                            	LM69:
0000A887 05 93              		R1=BP	// QImode move
0000A888 0D 05 01 00        		R2=BP+1
0000A88A 09 93 62 03        		R1=_BSR_SDModel	// QImode move
0000A88C 02 97              		R3=R2	// QImode move
0000A88D C3 94              		R2=[R3]	// QImode move
0000A88E 02 03              		R1 = R1 + R2	//addqi3
0000A88F 05 95              		R2=BP	// QImode move
0000A890 0D 07 03 00        		R3=BP+3
0000A892 03 99              		R4=R3	// QImode move
0000A893 C4 94              		R2=[R4]	// QImode move
0000A894 01 97              		R3=R1	// QImode move
0000A895 C3 D4              		[R3]=R2	// QImode move
00000D45                    	.debug
00000D45 2E 00 73 00        		.dw '.stabn 0x44,0,191,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         31 00 2C 00
         00 00 00 00
00000D59 44 00 00 00        		.dd LM70-_LoadSD
00000D5B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A896                    	.code
                            	LM70:
0000A896 C5 92              		R1=[BP]	// QImode move
0000A897 09 05 01 00        		R2=R1+1
0000A899 C5 D4              		[BP]=R2	// QImode move
00000D5D                    	.debug
00000D5D 2E 00 73 00        		.dw '.stabn 0x44,0,187,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         37 00 2C 00
         00 00 00 00
00000D71 48 00 00 00        		.dd LM71-_LoadSD
00000D73 0D 00 0A 00        		.dw 0x0d,0x0a
0000A89A                    	.code
                            	LM71:
                            	L60:
0000A89A 05 93              		R1=BP	// QImode move
0000A89B 0D 05 01 00        		R2=BP+1
0000A89D 05 97              		R3=BP	// QImode move
0000A89E 0D 03 01 00        		R1=BP+1
0000A8A0 05 95              		R2=BP	// QImode move
0000A8A1 0D 07 01 00        		R3=BP+1
0000A8A3 03 99              		R4=R3	// QImode move
0000A8A4 C4 94              		R2=[R4]	// QImode move
0000A8A5 0A 07 01 00        		R3=R2+1
0000A8A7 01 95              		R2=R1	// QImode move
0000A8A8 C2 D6              		[R2]=R3	// QImode move
0000A8A9 0F 9F 73 A8        		pc=L58	// Indirect jump
                            	L59:
00000D75                    	.debug
00000D75 2E 00 73 00        		.dw '.stabn 0x44,0,193,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         33 00 2C 00
         00 00 00 00
00000D89 59 00 00 00        		.dd LM72-_LoadSD
00000D8B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8AB                    	.code
                            	LM72:
0000A8AB 05 93              		R1=BP	// QImode move
0000A8AC 0D 07 04 00        		R3=BP+4
0000A8AE 06 D6              		[bp+6]=R3	// QImode move
0000A8AF 40 F0 CE 84        		call _BSR_ImportSDWord	// call with return value
0000A8B1 06 98              		R4=[bp+6]	// QImode move
0000A8B2 C4 D2              		[R4]=R1	// QImode move
00000D8D                    	.debug
00000D8D 2E 00 73 00        		.dw '.stabn 0x44,0,194,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         34 00 2C 00
         00 00 00 00
00000DA1 61 00 00 00        		.dd LM73-_LoadSD
00000DA3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8B3                    	.code
                            	LM73:
                            	L62:
0000A8B3 05 93              		R1=BP	// QImode move
0000A8B4 0D 05 04 00        		R2=BP+4
0000A8B6 02 97              		R3=R2	// QImode move
0000A8B7 C3 92              		R1=[R3]	// QImode move
0000A8B8 40 42              		CMP R1,0	// QImode test
0000A8B9 04 4E 01 EE        		NSJNZ L64	//QImode NE
         00 EE      
0000A8BC 0F 9F C8 A8        		pc=L56	// Indirect jump
                            	L64:
00000DA5                    	.debug
00000DA5 2E 00 73 00        		.dw '.stabn 0x44,0,195,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         35 00 2C 00
         00 00 00 00
00000DB9 6C 00 00 00        		.dd LM74-_LoadSD
00000DBB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8BE                    	.code
                            	LM74:
0000A8BE 05 93              		R1=BP	// QImode move
0000A8BF 0D 09 04 00        		R4=BP+4
0000A8C1 07 D8              		[bp+7]=R4	// QImode move
0000A8C2 40 F0 CE 84        		call _BSR_ImportSDWord	// call with return value
0000A8C4 07 94              		R2=[bp+7]	// QImode move
0000A8C5 C2 D2              		[R2]=R1	// QImode move
0000A8C6 0F 9F B3 A8        		pc=L62	// Indirect jump
                            	L63:
00000DBD                    	.debug
00000DBD 2E 00 73 00        		.dw '.stabn 0x44,0,185,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         35 00 2C 00
         00 00 00 00
00000DD1 76 00 00 00        		.dd LM75-_LoadSD
00000DD3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8C8                    	.code
                            	LM75:
                            	L56:
0000A8C8 05 93              		R1=BP	// QImode move
0000A8C9 0D 05 02 00        		R2=BP+2
0000A8CB 05 97              		R3=BP	// QImode move
0000A8CC 0D 03 02 00        		R1=BP+2
0000A8CE 05 95              		R2=BP	// QImode move
0000A8CF 0D 07 02 00        		R3=BP+2
0000A8D1 03 99              		R4=R3	// QImode move
0000A8D2 C4 94              		R2=[R4]	// QImode move
0000A8D3 0A 07 01 00        		R3=R2+1
0000A8D5 01 95              		R2=R1	// QImode move
0000A8D6 C2 D6              		[R2]=R3	// QImode move
0000A8D7 0F 9F 62 A8        		pc=L54	// Indirect jump
                            	L55:
00000DD5                    	.debug
00000DD5 2E 00 73 00        		.dw '.stabn 0x44,0,197,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         37 00 2C 00
         00 00 00 00
00000DE9 87 00 00 00        		.dd LM76-_LoadSD
00000DEB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8D9                    	.code
                            	LM76:
                            	LBE5:
00000DED                    	.debug
00000DED 2E 00 73 00        		.dw '.stabn 0x44,0,197,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         37 00 2C 00
         00 00 00 00
00000E01 87 00 00 00        		.dd LM77-_LoadSD
00000E03 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8D9                    	.code
                            	LM77:
                            	L53:
                            	
0000A8D9 48 00              		sp+=8
0000A8DA 88 98              		pop bp from [sp]
0000A8DB 90 9A              		retf
                            		.endp	// end of LoadSD
                            	
00000E05                    	.debug
00000E05 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000E17 07 00 00 00        		.dd LBB5-_LoadSD
00000E19 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8DC                    	.code
00000E1B                    	.debug
00000E1B 2E 00 73 00        		.dw '.stabs "p:20=*4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         70 00 3A 00
         32 00 30 00
         3D 00 2A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A8DC                    	.CODE
00000E37                    	.debug
00000E37 2E 00 73 00        		.dw '.stabs "k:4",128,0,0,1',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6B 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 31 00
         0D 00 0A 00
0000A8DC                    	.CODE
00000E4F                    	.debug
00000E4F 2E 00 73 00        		.dw '.stabs "jk:4",128,0,0,2',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6A 00 6B 00
         3A 00 34 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         32 00 0D 00
         0A 00      
0000A8DC                    	.CODE
00000E68                    	.debug
00000E68 2E 00 73 00        		.dw '.stabs "Ret:4",128,0,0,3',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         52 00 65 00
         74 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 33 00
         0D 00 0A 00
0000A8DC                    	.CODE
00000E82                    	.debug
00000E82 2E 00 73 00        		.dw '.stabs "g_Ret:4",128,0,0,4',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         67 00 5F 00
         52 00 65 00
         74 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 34 00
         0D 00 0A 00
0000A8DC                    	.CODE
00000E9E                    	.debug
00000E9E 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000EB0 87 00 00 00        		.dd LBE5-_LoadSD
00000EB2 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8DC                    	.code
00000EB4                    	.debug
00000EB4 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000EBD 8A 00 00 00        		.dd LME6-_LoadSD
00000EBF 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8DC                    	.code
                            	LME6:
0000A8DC                    	.code
00000EC1                    	.debug
00000EC1 2E 00 73 00        		.dw '.stabs "GoAhead:F19",36,0,0,',0,0,offset _GoAhead,seg _GoAhead,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         47 00 6F 00
         41 00 68 00
         65 00 61 00
         64 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         13 02 00 00
         0D 00 0A 00
0000A8DC                    	.CODE
                            	.public _GoAhead
                            	_GoAhead:	.proc
00000EE3                    	.debug
00000EE3 2E 00 73 00        		.dw '.stabn 0x44,0,206,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 30 00
         36 00 2C 00
         00 00 00 00
00000EF7 00 00 00 00        		.dd LM78-_GoAhead
00000EF9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8DC                    	.code
                            	LM78:
                            		// total=2, vars=2
                            		// frame_pointer_needed: 1
0000A8DC 88 DA              		push bp to [sp]
0000A8DD 42 20              		sp-=2
0000A8DE 08 0B 01 00        		bp=sp+1
                            	
0000A8E0 0D 03 05 00        		R1=BP+5
0000A8E2 01 D2              		[bp+1]=R1	// QImode move
00000EFB                    	.debug
00000EFB 2E 00 73 00        		.dw '.stabn 0x44,0,207,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 30 00
         37 00 2C 00
         00 00 00 00
00000F0F 07 00 00 00        		.dd LM79-_GoAhead
00000F11 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8E3                    	.code
                            	LM79:
                            	LBB6:
00000F13                    	.debug
00000F13 2E 00 73 00        		.dw '.stabn 0x44,0,208,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 30 00
         38 00 2C 00
         00 00 00 00
00000F27 07 00 00 00        		.dd LM80-_GoAhead
00000F29 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8E3                    	.code
                            	LM80:
0000A8E3 43 92              		R1=3	// QImode move
0000A8E4 C8 D2              		[SP--]=R1	// QImode move
0000A8E5 41 92              		R1=1	// QImode move
0000A8E6 C8 D2              		[SP--]=R1	// QImode move
0000A8E7 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A8E9 42 00              		SP = SP + 2	//SP
00000F2B                    	.debug
00000F2B 2E 00 73 00        		.dw '.stabn 0x44,0,209,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 30 00
         39 00 2C 00
         00 00 00 00
00000F3F 0E 00 00 00        		.dd LM81-_GoAhead
00000F41 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8EA                    	.code
                            	LM81:
0000A8EA 09 93 00 28        		R1=10240	// QImode move
0000A8EC 19 D3 05 70        		[28677]=R1	// QImode move
00000F43                    	.debug
00000F43 2E 00 73 00        		.dw '.stabn 0x44,0,210,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 31 00
         30 00 2C 00
         00 00 00 00
00000F57 12 00 00 00        		.dd LM82-_GoAhead
00000F59 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8EE                    	.code
                            	LM82:
0000A8EE 40 92              		R1=0	// QImode move
0000A8EF C5 D2              		[BP]=R1	// QImode move
                            	L69:
0000A8F0 C5 92              		R1=[BP]	// QImode move
0000A8F1 67 42              		CMP R1,39	// QImode compare
0000A8F2 04 8E 01 EE        		NSJNA L72	//QImode LEU
         00 EE      
0000A8F5 0F 9F FF A8        		pc=L70	// Indirect jump
                            	L72:
00000F5B                    	.debug
00000F5B 2E 00 73 00        		.dw '.stabn 0x44,0,211,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 31 00
         31 00 2C 00
         00 00 00 00
00000F6F 1B 00 00 00        		.dd LM83-_GoAhead
00000F71 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8F7                    	.code
                            	LM83:
0000A8F7 40 F0 C9 A6        		call _Delay	// call without return value
00000F73                    	.debug
00000F73 2E 00 73 00        		.dw '.stabn 0x44,0,210,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 31 00
         30 00 2C 00
         00 00 00 00
00000F87 1D 00 00 00        		.dd LM84-_GoAhead
00000F89 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8F9                    	.code
                            	LM84:
                            	L71:
0000A8F9 C5 92              		R1=[BP]	// QImode move
0000A8FA 09 05 01 00        		R2=R1+1
0000A8FC C5 D4              		[BP]=R2	// QImode move
0000A8FD 0F 9F F0 A8        		pc=L69	// Indirect jump
                            	L70:
00000F8B                    	.debug
00000F8B 2E 00 73 00        		.dw '.stabn 0x44,0,212,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 31 00
         32 00 2C 00
         00 00 00 00
00000F9F 23 00 00 00        		.dd LM85-_GoAhead
00000FA1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A8FF                    	.code
                            	LM85:
0000A8FF 40 92              		R1=0	// QImode move
0000A900 19 D3 05 70        		[28677]=R1	// QImode move
00000FA3                    	.debug
00000FA3 2E 00 73 00        		.dw '.stabn 0x44,0,213,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 31 00
         33 00 2C 00
         00 00 00 00
00000FB7 26 00 00 00        		.dd LM86-_GoAhead
00000FB9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A902                    	.code
                            	LM86:
                            	LBE6:
00000FBB                    	.debug
00000FBB 2E 00 73 00        		.dw '.stabn 0x44,0,213,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 31 00
         33 00 2C 00
         00 00 00 00
00000FCF 26 00 00 00        		.dd LM87-_GoAhead
00000FD1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A902                    	.code
                            	LM87:
                            	L68:
                            	
0000A902 42 00              		sp+=2
0000A903 88 98              		pop bp from [sp]
0000A904 90 9A              		retf
                            		.endp	// end of GoAhead
                            	
00000FD3                    	.debug
00000FD3 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000FE5 07 00 00 00        		.dd LBB6-_GoAhead
00000FE7 0D 00 0A 00        		.dw 0x0d,0x0a
0000A905                    	.code
00000FE9                    	.debug
00000FE9 2E 00 73 00        		.dw '.stabs "j:4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6A 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A905                    	.CODE
00001001                    	.debug
00001001 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00001013 26 00 00 00        		.dd LBE6-_GoAhead
00001015 0D 00 0A 00        		.dw 0x0d,0x0a
0000A905                    	.code
00001017                    	.debug
00001017 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00001020 29 00 00 00        		.dd LME7-_GoAhead
00001022 0D 00 0A 00        		.dw 0x0d,0x0a
0000A905                    	.code
                            	LME7:
0000A905                    	.code
00001024                    	.debug
00001024 2E 00 73 00        		.dw '.stabs "BackUp:F19",36,0,0,',0,0,offset _BackUp,seg _BackUp,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         42 00 61 00
         63 00 6B 00
         55 00 70 00
         3A 00 46 00
         31 00 39 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 3C 02
         00 00 0D 00
         0A 00      
0000A905                    	.CODE
                            	.public _BackUp
                            	_BackUp:	.proc
00001045                    	.debug
00001045 2E 00 73 00        		.dw '.stabn 0x44,0,221,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         31 00 2C 00
         00 00 00 00
00001059 00 00 00 00        		.dd LM88-_BackUp
0000105B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A905                    	.code
                            	LM88:
                            		// total=2, vars=2
                            		// frame_pointer_needed: 1
0000A905 88 DA              		push bp to [sp]
0000A906 42 20              		sp-=2
0000A907 08 0B 01 00        		bp=sp+1
                            	
0000A909 0D 03 05 00        		R1=BP+5
0000A90B 01 D2              		[bp+1]=R1	// QImode move
0000105D                    	.debug
0000105D 2E 00 73 00        		.dw '.stabn 0x44,0,222,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         32 00 2C 00
         00 00 00 00
00001071 07 00 00 00        		.dd LM89-_BackUp
00001073 0D 00 0A 00        		.dw 0x0d,0x0a
0000A90C                    	.code
                            	LM89:
                            	LBB7:
00001075                    	.debug
00001075 2E 00 73 00        		.dw '.stabn 0x44,0,223,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         33 00 2C 00
         00 00 00 00
00001089 07 00 00 00        		.dd LM90-_BackUp
0000108B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A90C                    	.code
                            	LM90:
0000A90C 43 92              		R1=3	// QImode move
0000A90D C8 D2              		[SP--]=R1	// QImode move
0000A90E 42 92              		R1=2	// QImode move
0000A90F C8 D2              		[SP--]=R1	// QImode move
0000A910 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A912 42 00              		SP = SP + 2	//SP
0000108D                    	.debug
0000108D 2E 00 73 00        		.dw '.stabn 0x44,0,224,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         34 00 2C 00
         00 00 00 00
000010A1 0E 00 00 00        		.dd LM91-_BackUp
000010A3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A913                    	.code
                            	LM91:
0000A913 09 93 00 14        		R1=5120	// QImode move
0000A915 19 D3 05 70        		[28677]=R1	// QImode move
000010A5                    	.debug
000010A5 2E 00 73 00        		.dw '.stabn 0x44,0,225,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         35 00 2C 00
         00 00 00 00
000010B9 12 00 00 00        		.dd LM92-_BackUp
000010BB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A917                    	.code
                            	LM92:
0000A917 40 92              		R1=0	// QImode move
0000A918 C5 D2              		[BP]=R1	// QImode move
                            	L75:
0000A919 C5 92              		R1=[BP]	// QImode move
0000A91A 67 42              		CMP R1,39	// QImode compare
0000A91B 04 8E 01 EE        		NSJNA L78	//QImode LEU
         00 EE      
0000A91E 0F 9F 28 A9        		pc=L76	// Indirect jump
                            	L78:
000010BD                    	.debug
000010BD 2E 00 73 00        		.dw '.stabn 0x44,0,226,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         36 00 2C 00
         00 00 00 00
000010D1 1B 00 00 00        		.dd LM93-_BackUp
000010D3 0D 00 0A 00        		.dw 0x0d,0x0a
0000A920                    	.code
                            	LM93:
0000A920 40 F0 C9 A6        		call _Delay	// call without return value
000010D5                    	.debug
000010D5 2E 00 73 00        		.dw '.stabn 0x44,0,225,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         35 00 2C 00
         00 00 00 00
000010E9 1D 00 00 00        		.dd LM94-_BackUp
000010EB 0D 00 0A 00        		.dw 0x0d,0x0a
0000A922                    	.code
                            	LM94:
                            	L77:
0000A922 C5 92              		R1=[BP]	// QImode move
0000A923 09 05 01 00        		R2=R1+1
0000A925 C5 D4              		[BP]=R2	// QImode move
0000A926 0F 9F 19 A9        		pc=L75	// Indirect jump
                            	L76:
000010ED                    	.debug
000010ED 2E 00 73 00        		.dw '.stabn 0x44,0,227,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         37 00 2C 00
         00 00 00 00
00001101 23 00 00 00        		.dd LM95-_BackUp
00001103 0D 00 0A 00        		.dw 0x0d,0x0a
0000A928                    	.code
                            	LM95:
0000A928 40 92              		R1=0	// QImode move
0000A929 19 D3 05 70        		[28677]=R1	// QImode move
00001105                    	.debug
00001105 2E 00 73 00        		.dw '.stabn 0x44,0,228,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         38 00 2C 00
         00 00 00 00
00001119 26 00 00 00        		.dd LM96-_BackUp
0000111B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A92B                    	.code
                            	LM96:
                            	LBE7:
0000111D                    	.debug
0000111D 2E 00 73 00        		.dw '.stabn 0x44,0,228,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 32 00
         38 00 2C 00
         00 00 00 00
00001131 26 00 00 00        		.dd LM97-_BackUp
00001133 0D 00 0A 00        		.dw 0x0d,0x0a
0000A92B                    	.code
                            	LM97:
                            	L74:
                            	
0000A92B 42 00              		sp+=2
0000A92C 88 98              		pop bp from [sp]
0000A92D 90 9A              		retf
                            		.endp	// end of BackUp
                            	
00001135                    	.debug
00001135 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00001147 07 00 00 00        		.dd LBB7-_BackUp
00001149 0D 00 0A 00        		.dw 0x0d,0x0a
0000A92E                    	.code
0000114B                    	.debug
0000114B 2E 00 73 00        		.dw '.stabs "j:4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6A 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A92E                    	.CODE
00001163                    	.debug
00001163 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00001175 26 00 00 00        		.dd LBE7-_BackUp
00001177 0D 00 0A 00        		.dw 0x0d,0x0a
0000A92E                    	.code
00001179                    	.debug
00001179 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00001182 29 00 00 00        		.dd LME8-_BackUp
00001184 0D 00 0A 00        		.dw 0x0d,0x0a
0000A92E                    	.code
                            	LME8:
0000A92E                    	.code
00001186                    	.debug
00001186 2E 00 73 00        		.dw '.stabs "TurnLeft:F19",36,0,0,',0,0,offset _TurnLeft,seg _TurnLeft,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         54 00 75 00
         72 00 6E 00
         4C 00 65 00
         66 00 74 00
         3A 00 46 00
         31 00 39 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 65 02
         00 00 0D 00
         0A 00      
0000A92E                    	.CODE
                            	.public _TurnLeft
                            	_TurnLeft:	.proc
000011A9                    	.debug
000011A9 2E 00 73 00        		.dw '.stabn 0x44,0,237,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 33 00
         37 00 2C 00
         00 00 00 00
000011BD 00 00 00 00        		.dd LM98-_TurnLeft
000011BF 0D 00 0A 00        		.dw 0x0d,0x0a
0000A92E                    	.code
                            	LM98:
                            		// total=2, vars=2
                            		// frame_pointer_needed: 1
0000A92E 88 DA              		push bp to [sp]
0000A92F 42 20              		sp-=2
0000A930 08 0B 01 00        		bp=sp+1
                            	
0000A932 0D 03 05 00        		R1=BP+5
0000A934 01 D2              		[bp+1]=R1	// QImode move
000011C1                    	.debug
000011C1 2E 00 73 00        		.dw '.stabn 0x44,0,238,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 33 00
         38 00 2C 00
         00 00 00 00
000011D5 07 00 00 00        		.dd LM99-_TurnLeft
000011D7 0D 00 0A 00        		.dw 0x0d,0x0a
0000A935                    	.code
                            	LM99:
                            	LBB8:
000011D9                    	.debug
000011D9 2E 00 73 00        		.dw '.stabn 0x44,0,239,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 33 00
         39 00 2C 00
         00 00 00 00
000011ED 07 00 00 00        		.dd LM100-_TurnLeft
000011EF 0D 00 0A 00        		.dw 0x0d,0x0a
0000A935                    	.code
                            	LM100:
0000A935 43 92              		R1=3	// QImode move
0000A936 C8 D2              		[SP--]=R1	// QImode move
0000A937 4A 92              		R1=10	// QImode move
0000A938 C8 D2              		[SP--]=R1	// QImode move
0000A939 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A93B 42 00              		SP = SP + 2	//SP
000011F1                    	.debug
000011F1 2E 00 73 00        		.dw '.stabn 0x44,0,240,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         30 00 2C 00
         00 00 00 00
00001205 0E 00 00 00        		.dd LM101-_TurnLeft
00001207 0D 00 0A 00        		.dw 0x0d,0x0a
0000A93C                    	.code
                            	LM101:
0000A93C 40 92              		R1=0	// QImode move
0000A93D C5 D2              		[BP]=R1	// QImode move
                            	L81:
0000A93E C5 92              		R1=[BP]	// QImode move
0000A93F 5D 42              		CMP R1,29	// QImode compare
0000A940 04 8E 01 EE        		NSJNA L84	//QImode LEU
         00 EE      
0000A943 0F 9F 59 A9        		pc=L82	// Indirect jump
                            	L84:
00001209                    	.debug
00001209 2E 00 73 00        		.dw '.stabn 0x44,0,242,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         32 00 2C 00
         00 00 00 00
0000121D 17 00 00 00        		.dd LM102-_TurnLeft
0000121F 0D 00 0A 00        		.dw 0x0d,0x0a
0000A945                    	.code
                            	LM102:
0000A945 09 93 00 24        		R1=9216	// QImode move
0000A947 19 D3 05 70        		[28677]=R1	// QImode move
00001221                    	.debug
00001221 2E 00 73 00        		.dw '.stabn 0x44,0,243,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         33 00 2C 00
         00 00 00 00
00001235 1B 00 00 00        		.dd LM103-_TurnLeft
00001237 0D 00 0A 00        		.dw 0x0d,0x0a
0000A949                    	.code
                            	LM103:
0000A949 40 F0 C9 A6        		call _Delay	// call without return value
00001239                    	.debug
00001239 2E 00 73 00        		.dw '.stabn 0x44,0,244,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         34 00 2C 00
         00 00 00 00
0000124D 1D 00 00 00        		.dd LM104-_TurnLeft
0000124F 0D 00 0A 00        		.dw 0x0d,0x0a
0000A94B                    	.code
                            	LM104:
0000A94B 40 F0 C9 A6        		call _Delay	// call without return value
00001251                    	.debug
00001251 2E 00 73 00        		.dw '.stabn 0x44,0,245,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         35 00 2C 00
         00 00 00 00
00001265 1F 00 00 00        		.dd LM105-_TurnLeft
00001267 0D 00 0A 00        		.dw 0x0d,0x0a
0000A94D                    	.code
                            	LM105:
0000A94D 09 93 00 28        		R1=10240	// QImode move
0000A94F 19 D3 05 70        		[28677]=R1	// QImode move
00001269                    	.debug
00001269 2E 00 73 00        		.dw '.stabn 0x44,0,246,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         36 00 2C 00
         00 00 00 00
0000127D 23 00 00 00        		.dd LM106-_TurnLeft
0000127F 0D 00 0A 00        		.dw 0x0d,0x0a
0000A951                    	.code
                            	LM106:
0000A951 40 F0 C9 A6        		call _Delay	// call without return value
00001281                    	.debug
00001281 2E 00 73 00        		.dw '.stabn 0x44,0,240,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         30 00 2C 00
         00 00 00 00
00001295 25 00 00 00        		.dd LM107-_TurnLeft
00001297 0D 00 0A 00        		.dw 0x0d,0x0a
0000A953                    	.code
                            	LM107:
                            	L83:
0000A953 C5 92              		R1=[BP]	// QImode move
0000A954 09 05 01 00        		R2=R1+1
0000A956 C5 D4              		[BP]=R2	// QImode move
0000A957 0F 9F 3E A9        		pc=L81	// Indirect jump
                            	L82:
00001299                    	.debug
00001299 2E 00 73 00        		.dw '.stabn 0x44,0,248,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         38 00 2C 00
         00 00 00 00
000012AD 2B 00 00 00        		.dd LM108-_TurnLeft
000012AF 0D 00 0A 00        		.dw 0x0d,0x0a
0000A959                    	.code
                            	LM108:
0000A959 40 92              		R1=0	// QImode move
0000A95A 19 D3 05 70        		[28677]=R1	// QImode move
000012B1                    	.debug
000012B1 2E 00 73 00        		.dw '.stabn 0x44,0,249,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         39 00 2C 00
         00 00 00 00
000012C5 2E 00 00 00        		.dd LM109-_TurnLeft
000012C7 0D 00 0A 00        		.dw 0x0d,0x0a
0000A95C                    	.code
                            	LM109:
                            	LBE8:
000012C9                    	.debug
000012C9 2E 00 73 00        		.dw '.stabn 0x44,0,249,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         39 00 2C 00
         00 00 00 00
000012DD 2E 00 00 00        		.dd LM110-_TurnLeft
000012DF 0D 00 0A 00        		.dw 0x0d,0x0a
0000A95C                    	.code
                            	LM110:
                            	L80:
                            	
0000A95C 42 00              		sp+=2
0000A95D 88 98              		pop bp from [sp]
0000A95E 90 9A              		retf
                            		.endp	// end of TurnLeft
                            	
000012E1                    	.debug
000012E1 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
000012F3 07 00 00 00        		.dd LBB8-_TurnLeft
000012F5 0D 00 0A 00        		.dw 0x0d,0x0a
0000A95F                    	.code
000012F7                    	.debug
000012F7 2E 00 73 00        		.dw '.stabs "j:4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6A 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A95F                    	.CODE
0000130F                    	.debug
0000130F 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00001321 2E 00 00 00        		.dd LBE8-_TurnLeft
00001323 0D 00 0A 00        		.dw 0x0d,0x0a
0000A95F                    	.code
00001325                    	.debug
00001325 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
0000132E 31 00 00 00        		.dd LME9-_TurnLeft
00001330 0D 00 0A 00        		.dw 0x0d,0x0a
0000A95F                    	.code
                            	LME9:
0000A95F                    	.code
00001332                    	.debug
00001332 2E 00 73 00        		.dw '.stabs "TurnRight:F19",36,0,0,',0,0,offset _TurnRight,seg _TurnRight,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         54 00 75 00
         72 00 6E 00
         52 00 69 00
         67 00 68 00
         74 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         96 02 00 00
         0D 00 0A 00
0000A95F                    	.CODE
                            	.public _TurnRight
                            	_TurnRight:	.proc
00001356                    	.debug
00001356 2E 00 73 00        		.dw '.stabn 0x44,0,257,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 35 00
         37 00 2C 00
         00 00 00 00
0000136A 00 00 00 00        		.dd LM111-_TurnRight
0000136C 0D 00 0A 00        		.dw 0x0d,0x0a
0000A95F                    	.code
                            	LM111:
                            		// total=2, vars=2
                            		// frame_pointer_needed: 1
0000A95F 88 DA              		push bp to [sp]
0000A960 42 20              		sp-=2
0000A961 08 0B 01 00        		bp=sp+1
                            	
0000A963 0D 03 05 00        		R1=BP+5
0000A965 01 D2              		[bp+1]=R1	// QImode move
0000136E                    	.debug
0000136E 2E 00 73 00        		.dw '.stabn 0x44,0,258,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 35 00
         38 00 2C 00
         00 00 00 00
00001382 07 00 00 00        		.dd LM112-_TurnRight
00001384 0D 00 0A 00        		.dw 0x0d,0x0a
0000A966                    	.code
                            	LM112:
                            	LBB9:
00001386                    	.debug
00001386 2E 00 73 00        		.dw '.stabn 0x44,0,259,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 35 00
         39 00 2C 00
         00 00 00 00
0000139A 07 00 00 00        		.dd LM113-_TurnRight
0000139C 0D 00 0A 00        		.dw 0x0d,0x0a
0000A966                    	.code
                            	LM113:
0000A966 43 92              		R1=3	// QImode move
0000A967 C8 D2              		[SP--]=R1	// QImode move
0000A968 4A 92              		R1=10	// QImode move
0000A969 C8 D2              		[SP--]=R1	// QImode move
0000A96A 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A96C 42 00              		SP = SP + 2	//SP
0000139E                    	.debug
0000139E 2E 00 73 00        		.dw '.stabn 0x44,0,260,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         30 00 2C 00
         00 00 00 00
000013B2 0E 00 00 00        		.dd LM114-_TurnRight
000013B4 0D 00 0A 00        		.dw 0x0d,0x0a
0000A96D                    	.code
                            	LM114:
0000A96D 40 92              		R1=0	// QImode move
0000A96E C5 D2              		[BP]=R1	// QImode move
                            	L87:
0000A96F C5 92              		R1=[BP]	// QImode move
0000A970 5D 42              		CMP R1,29	// QImode compare
0000A971 04 8E 01 EE        		NSJNA L90	//QImode LEU
         00 EE      
0000A974 0F 9F 8A A9        		pc=L88	// Indirect jump
                            	L90:
000013B6                    	.debug
000013B6 2E 00 73 00        		.dw '.stabn 0x44,0,262,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         32 00 2C 00
         00 00 00 00
000013CA 17 00 00 00        		.dd LM115-_TurnRight
000013CC 0D 00 0A 00        		.dw 0x0d,0x0a
0000A976                    	.code
                            	LM115:
0000A976 09 93 00 18        		R1=6144	// QImode move
0000A978 19 D3 05 70        		[28677]=R1	// QImode move
000013CE                    	.debug
000013CE 2E 00 73 00        		.dw '.stabn 0x44,0,263,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         33 00 2C 00
         00 00 00 00
000013E2 1B 00 00 00        		.dd LM116-_TurnRight
000013E4 0D 00 0A 00        		.dw 0x0d,0x0a
0000A97A                    	.code
                            	LM116:
0000A97A 40 F0 C9 A6        		call _Delay	// call without return value
000013E6                    	.debug
000013E6 2E 00 73 00        		.dw '.stabn 0x44,0,264,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         34 00 2C 00
         00 00 00 00
000013FA 1D 00 00 00        		.dd LM117-_TurnRight
000013FC 0D 00 0A 00        		.dw 0x0d,0x0a
0000A97C                    	.code
                            	LM117:
0000A97C 40 F0 C9 A6        		call _Delay	// call without return value
000013FE                    	.debug
000013FE 2E 00 73 00        		.dw '.stabn 0x44,0,265,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         35 00 2C 00
         00 00 00 00
00001412 1F 00 00 00        		.dd LM118-_TurnRight
00001414 0D 00 0A 00        		.dw 0x0d,0x0a
0000A97E                    	.code
                            	LM118:
0000A97E 09 93 00 28        		R1=10240	// QImode move
0000A980 19 D3 05 70        		[28677]=R1	// QImode move
00001416                    	.debug
00001416 2E 00 73 00        		.dw '.stabn 0x44,0,266,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         36 00 2C 00
         00 00 00 00
0000142A 23 00 00 00        		.dd LM119-_TurnRight
0000142C 0D 00 0A 00        		.dw 0x0d,0x0a
0000A982                    	.code
                            	LM119:
0000A982 40 F0 C9 A6        		call _Delay	// call without return value
0000142E                    	.debug
0000142E 2E 00 73 00        		.dw '.stabn 0x44,0,260,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         30 00 2C 00
         00 00 00 00
00001442 25 00 00 00        		.dd LM120-_TurnRight
00001444 0D 00 0A 00        		.dw 0x0d,0x0a
0000A984                    	.code
                            	LM120:
                            	L89:
0000A984 C5 92              		R1=[BP]	// QImode move
0000A985 09 05 01 00        		R2=R1+1
0000A987 C5 D4              		[BP]=R2	// QImode move
0000A988 0F 9F 6F A9        		pc=L87	// Indirect jump
                            	L88:
00001446                    	.debug
00001446 2E 00 73 00        		.dw '.stabn 0x44,0,268,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         38 00 2C 00
         00 00 00 00
0000145A 2B 00 00 00        		.dd LM121-_TurnRight
0000145C 0D 00 0A 00        		.dw 0x0d,0x0a
0000A98A                    	.code
                            	LM121:
0000A98A 40 92              		R1=0	// QImode move
0000A98B 19 D3 05 70        		[28677]=R1	// QImode move
0000145E                    	.debug
0000145E 2E 00 73 00        		.dw '.stabn 0x44,0,269,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         39 00 2C 00
         00 00 00 00
00001472 2E 00 00 00        		.dd LM122-_TurnRight
00001474 0D 00 0A 00        		.dw 0x0d,0x0a
0000A98D                    	.code
                            	LM122:
                            	LBE9:
00001476                    	.debug
00001476 2E 00 73 00        		.dw '.stabn 0x44,0,269,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         39 00 2C 00
         00 00 00 00
0000148A 2E 00 00 00        		.dd LM123-_TurnRight
0000148C 0D 00 0A 00        		.dw 0x0d,0x0a
0000A98D                    	.code
                            	LM123:
                            	L86:
                            	
0000A98D 42 00              		sp+=2
0000A98E 88 98              		pop bp from [sp]
0000A98F 90 9A              		retf
                            		.endp	// end of TurnRight
                            	
0000148E                    	.debug
0000148E 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
000014A0 07 00 00 00        		.dd LBB9-_TurnRight
000014A2 0D 00 0A 00        		.dw 0x0d,0x0a
0000A990                    	.code
000014A4                    	.debug
000014A4 2E 00 73 00        		.dw '.stabs "j:4",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6A 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
0000A990                    	.CODE
000014BC                    	.debug
000014BC 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
000014CE 2E 00 00 00        		.dd LBE9-_TurnRight
000014D0 0D 00 0A 00        		.dw 0x0d,0x0a
0000A990                    	.code
000014D2                    	.debug
000014D2 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
000014DB 31 00 00 00        		.dd LME10-_TurnRight
000014DD 0D 00 0A 00        		.dw 0x0d,0x0a
0000A990                    	.code
                            	LME10:
0000A990                    	.code
000014DF                    	.debug
000014DF 2E 00 73 00        		.dw '.stabs "led_on:F19",36,0,0,',0,0,offset _led_on,seg _led_on,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 65 00
         64 00 5F 00
         6F 00 6E 00
         3A 00 46 00
         31 00 39 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 C7 02
         00 00 0D 00
         0A 00      
0000A990                    	.CODE
                            	.public _led_on
                            	_led_on:	.proc
00001500                    	.debug
00001500 2E 00 73 00        		.dw '.stabn 0x44,0,277,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 37 00
         37 00 2C 00
         00 00 00 00
00001514 00 00 00 00        		.dd LM124-_led_on
00001516 0D 00 0A 00        		.dw 0x0d,0x0a
0000A990                    	.code
                            	LM124:
                            		// total=0, vars=0
                            		// frame_pointer_needed: 1
0000A990 88 DA              		push bp to [sp]
0000A991 08 0B 01 00        		bp=sp+1
                            	
0000A993 0D 03 03 00        		R1=BP+3
00001518                    	.debug
00001518 2E 00 73 00        		.dw '.stabn 0x44,0,278,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 37 00
         38 00 2C 00
         00 00 00 00
0000152C 05 00 00 00        		.dd LM125-_led_on
0000152E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A995                    	.code
                            	LM125:
0000A995 40 94              		R2=0	// QImode move
0000A996 1A D5 05 70        		[28677]=R2	// QImode move
00001530                    	.debug
00001530 2E 00 73 00        		.dw '.stabn 0x44,0,279,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 37 00
         39 00 2C 00
         00 00 00 00
00001544 08 00 00 00        		.dd LM126-_led_on
00001546 0D 00 0A 00        		.dw 0x0d,0x0a
0000A998                    	.code
                            	LM126:
00001548                    	.debug
00001548 2E 00 73 00        		.dw '.stabn 0x44,0,279,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 37 00
         39 00 2C 00
         00 00 00 00
0000155C 08 00 00 00        		.dd LM127-_led_on
0000155E 0D 00 0A 00        		.dw 0x0d,0x0a
0000A998                    	.code
                            	LM127:
                            	L92:
                            	
0000A998 88 98              		pop bp from [sp]
0000A999 90 9A              		retf
                            		.endp	// end of led_on
                            	
00001560                    	.debug
00001560 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00001569 0A 00 00 00        		.dd LME11-_led_on
0000156B 0D 00 0A 00        		.dw 0x0d,0x0a
0000A99A                    	.code
                            	LME11:
0000A99A                    	.code
0000156D                    	.debug
0000156D 2E 00 73 00        		.dw '.stabs "main:F1",36,0,0,',0,0,offset _main,seg _main,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6D 00 61 00
         69 00 6E 00
         3A 00 46 00
         31 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         D1 02 00 00
         0D 00 0A 00
0000A99A                    	.CODE
                            	.public _main
                            	_main:	.proc
0000158B                    	.debug
0000158B 2E 00 73 00        		.dw '.stabn 0x44,0,281,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         31 00 2C 00
         00 00 00 00
0000159F 00 00 00 00        		.dd LM128-_main
000015A1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A99A                    	.code
                            	LM128:
                            		// total=4, vars=4
                            		// frame_pointer_needed: 1
0000A99A 88 DA              		push bp to [sp]
0000A99B 44 20              		sp-=4
0000A99C 08 0B 01 00        		bp=sp+1
                            	
0000A99E 0D 03 07 00        		R1=BP+7
0000A9A0 03 D2              		[bp+3]=R1	// QImode move
000015A3                    	.debug
000015A3 2E 00 73 00        		.dw '.stabn 0x44,0,281,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         31 00 2C 00
         00 00 00 00
000015B7 07 00 00 00        		.dd LM129-_main
000015B9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9A1                    	.code
                            	LM129:
                            	LBB10:
000015BB                    	.debug
000015BB 2E 00 73 00        		.dw '.stabn 0x44,0,282,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         32 00 2C 00
         00 00 00 00
000015CF 07 00 00 00        		.dd LM130-_main
000015D1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9A1                    	.code
                            	LM130:
0000A9A1 05 93              		R1=BP	// QImode move
0000A9A2 0D 05 01 00        		R2=BP+1
0000A9A4 40 92              		R1=0	// QImode move
0000A9A5 02 97              		R3=R2	// QImode move
0000A9A6 C3 D2              		[R3]=R1	// QImode move
000015D3                    	.debug
000015D3 2E 00 73 00        		.dw '.stabn 0x44,0,285,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         35 00 2C 00
         00 00 00 00
000015E7 0D 00 00 00        		.dd LM131-_main
000015E9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9A7                    	.code
                            	LM131:
0000A9A7 09 63 00 01        		R1=(-256)	// QImode move
0000A9A9 19 D3 02 70        		[28674]=R1	// QImode move
000015EB                    	.debug
000015EB 2E 00 73 00        		.dw '.stabn 0x44,0,286,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         36 00 2C 00
         00 00 00 00
000015FF 11 00 00 00        		.dd LM132-_main
00001601 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9AB                    	.code
                            	LM132:
0000A9AB 09 63 00 01        		R1=(-256)	// QImode move
0000A9AD 19 D3 03 70        		[28675]=R1	// QImode move
00001603                    	.debug
00001603 2E 00 73 00        		.dw '.stabn 0x44,0,287,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         37 00 2C 00
         00 00 00 00
00001617 15 00 00 00        		.dd LM133-_main
00001619 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9AF                    	.code
                            	LM133:
0000A9AF 40 92              		R1=0	// QImode move
0000A9B0 19 D3 00 70        		[28672]=R1	// QImode move
0000161B                    	.debug
0000161B 2E 00 73 00        		.dw '.stabn 0x44,0,293,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         33 00 2C 00
         00 00 00 00
0000162F 18 00 00 00        		.dd LM134-_main
00001631 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9B2                    	.code
                            	LM134:
0000A9B2 41 62              		R1=(-1)	// QImode move
0000A9B3 19 D3 07 70        		[28679]=R1	// QImode move
00001633                    	.debug
00001633 2E 00 73 00        		.dw '.stabn 0x44,0,294,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         34 00 2C 00
         00 00 00 00
00001647 1B 00 00 00        		.dd LM135-_main
00001649 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9B5                    	.code
                            	LM135:
0000A9B5 41 62              		R1=(-1)	// QImode move
0000A9B6 19 D3 08 70        		[28680]=R1	// QImode move
0000164B                    	.debug
0000164B 2E 00 73 00        		.dw '.stabn 0x44,0,295,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         35 00 2C 00
         00 00 00 00
0000165F 1E 00 00 00        		.dd LM136-_main
00001661 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9B8                    	.code
                            	LM136:
0000A9B8 41 62              		R1=(-1)	// QImode move
0000A9B9 19 D3 05 70        		[28677]=R1	// QImode move
00001663                    	.debug
00001663 2E 00 73 00        		.dw '.stabn 0x44,0,297,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         37 00 2C 00
         00 00 00 00
00001677 21 00 00 00        		.dd LM137-_main
00001679 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9BB                    	.code
                            	LM137:
0000A9BB 40 92              		R1=0	// QImode move
0000A9BC C8 D2              		[SP--]=R1	// QImode move
0000A9BD 40 F0 21 86        		call _BSR_DeleteSDGroup	// call with return value
0000A9BF 41 00              		SP = SP + 1	//SP
0000167B                    	.debug
0000167B 2E 00 73 00        		.dw '.stabn 0x44,0,298,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         38 00 2C 00
         00 00 00 00
0000168F 26 00 00 00        		.dd LM138-_main
00001691 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9C0                    	.code
                            	LM138:
0000A9C0 05 93              		R1=BP	// QImode move
0000A9C1 0D 05 02 00        		R2=BP+2
0000A9C3 11 93 00 E0        		R1=[-8192]	// QImode move
.\Debug\main.asm(1885): warning A2009: Operand out of range
0000A9C5 02 97              		R3=R2	// QImode move
0000A9C6 C3 D2              		[R3]=R1	// QImode move
00001693                    	.debug
00001693 2E 00 73 00        		.dw '.stabn 0x44,0,299,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         39 00 2C 00
         00 00 00 00
000016A7 2D 00 00 00        		.dd LM139-_main
000016A9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9C7                    	.code
                            	LM139:
0000A9C7 05 93              		R1=BP	// QImode move
0000A9C8 0D 05 02 00        		R2=BP+2
0000A9CA 02 97              		R3=R2	// QImode move
0000A9CB C3 92              		R1=[R3]	// QImode move
0000A9CC 09 43 FF FF        		CMP R1,(-1)	// QImode compare
0000A9CE 08 4E 01 EE        		NSJNZ L94	//QImode NE
         00 EE      
000016AB                    	.debug
000016AB 2E 00 73 00        		.dw '.stabn 0x44,0,301,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 30 00
         31 00 2C 00
         00 00 00 00
000016BF 37 00 00 00        		.dd LM140-_main
000016C1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9D1                    	.code
                            	LM140:
0000A9D1 40 F0 89 A7        		call _TrainSD	// call without return value
000016C3                    	.debug
000016C3 2E 00 73 00        		.dw '.stabn 0x44,0,302,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 30 00
         32 00 2C 00
         00 00 00 00
000016D7 39 00 00 00        		.dd LM141-_main
000016D9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9D3                    	.code
                            	LM141:
0000A9D3 40 F0 B3 A7        		call _StoreSD	// call without return value
000016DB                    	.debug
000016DB 2E 00 73 00        		.dw '.stabn 0x44,0,303,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 30 00
         33 00 2C 00
         00 00 00 00
000016EF 3B 00 00 00        		.dd LM142-_main
000016F1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9D5                    	.code
                            	LM142:
0000A9D5 0F 9F D9 A9        		pc=L95	// Indirect jump
                            	L94:
000016F3                    	.debug
000016F3 2E 00 73 00        		.dw '.stabn 0x44,0,306,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 30 00
         36 00 2C 00
         00 00 00 00
00001707 3D 00 00 00        		.dd LM143-_main
00001709 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9D7                    	.code
                            	LM143:
0000A9D7 40 F0 52 A8        		call _LoadSD	// call without return value
                            	L95:
0000170B                    	.debug
0000170B 2E 00 73 00        		.dw '.stabn 0x44,0,309,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 30 00
         39 00 2C 00
         00 00 00 00
0000171F 3F 00 00 00        		.dd LM144-_main
00001721 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9D9                    	.code
                            	LM144:
0000A9D9 43 92              		R1=3	// QImode move
0000A9DA C8 D2              		[SP--]=R1	// QImode move
0000A9DB 49 92              		R1=9	// QImode move
0000A9DC C8 D2              		[SP--]=R1	// QImode move
0000A9DD 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A9DF 42 00              		SP = SP + 2	//SP
00001723                    	.debug
00001723 2E 00 73 00        		.dw '.stabn 0x44,0,310,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 31 00
         30 00 2C 00
         00 00 00 00
00001737 46 00 00 00        		.dd LM145-_main
00001739 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9E0                    	.code
                            	LM145:
0000A9E0 40 92              		R1=0	// QImode move
0000A9E1 C8 D2              		[SP--]=R1	// QImode move
0000A9E2 40 F0 7F 9B        		call _BSR_InitRecognizer	// call with return value
0000A9E4 41 00              		SP = SP + 1	//SP
0000173B                    	.debug
0000173B 2E 00 73 00        		.dw '.stabn 0x44,0,312,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 31 00
         32 00 2C 00
         00 00 00 00
0000174F 4B 00 00 00        		.dd LM146-_main
00001751 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9E5                    	.code
                            	LM146:
                            	L96:
0000A9E5 0F 9F E9 A9        		pc=L98	// Indirect jump
0000A9E7 0F 9F 5E AA        		pc=L97	// Indirect jump
                            	L98:
00001753                    	.debug
00001753 2E 00 73 00        		.dw '.stabn 0x44,0,314,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 31 00
         34 00 2C 00
         00 00 00 00
00001767 4F 00 00 00        		.dd LM147-_main
00001769 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9E9                    	.code
                            	LM147:
0000A9E9 40 F0 AC 9B        		call _BSR_GetResult	// call with return value
0000A9EB C5 D2              		[BP]=R1	// QImode move
0000176B                    	.debug
0000176B 2E 00 73 00        		.dw '.stabn 0x44,0,316,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 31 00
         36 00 2C 00
         00 00 00 00
0000177F 52 00 00 00        		.dd LM148-_main
00001781 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9EC                    	.code
                            	LM148:
0000A9EC C5 92              		R1=[BP]	// QImode move
0000A9ED 40 42              		CMP R1,0	// QImode test
0000A9EE 02 BE 0F 9F        		NSJNG L99	//QImode LE
         45 AA      
00001783                    	.debug
00001783 2E 00 73 00        		.dw '.stabn 0x44,0,318,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 31 00
         38 00 2C 00
         00 00 00 00
00001797 57 00 00 00        		.dd LM149-_main
00001799 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9F1                    	.code
                            	LM149:
0000A9F1 C5 92              		R1=[BP]	// QImode move
0000A9F2 09 43 00 01        		CMP R1,256	// QImode compare
0000A9F4 0F 4E 01 EE        		NSJNZ L100	//QImode NE
         00 EE      
0000179B                    	.debug
0000179B 2E 00 73 00        		.dw '.stabn 0x44,0,320,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 32 00
         30 00 2C 00
         00 00 00 00
000017AF 5D 00 00 00        		.dd LM150-_main
000017B1 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9F7                    	.code
                            	LM150:
0000A9F7 43 92              		R1=3	// QImode move
0000A9F8 C8 D2              		[SP--]=R1	// QImode move
0000A9F9 45 92              		R1=5	// QImode move
0000A9FA C8 D2              		[SP--]=R1	// QImode move
0000A9FB 40 F0 E5 A6        		call _PlaySnd	// call without return value
0000A9FD 42 00              		SP = SP + 2	//SP
000017B3                    	.debug
000017B3 2E 00 73 00        		.dw '.stabn 0x44,0,321,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 32 00
         31 00 2C 00
         00 00 00 00
000017C7 64 00 00 00        		.dd LM151-_main
000017C9 0D 00 0A 00        		.dw 0x0d,0x0a
0000A9FE                    	.code
                            	LM151:
0000A9FE 05 93              		R1=BP	// QImode move
0000A9FF 0D 05 01 00        		R2=BP+1
0000AA01 41 92              		R1=1	// QImode move
0000AA02 02 97              		R3=R2	// QImode move
0000AA03 C3 D2              		[R3]=R1	// QImode move
                            	L100:
000017CB                    	.debug
000017CB 2E 00 73 00        		.dw '.stabn 0x44,0,324,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 32 00
         34 00 2C 00
         00 00 00 00
000017DF 6A 00 00 00        		.dd LM152-_main
000017E1 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA04                    	.code
                            	LM152:
0000AA04 05 93              		R1=BP	// QImode move
0000AA05 0D 05 01 00        		R2=BP+1
0000AA07 02 97              		R3=R2	// QImode move
0000AA08 C3 92              		R1=[R3]	// QImode move
0000AA09 41 42              		CMP R1,1	// QImode compare
0000AA0A 3A 4E 01 EE        		NSJNZ L99	//QImode NE
         00 EE      
000017E3                    	.debug
000017E3 2E 00 73 00        		.dw '.stabn 0x44,0,326,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 32 00
         36 00 2C 00
         00 00 00 00
000017F7 73 00 00 00        		.dd LM153-_main
000017F9 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA0D                    	.code
                            	LM153:
0000AA0D C5 94              		R2=[BP]	// QImode move
0000AA0E 02 93              		R1=R2	// QImode move
0000AA0F 09 23 01 01        		R1=R1-257
0000AA11 43 42              		CMP R1,3	// QImode compare
0000AA12 30 9E 01 EE        		NSJA L107	//QImode GTU
         00 EE      
0000AA15 0A 95 9F 9F        		R2=L108	// QImode move
0000AA17 02 03              		R1 = R1 + R2	//addqi3
0000AA18 01 95              		R2=R1	// QImode move
0000AA19 C2 92              		R1=[R2]	// QImode move
0000AA1A 01 9F              		pc=R1	// tablejump
00009F9F                    	.text
                            	L108:
00009F9F 1B AA              		.dw L103
00009FA0 25 AA              		.dw L104
00009FA1 2F AA              		.dw L105
00009FA2 39 AA              		.dw L106
0000AA1B                    	.code
                            	L103:
000017FB                    	.debug
000017FB 2E 00 73 00        		.dw '.stabn 0x44,0,329,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 32 00
         39 00 2C 00
         00 00 00 00
0000180F 81 00 00 00        		.dd LM154-_main
00001811 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA1B                    	.code
                            	LM154:
0000AA1B 40 F0 90 A9        		call _led_on	// call without return value
00001813                    	.debug
00001813 2E 00 73 00        		.dw '.stabn 0x44,0,331,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         31 00 2C 00
         00 00 00 00
00001827 83 00 00 00        		.dd LM155-_main
00001829 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA1D                    	.code
                            	LM155:
0000AA1D 05 93              		R1=BP	// QImode move
0000AA1E 0D 05 01 00        		R2=BP+1
0000AA20 40 92              		R1=0	// QImode move
0000AA21 02 97              		R3=R2	// QImode move
0000AA22 C3 D2              		[R3]=R1	// QImode move
0000182B                    	.debug
0000182B 2E 00 73 00        		.dw '.stabn 0x44,0,332,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         32 00 2C 00
         00 00 00 00
0000183F 89 00 00 00        		.dd LM156-_main
00001841 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA23                    	.code
                            	LM156:
0000AA23 0F 9F 45 AA        		pc=L99	// Indirect jump
                            	L104:
00001843                    	.debug
00001843 2E 00 73 00        		.dw '.stabn 0x44,0,334,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         34 00 2C 00
         00 00 00 00
00001857 8B 00 00 00        		.dd LM157-_main
00001859 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA25                    	.code
                            	LM157:
0000AA25 40 F0 05 A9        		call _BackUp	// call without return value
0000185B                    	.debug
0000185B 2E 00 73 00        		.dw '.stabn 0x44,0,335,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         35 00 2C 00
         00 00 00 00
0000186F 8D 00 00 00        		.dd LM158-_main
00001871 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA27                    	.code
                            	LM158:
0000AA27 05 93              		R1=BP	// QImode move
0000AA28 0D 05 01 00        		R2=BP+1
0000AA2A 40 92              		R1=0	// QImode move
0000AA2B 02 97              		R3=R2	// QImode move
0000AA2C C3 D2              		[R3]=R1	// QImode move
00001873                    	.debug
00001873 2E 00 73 00        		.dw '.stabn 0x44,0,336,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         36 00 2C 00
         00 00 00 00
00001887 93 00 00 00        		.dd LM159-_main
00001889 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA2D                    	.code
                            	LM159:
0000AA2D 0F 9F 45 AA        		pc=L99	// Indirect jump
                            	L105:
0000188B                    	.debug
0000188B 2E 00 73 00        		.dw '.stabn 0x44,0,338,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         38 00 2C 00
         00 00 00 00
0000189F 95 00 00 00        		.dd LM160-_main
000018A1 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA2F                    	.code
                            	LM160:
0000AA2F 40 F0 2E A9        		call _TurnLeft	// call without return value
000018A3                    	.debug
000018A3 2E 00 73 00        		.dw '.stabn 0x44,0,339,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 33 00
         39 00 2C 00
         00 00 00 00
000018B7 97 00 00 00        		.dd LM161-_main
000018B9 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA31                    	.code
                            	LM161:
0000AA31 05 93              		R1=BP	// QImode move
0000AA32 0D 05 01 00        		R2=BP+1
0000AA34 40 92              		R1=0	// QImode move
0000AA35 02 97              		R3=R2	// QImode move
0000AA36 C3 D2              		[R3]=R1	// QImode move
000018BB                    	.debug
000018BB 2E 00 73 00        		.dw '.stabn 0x44,0,340,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 34 00
         30 00 2C 00
         00 00 00 00
000018CF 9D 00 00 00        		.dd LM162-_main
000018D1 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA37                    	.code
                            	LM162:
0000AA37 0F 9F 45 AA        		pc=L99	// Indirect jump
                            	L106:
000018D3                    	.debug
000018D3 2E 00 73 00        		.dw '.stabn 0x44,0,342,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 34 00
         32 00 2C 00
         00 00 00 00
000018E7 9F 00 00 00        		.dd LM163-_main
000018E9 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA39                    	.code
                            	LM163:
0000AA39 40 F0 5F A9        		call _TurnRight	// call without return value
000018EB                    	.debug
000018EB 2E 00 73 00        		.dw '.stabn 0x44,0,343,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 34 00
         33 00 2C 00
         00 00 00 00
000018FF A1 00 00 00        		.dd LM164-_main
00001901 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA3B                    	.code
                            	LM164:
0000AA3B 05 93              		R1=BP	// QImode move
0000AA3C 0D 05 01 00        		R2=BP+1
0000AA3E 40 92              		R1=0	// QImode move
0000AA3F 02 97              		R3=R2	// QImode move
0000AA40 C3 D2              		[R3]=R1	// QImode move
00001903                    	.debug
00001903 2E 00 73 00        		.dw '.stabn 0x44,0,344,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 34 00
         34 00 2C 00
         00 00 00 00
00001917 A7 00 00 00        		.dd LM165-_main
00001919 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA41                    	.code
                            	LM165:
0000AA41 0F 9F 45 AA        		pc=L99	// Indirect jump
                            	L107:
0000191B                    	.debug
0000191B 2E 00 73 00        		.dw '.stabn 0x44,0,346,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 34 00
         36 00 2C 00
         00 00 00 00
0000192F A9 00 00 00        		.dd LM166-_main
00001931 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA43                    	.code
                            	LM166:
0000AA43 0F 9F 45 AA        		pc=L99	// Indirect jump
                            	L102:
                            	L101:
                            	L99:
00001933                    	.debug
00001933 2E 00 73 00        		.dw '.stabn 0x44,0,351,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 35 00
         31 00 2C 00
         00 00 00 00
00001947 AB 00 00 00        		.dd LM167-_main
00001949 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA45                    	.code
                            	LM167:
0000AA45 12 95 00 70        		R2=[28672]	// QImode move
0000AA47 0A B3 04 00        		R1=R2&4
0000AA49 40 42              		CMP R1,0	// QImode test
0000AA4A 11 5E 01 EE        		NSJZ L109	//QImode EQ
         00 EE      
0000194B                    	.debug
0000194B 2E 00 73 00        		.dw '.stabn 0x44,0,353,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 35 00
         33 00 2C 00
         00 00 00 00
0000195F B3 00 00 00        		.dd LM168-_main
00001961 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA4D                    	.code
                            	LM168:
0000AA4D 09 63 00 20        		R1=(-8192)	// QImode move
0000AA4F C8 D2              		[SP--]=R1	// QImode move
0000AA50 40 F0 66 AC        		call _F_FlashErase	// call without return value
0000AA52 41 00              		SP = SP + 1	//SP
00001963                    	.debug
00001963 2E 00 73 00        		.dw '.stabn 0x44,0,354,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 35 00
         34 00 2C 00
         00 00 00 00
00001977 B9 00 00 00        		.dd LM169-_main
00001979 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA53                    	.code
                            	LM169:
                            	L110:
0000AA53 0F 9F 57 AA        		pc=L112	// Indirect jump
0000AA55 0F 9F 5C AA        		pc=L109	// Indirect jump
                            	L112:
0000197B                    	.debug
0000197B 2E 00 73 00        		.dw '.stabn 0x44,0,356,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 35 00
         36 00 2C 00
         00 00 00 00
0000198F BD 00 00 00        		.dd LM170-_main
00001991 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA57                    	.code
                            	LM170:
0000AA57 41 92              		R1=1	// QImode move
0000AA58 19 D3 12 70        		[28690]=R1	// QImode move
00001993                    	.debug
00001993 2E 00 73 00        		.dw '.stabn 0x44,0,357,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 35 00
         37 00 2C 00
         00 00 00 00
000019A7 C0 00 00 00        		.dd LM171-_main
000019A9 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA5A                    	.code
                            	LM171:
0000AA5A 0F 9F 53 AA        		pc=L110	// Indirect jump
                            	L111:
                            	L109:
000019AB                    	.debug
000019AB 2E 00 73 00        		.dw '.stabn 0x44,0,359,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 35 00
         39 00 2C 00
         00 00 00 00
000019BF C2 00 00 00        		.dd LM172-_main
000019C1 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA5C                    	.code
                            	LM172:
0000AA5C 0F 9F E5 A9        		pc=L96	// Indirect jump
                            	L97:
000019C3                    	.debug
000019C3 2E 00 73 00        		.dw '.stabn 0x44,0,360,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 36 00
         30 00 2C 00
         00 00 00 00
000019D7 C4 00 00 00        		.dd LM173-_main
000019D9 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA5E                    	.code
                            	LM173:
                            	LBE10:
000019DB                    	.debug
000019DB 2E 00 73 00        		.dw '.stabn 0x44,0,360,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 36 00
         30 00 2C 00
         00 00 00 00
000019EF C4 00 00 00        		.dd LM174-_main
000019F1 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA5E                    	.code
                            	LM174:
                            	L93:
                            	
0000AA5E 44 00              		sp+=4
0000AA5F 88 98              		pop bp from [sp]
0000AA60 90 9A              		retf
                            		.endp	// end of main
                            	
000019F3                    	.debug
000019F3 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00001A05 07 00 00 00        		.dd LBB10-_main
00001A07 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA61                    	.code
00001A09                    	.debug
00001A09 2E 00 73 00        		.dw '.stabs "Result:1",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         52 00 65 00
         73 00 75 00
         6C 00 74 00
         3A 00 31 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
0000AA61                    	.CODE
00001A26                    	.debug
00001A26 2E 00 73 00        		.dw '.stabs "Ready:4",128,0,0,1',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         52 00 65 00
         61 00 64 00
         79 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 31 00
         0D 00 0A 00
0000AA61                    	.CODE
00001A42                    	.debug
00001A42 2E 00 73 00        		.dw '.stabs "BS_Flag:4",128,0,0,2',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         42 00 53 00
         5F 00 46 00
         6C 00 61 00
         67 00 3A 00
         34 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 32 00
         0D 00 0A 00
0000AA61                    	.CODE
00001A60                    	.debug
00001A60 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00001A72 C4 00 00 00        		.dd LBE10-_main
00001A74 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA61                    	.code
00001A76                    	.debug
00001A76 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00001A7F C7 00 00 00        		.dd LME12-_main
00001A81 0D 00 0A 00        		.dw 0x0d,0x0a
0000AA61                    	.code
                            	LME12:
                            	.external _BSR_GetResult
                            	.external _BSR_DeleteSDGroup
                            	.external _BSR_ImportSDWord
                            	.external _BSR_SDModel
                            	.external _F_FlashWrite1Word
                            	.external _BSR_ExportSDWord
                            	.external _F_FlashErase
                            	.external _BSR_Train
                            	.external _BSR_InitRecognizer
                            	.external _SACM_S480_Stop
                            	.external _SACM_S480_ServiceLoop
                            	.external _SACM_S480_Status
                            	.external _SACM_S480_Play
                            	.external _SACM_S480_Initial
                            	.external _BSR_StopRecognizer
                            		.end
0 error(s), 1 warning(s).

