Sunplus u'nSP Assembler - Ver. 1.14.3.1
              Listing File Has Been Relocated
                            	//*****************************************************************************/
                            	// 描述： IRQ5中断有两个中断源：2Hz和4Hz,该程序利用2Hz中断来控制
                            	// 		  发光二极管的亮灭，时间间隔为1s,设定B口低八位输出。
                            	// 日期： 2003/07/09
                            	// 版本:  1.8.0
                            	//*****************************************************************************/
                            	.define     P_IOA_DATA				0x7000;
                            	.define 	P_IOA_DIR				0x7002;
                            	.define 	P_IOA_ATTRI				0x7003;
                            	.DEFINE		P_IOB_DATA          	0x7005;
                            	.DEFINE		P_IOB_DIR           	0x7007;
                            	.DEFINE		P_IOB_ATTRI	        	0x7008;
                            	.DEFINE		P_INT_CTRL	        	0x7010;
                            	.DEFINE 	P_INT_CTRL_NEW      	0x702D;
                            	.DEFINE		P_INT_CLEAR	        	0x7011;
                            	.DEFINE		P_Watchdog_Clear		0x7012;
00000001                    	.RAM
00000001 00 00              	.VAR G_Time2
00008041                    	.CODE
                            	
                            	//============================================================================= 
                            	// 函数： main()
                            	// 描述：主函数
                            	//=============================================================================
                            	.PUBLIC _main
                            	_main:
00008041 40 F1              		INT OFF
00008042 09 93 FF FF        		R1 = 0xffff 				//设定IOB口为同相输出口；
00008044 19 D3 08 70        		[P_IOB_ATTRI] = R1 
00008046 19 D3 07 70        		[P_IOB_DIR] = R1 
00008048 19 D3 05 70        		[P_IOB_DATA] = R1 
0000804A 19 D3 02 70        		[P_IOA_DIR]=r1;
0000804C 19 D3 03 70        		[P_IOA_ATTRI]=r1;
0000804E 19 D3 00 70        		[P_IOA_DATA]=r1;
                            	
00008050 44 92              		R1 = 0x0004			        //开中断IRQ5_2Hz
00008051 19 D3 10 70        		[P_INT_CTRL] = R1 
00008053 19 D3 2D 70        		[P_INT_CTRL_NEW] = R1 
00008055 40 92              		R1 = 0
00008056 19 D3 01 00        		[G_Time2] = R1 
00008058 41 F1              		INT	irq 
                            	L_loop:
00008059 00 EE              		nop 
0000805A 41 92              		R1 = 0x0001;
0000805B 19 D3 12 70        	    [P_Watchdog_Clear] = R1    //清看门狗
0000805D 00 EE              		nop
0000805E 46 EE              		jmp L_loop 
                            			
00008009                    	.TEXT	
                            	.PUBLIC _IRQ5
                            	_IRQ5:	
00008009 A8 DA              		push R1,R5 to [sp]		   //压栈保护  					 
0000800A 44 92              		R1 = 0x0004      
0000800B 19 D3 11 70        		[P_INT_CLEAR] = R1 
0000800D 12 95 01 00        		R2 = [G_Time2] 
0000800F 41 04              	 	R2+ = 0x0001 
00008010 1A D5 01 00        		[G_Time2] = R2   
00008012 42 44              	    CMP R2,2				    //比较是否为1秒
00008013 0A 8E              	    JBE L_LED2HZ_OFF		    //小于等于则LED灭
00008014 09 93 00 FF        	    R1 = 0xff00 				//大于则LED亮					 
00008016 19 D3 05 70        		[P_IOB_DATA] = R1 
00008018 43 44              	    CMP R2,3				    //比较是否为两秒
00008019 08 8E              	    JBE L_LED2Hz_RET		    //小于等于则LED继续亮    
0000801A 40 94              	    R2 = 0x0000 		    	//否则，TIME1单元清零，返回中断
0000801B 1A D5 01 00        		[G_Time2] = R2 
0000801D 04 EE              	    JMP L_LED2Hz_RET
                            	L_LED2HZ_OFF:
0000801E 09 93 FF FF        	    R1 = 0xffff 			 
00008020 19 D3 05 70        		[P_IOB_DATA] = R1 
                            	L_LED2Hz_RET:  
00008022 A8 90              	    POP R1,R5 FROM [sp]
00008023 98 9A              	    RETI    
                            	    
                            	//*****************************************************************************/
                            	//  main.asm 结束
                            	//*****************************************************************************/	
                            	
0 error(s), 0 warning(s).

