Sunplus u'nSP Assembler - Ver. 1.14.3.1
              Listing File Has Been Relocated
                            	// GCC for SUNPLUS u'nSP version 1.0.21-3
                            	// Command: D:\PROGRA~1\Sunplus\UNSPID~1.0\cc1.exe C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccWsaaaa.i -fkeep-inline-functions -quiet -dumpbase disp.c -mglobal-var-iram -gstabs -Wall -o .\Debug/disp.asm
                            		.external __sn_func_ptr_sec
                            	
                            	// gcc2_compiled.:
                            	
00000000                    	.debug
00000000 2E 00 73 00        		.dw '.stabs "C:/Documents and Settings/Administrator/×ÀÃæ/voice/voice/",0x64,0,3,',0,0,offset Ltext0,seg Ltext0,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         43 00 3A 00
         2F 00 44 00
         6F 00 63 00
         75 00 6D 00
         65 00 6E 00
         74 00 73 00
         20 00 61 00
         6E 00 64 00
         20 00 53 00
         65 00 74 00
         74 00 69 00
         6E 00 67 00
         73 00 2F 00
         41 00 64 00
         6D 00 69 00
         6E 00 69 00
         73 00 74 00
         72 00 61 00
         74 00 6F 00
         72 00 2F 00
         D7 00 C0 00
         C3 00 E6 00
         2F 00 76 00
         6F 00 69 00
         63 00 65 00
         2F 00 76 00
         6F 00 69 00
         63 00 65 00
         2F 00 22 00
         2C 00 30 00
         78 00 36 00
         34 00 2C 00
         30 00 2C 00
         33 00 2C 00
         00 00 00 00
         00 00 00 00
         0D 00 0A 00
00008AE6                    	.code
00000052                    	.debug
00000052 2E 00 73 00        		.dw '.stabs "C:/Documents and Settings/Administrator/×/300Ã/346/voice/voice/disp.c",0x64,0,3,',0,0,offset Ltext0,seg Ltext0,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         43 00 3A 00
         2F 00 44 00
         6F 00 63 00
         75 00 6D 00
         65 00 6E 00
         74 00 73 00
         20 00 61 00
         6E 00 64 00
         20 00 53 00
         65 00 74 00
         74 00 69 00
         6E 00 67 00
         73 00 2F 00
         41 00 64 00
         6D 00 69 00
         6E 00 69 00
         73 00 74 00
         72 00 61 00
         74 00 6F 00
         72 00 2F 00
         D7 00 2F 00
         33 00 30 00
         30 00 C3 00
         2F 00 33 00
         34 00 36 00
         2F 00 76 00
         6F 00 69 00
         63 00 65 00
         2F 00 76 00
         6F 00 69 00
         63 00 65 00
         2F 00 64 00
         69 00 73 00
         70 00 2E 00
         63 00 22 00
         2C 00 30 00
         78 00 36 00
         34 00 2C 00
         30 00 2C 00
         33 00 2C 00
         00 00 00 00
         00 00 00 00
         0D 00 0A 00
00008AE6                    	.code
00008AE6                    	.code
                            	Ltext0:
000000B0                    	.debug
000000B0 2E 00 73 00        		.dw '.stabs "int:t1=r1;-32768;32767;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         69 00 6E 00
         74 00 3A 00
         74 00 31 00
         3D 00 72 00
         31 00 3B 00
         2D 00 33 00
         32 00 37 00
         36 00 38 00
         3B 00 33 00
         32 00 37 00
         36 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
000000DC                    	.debug
000000DC 2E 00 73 00        		.dw '.stabs "char:t2=r2;0;127;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 68 00
         61 00 72 00
         3A 00 74 00
         32 00 3D 00
         72 00 32 00
         3B 00 30 00
         3B 00 31 00
         32 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
00000102                    	.debug
00000102 2E 00 73 00        		.dw '.stabs "long int:t3=r3;-2147483648;2147483647;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         33 00 3D 00
         72 00 33 00
         3B 00 2D 00
         32 00 31 00
         34 00 37 00
         34 00 38 00
         33 00 36 00
         34 00 38 00
         3B 00 32 00
         31 00 34 00
         37 00 34 00
         38 00 33 00
         36 00 34 00
         37 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
0000013D                    	.debug
0000013D 2E 00 73 00        		.dw '.stabs "unsigned int:t4=r4;0;65535;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         34 00 3D 00
         72 00 34 00
         3B 00 30 00
         3B 00 36 00
         35 00 35 00
         33 00 35 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
0000016D                    	.debug
0000016D 2E 00 73 00        		.dw '.stabs "long unsigned int:t5=r5;0;4294967295;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 75 00
         6E 00 73 00
         69 00 67 00
         6E 00 65 00
         64 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 35 00
         3D 00 72 00
         35 00 3B 00
         30 00 3B 00
         34 00 32 00
         39 00 34 00
         39 00 36 00
         37 00 32 00
         39 00 35 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
000001A7                    	.debug
000001A7 2E 00 73 00        		.dw '.stabs "long long int:t6=r6;-2147483648;2147483647;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 6C 00
         6F 00 6E 00
         67 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 36 00
         3D 00 72 00
         36 00 3B 00
         2D 00 32 00
         31 00 34 00
         37 00 34 00
         38 00 33 00
         36 00 34 00
         38 00 3B 00
         32 00 31 00
         34 00 37 00
         34 00 38 00
         33 00 36 00
         34 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
000001E7                    	.debug
000001E7 2E 00 73 00        		.dw '.stabs "long long unsigned int:t7=r7;0;4294967295;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 6C 00
         6F 00 6E 00
         67 00 20 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         37 00 3D 00
         72 00 37 00
         3B 00 30 00
         3B 00 34 00
         32 00 39 00
         34 00 39 00
         36 00 37 00
         32 00 39 00
         35 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
00000226                    	.debug
00000226 2E 00 73 00        		.dw '.stabs "short int:t8=r8;-32768;32767;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 68 00
         6F 00 72 00
         74 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 38 00
         3D 00 72 00
         38 00 3B 00
         2D 00 33 00
         32 00 37 00
         36 00 38 00
         3B 00 33 00
         32 00 37 00
         36 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
00000258                    	.debug
00000258 2E 00 73 00        		.dw '.stabs "short unsigned int:t9=r9;0;65535;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 68 00
         6F 00 72 00
         74 00 20 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 69 00
         6E 00 74 00
         3A 00 74 00
         39 00 3D 00
         72 00 39 00
         3B 00 30 00
         3B 00 36 00
         35 00 35 00
         33 00 35 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
0000028E                    	.debug
0000028E 2E 00 73 00        		.dw '.stabs "signed char:t10=r10;-32768;32767;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 63 00
         68 00 61 00
         72 00 3A 00
         74 00 31 00
         30 00 3D 00
         72 00 31 00
         30 00 3B 00
         2D 00 33 00
         32 00 37 00
         36 00 38 00
         3B 00 33 00
         32 00 37 00
         36 00 37 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
000002C4                    	.debug
000002C4 2E 00 73 00        		.dw '.stabs "unsigned char:t11=r11;0;65535;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         75 00 6E 00
         73 00 69 00
         67 00 6E 00
         65 00 64 00
         20 00 63 00
         68 00 61 00
         72 00 3A 00
         74 00 31 00
         31 00 3D 00
         72 00 31 00
         31 00 3B 00
         30 00 3B 00
         36 00 35 00
         35 00 33 00
         35 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
000002F7                    	.debug
000002F7 2E 00 73 00        		.dw '.stabs "float:t12=r1;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         66 00 6C 00
         6F 00 61 00
         74 00 3A 00
         74 00 31 00
         32 00 3D 00
         72 00 31 00
         3B 00 32 00
         3B 00 30 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
0000031D                    	.debug
0000031D 2E 00 73 00        		.dw '.stabs "double:t13=r1;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 6F 00
         75 00 62 00
         6C 00 65 00
         3A 00 74 00
         31 00 33 00
         3D 00 72 00
         31 00 3B 00
         32 00 3B 00
         30 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
00000344                    	.debug
00000344 2E 00 73 00        		.dw '.stabs "long double:t14=r1;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6C 00 6F 00
         6E 00 67 00
         20 00 64 00
         6F 00 75 00
         62 00 6C 00
         65 00 3A 00
         74 00 31 00
         34 00 3D 00
         72 00 31 00
         3B 00 32 00
         3B 00 30 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
00000370                    	.debug
00000370 2E 00 73 00        		.dw '.stabs "complex int:t15=s2real:1,0,16;imag:1,16,16;;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         69 00 6E 00
         74 00 3A 00
         74 00 31 00
         35 00 3D 00
         73 00 32 00
         72 00 65 00
         61 00 6C 00
         3A 00 31 00
         2C 00 30 00
         2C 00 31 00
         36 00 3B 00
         69 00 6D 00
         61 00 67 00
         3A 00 31 00
         2C 00 31 00
         36 00 2C 00
         31 00 36 00
         3B 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
000003B1                    	.debug
000003B1 2E 00 73 00        		.dw '.stabs "complex float:t16=r16;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         66 00 6C 00
         6F 00 61 00
         74 00 3A 00
         74 00 31 00
         36 00 3D 00
         72 00 31 00
         36 00 3B 00
         32 00 3B 00
         30 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
000003E0                    	.debug
000003E0 2E 00 73 00        		.dw '.stabs "complex double:t17=r17;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         64 00 6F 00
         75 00 62 00
         6C 00 65 00
         3A 00 74 00
         31 00 37 00
         3D 00 72 00
         31 00 37 00
         3B 00 32 00
         3B 00 30 00
         3B 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
00000410                    	.debug
00000410 2E 00 73 00        		.dw '.stabs "complex long double:t18=r18;2;0;",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         63 00 6F 00
         6D 00 70 00
         6C 00 65 00
         78 00 20 00
         6C 00 6F 00
         6E 00 67 00
         20 00 64 00
         6F 00 75 00
         62 00 6C 00
         65 00 3A 00
         74 00 31 00
         38 00 3D 00
         72 00 31 00
         38 00 3B 00
         32 00 3B 00
         30 00 3B 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         30 00 0D 00
         0A 00      
00008AE6                    	.CODE
00000445                    	.debug
00000445 2E 00 73 00        		.dw '.stabs "void:t19=19",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         76 00 6F 00
         69 00 64 00
         3A 00 74 00
         31 00 39 00
         3D 00 31 00
         39 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008AE6                    	.CODE
00000465                    	.debug
00000465 2E 00 73 00        		.dw '.stabs "apm:G4",32,0,0,',0,0,offset _apm,seg _apm,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         61 00 70 00
         6D 00 3A 00
         47 00 34 00
         22 00 2C 00
         33 00 32 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 02 00
         00 00 0D 00
         0A 00      
00008AE6                    	.CODE
                            	.public _dian
00000244                    	.iram
                            	_dian:
00000244 01 00              		.dw 1
00000482                    	.debug
00000482 2E 00 73 00        		.dw '.stabs "dian:G4",32,0,0,',0,0,offset _dian,seg _dian,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         61 00 6E 00
         3A 00 47 00
         34 00 22 00
         2C 00 33 00
         32 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         00 00 00 00
         0D 00 0A 00
00008AE6                    	.CODE
                            	.public _shan_flag
00000245                    	.iram
                            	_shan_flag:
00000245 00 00              		.dw 0
000004A0                    	.debug
000004A0 2E 00 73 00        		.dw '.stabs "shan_flag:G11",32,0,0,',0,0,offset _shan_flag,seg _shan_flag,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 68 00
         61 00 6E 00
         5F 00 66 00
         6C 00 61 00
         67 00 3A 00
         47 00 31 00
         31 00 22 00
         2C 00 33 00
         32 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         01 00 00 00
         0D 00 0A 00
00008AE6                    	.CODE
00008AE6                    	.code
000004C4                    	.debug
000004C4 2E 00 73 00        		.dw '.stabs "disp_Init:F19",36,0,0,',0,0,offset _disp_Init,seg _disp_Init,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         73 00 70 00
         5F 00 49 00
         6E 00 69 00
         74 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         00 00 00 00
         0D 00 0A 00
00008AE6                    	.CODE
                            	.public _disp_Init
                            	_disp_Init:	.proc
000004E8                    	.debug
000004E8 2E 00 73 00        		.dw '.stabn 0x44,0,8,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 2C 00
         00 00 00 00
000004FA 00 00 00 00        		.dd LM1-_disp_Init
000004FC 0D 00 0A 00        		.dw 0x0d,0x0a
00008AE6                    	.code
                            	LM1:
                            		// total=0, vars=0
                            		// frame_pointer_needed: 1
00008AE6 88 DA              		push bp to [sp]
00008AE7 08 0B 01 00        		bp=sp+1
                            	
00008AE9 0D 03 03 00        		R1=BP+3
000004FE                    	.debug
000004FE 2E 00 73 00        		.dw '.stabn 0x44,0,9,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 2C 00
         00 00 00 00
00000510 05 00 00 00        		.dd LM2-_disp_Init
00000512 0D 00 0A 00        		.dw 0x0d,0x0a
00008AEB                    	.code
                            	LM2:
00008AEB 12 95 02 70        		R2=[28674]	// QImode move
00008AED 0A A7 C0 FF        		R3=R2|(-64)
00008AEF 1B D7 02 70        		[28674]=R3	// QImode move
00000514                    	.debug
00000514 2E 00 73 00        		.dw '.stabn 0x44,0,10,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         2C 00 00 00
         00 00      
00000527 0B 00 00 00        		.dd LM3-_disp_Init
00000529 0D 00 0A 00        		.dw 0x0d,0x0a
00008AF1                    	.code
                            	LM3:
00008AF1 12 95 03 70        		R2=[28675]	// QImode move
00008AF3 0A A7 C0 FF        		R3=R2|(-64)
00008AF5 1B D7 03 70        		[28675]=R3	// QImode move
0000052B                    	.debug
0000052B 2E 00 73 00        		.dw '.stabn 0x44,0,11,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         2C 00 00 00
         00 00      
0000053E 11 00 00 00        		.dd LM4-_disp_Init
00000540 0D 00 0A 00        		.dw 0x0d,0x0a
00008AF7                    	.code
                            	LM4:
00008AF7 12 95 00 70        		R2=[28672]	// QImode move
00008AF9 1A D5 00 70        		[28672]=R2	// QImode move
00000542                    	.debug
00000542 2E 00 73 00        		.dw '.stabn 0x44,0,12,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 32 00
         2C 00 00 00
         00 00      
00000555 15 00 00 00        		.dd LM5-_disp_Init
00000557 0D 00 0A 00        		.dw 0x0d,0x0a
00008AFB                    	.code
                            	LM5:
00008AFB 12 95 07 70        		R2=[28679]	// QImode move
00008AFD 0A A7 00 FF        		R3=R2|(-256)
00008AFF 1B D7 07 70        		[28679]=R3	// QImode move
00000559                    	.debug
00000559 2E 00 73 00        		.dw '.stabn 0x44,0,13,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 33 00
         2C 00 00 00
         00 00      
0000056C 1B 00 00 00        		.dd LM6-_disp_Init
0000056E 0D 00 0A 00        		.dw 0x0d,0x0a
00008B01                    	.code
                            	LM6:
00008B01 12 95 08 70        		R2=[28680]	// QImode move
00008B03 0A A7 00 FF        		R3=R2|(-256)
00008B05 1B D7 08 70        		[28680]=R3	// QImode move
00000570                    	.debug
00000570 2E 00 73 00        		.dw '.stabn 0x44,0,14,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 34 00
         2C 00 00 00
         00 00      
00000583 21 00 00 00        		.dd LM7-_disp_Init
00000585 0D 00 0A 00        		.dw 0x0d,0x0a
00008B07                    	.code
                            	LM7:
00008B07 12 95 05 70        		R2=[28677]	// QImode move
00008B09 1A D5 05 70        		[28677]=R2	// QImode move
00000587                    	.debug
00000587 2E 00 73 00        		.dw '.stabn 0x44,0,15,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 35 00
         2C 00 00 00
         00 00      
0000059A 25 00 00 00        		.dd LM8-_disp_Init
0000059C 0D 00 0A 00        		.dw 0x0d,0x0a
00008B0B                    	.code
                            	LM8:
0000059E                    	.debug
0000059E 2E 00 73 00        		.dw '.stabn 0x44,0,15,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 35 00
         2C 00 00 00
         00 00      
000005B1 25 00 00 00        		.dd LM9-_disp_Init
000005B3 0D 00 0A 00        		.dw 0x0d,0x0a
00008B0B                    	.code
                            	LM9:
                            	L2:
                            	
00008B0B 88 98              		pop bp from [sp]
00008B0C 90 9A              		retf
                            		.endp	// end of disp_Init
                            	
000005B5                    	.debug
000005B5 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
000005BE 27 00 00 00        		.dd LME1-_disp_Init
000005C0 0D 00 0A 00        		.dw 0x0d,0x0a
00008B0D                    	.code
                            	LME1:
000080BB                    	.text
                            	LC0:
000080BB 00 3F              		.dw 16128
000080BC 00 06              		.dw 1536
000080BD 00 5B              		.dw 23296
000080BE 00 4F              		.dw 20224
000080BF 00 66              		.dw 26112
000080C0 00 6D              		.dw 27904
000080C1 00 7D              		.dw 32000
000080C2 00 07              		.dw 1792
000080C3 00 7F              		.dw 32512
000080C4 00 6F              		.dw 28416
000080C5 40 00              		.dw 64
000080C6 80 00              		.dw 128
                            	LC1:
000080C7 00 01              		.dw 256
000080C8 00 02              		.dw 512
000080C9 00 04              		.dw 1024
000080CA 00 08              		.dw 2048
000080CB 00 10              		.dw 4096
000080CC 00 20              		.dw 8192
000080CD 00 40              		.dw 16384
000080CE 00 80              		.dw -32768
00008B0D                    	.code
000005C2                    	.debug
000005C2 2E 00 73 00        		.dw '.stabs "disp:F19",36,0,0,',0,0,offset _disp,seg _disp,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         73 00 70 00
         3A 00 46 00
         31 00 39 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 27 00
         00 00 0D 00
         0A 00      
00008B0D                    	.CODE
                            	.public _disp
                            	_disp:	.proc
000005E1                    	.debug
000005E1 2E 00 73 00        		.dw '.stabn 0x44,0,17,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 37 00
         2C 00 00 00
         00 00      
000005F4 00 00 00 00        		.dd LM10-_disp
000005F6 0D 00 0A 00        		.dw 0x0d,0x0a
00008B0D                    	.code
                            	LM10:
                            		// total=53, vars=53
                            		// frame_pointer_needed: 1
00008B0D 88 DA              		push bp to [sp]
00008B0E 75 20              		sp-=53
00008B0F 08 0B 01 00        		bp=sp+1
                            	
00008B11 0D 03 38 00        		R1=BP+56
00008B13 26 D2              		[bp+38]=R1	// QImode move
000005F8                    	.debug
000005F8 2E 00 73 00        		.dw '.stabn 0x44,0,18,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 38 00
         2C 00 00 00
         00 00      
0000060B 07 00 00 00        		.dd LM11-_disp
0000060D 0D 00 0A 00        		.dw 0x0d,0x0a
00008B14                    	.code
                            	LM11:
                            	LBB2:
00008B14 05 93              		R1=BP	// QImode move
00008B15 0A 95 BB 80        		R2=LC0	// QImode move
00008B17 4C 96              		R3=12	// QImode move
00008B18 C8 D6              		[SP--]=R3	// QImode move
00008B19 C8 D4              		[SP--]=R2	// QImode move
00008B1A C8 D2              		[SP--]=R1	// QImode move
00008B1B 40 F0 9F 9A        		call __BlockCopy	// call with return value
00008B1D 43 00              		SP = SP + 3	//SP
0000060F                    	.debug
0000060F 2E 00 73 00        		.dw '.stabn 0x44,0,19,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 39 00
         2C 00 00 00
         00 00      
00000622 11 00 00 00        		.dd LM12-_disp
00000624 0D 00 0A 00        		.dw 0x0d,0x0a
00008B1E                    	.code
                            	LM12:
00008B1E 05 93              		R1=BP	// QImode move
00008B1F 0D 05 0C 00        		R2=BP+12
00008B21 02 93              		R1=R2	// QImode move
00008B22 0A 95 C7 80        		R2=LC1	// QImode move
00008B24 48 96              		R3=8	// QImode move
00008B25 C8 D6              		[SP--]=R3	// QImode move
00008B26 C8 D4              		[SP--]=R2	// QImode move
00008B27 C8 D2              		[SP--]=R1	// QImode move
00008B28 40 F0 9F 9A        		call __BlockCopy	// call with return value
00008B2A 43 00              		SP = SP + 3	//SP
00000626                    	.debug
00000626 2E 00 73 00        		.dw '.stabn 0x44,0,20,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 30 00
         2C 00 00 00
         00 00      
00000639 1E 00 00 00        		.dd LM13-_disp
0000063B 0D 00 0A 00        		.dw 0x0d,0x0a
00008B2B                    	.code
                            	LM13:
00008B2B 05 93              		R1=BP	// QImode move
00008B2C 0D 05 14 00        		R2=BP+20
00008B2E 40 92              		R1=0	// QImode move
00008B2F 02 97              		R3=R2	// QImode move
00008B30 C3 D2              		[R3]=R1	// QImode move
00008B31 05 93              		R1=BP	// QImode move
00008B32 0D 05 15 00        		R2=BP+21
00008B34 40 92              		R1=0	// QImode move
00008B35 02 99              		R4=R2	// QImode move
00008B36 C4 D2              		[R4]=R1	// QImode move
0000063D                    	.debug
0000063D 2E 00 73 00        		.dw '.stabn 0x44,0,23,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 33 00
         2C 00 00 00
         00 00      
00000650 2A 00 00 00        		.dd LM14-_disp
00000652 0D 00 0A 00        		.dw 0x0d,0x0a
00008B37                    	.code
                            	LM14:
00008B37 05 93              		R1=BP	// QImode move
00008B38 0D 05 16 00        		R2=BP+22
00008B3A 02 93              		R1=R2	// QImode move
00008B3B 0A 03 0E 00        		R1=R2+14
00008B3D 27 D2              		[bp+39]=R1	// QImode move
00008B3E 26 94              		R2=[bp+38]	// QImode move
00008B3F C2 92              		R1=[R2]	// QImode move
00008B40 4A 94              		R2=10	// QImode move
00008B41 C8 D4              		[SP--]=R2	// QImode move
00008B42 C8 D2              		[SP--]=R1	// QImode move
00008B43 40 F0 FB 99        		call __modi1	// call with return value
00008B45 42 00              		SP = SP + 2	//SP
00008B46 C8 D2              		[SP--]=R1	// QImode move
00008B47 40 F0 2F 99        		call __cvi1f2	// call with return value
00008B49 41 00              		SP = SP + 1	//SP
00008B4A 27 96              		R3=[bp+39]	// QImode move
00008B4B D3 D2              		[R3++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008B4C CB D4              		[R3--]=R2
00000654                    	.debug
00000654 2E 00 73 00        		.dw '.stabn 0x44,0,24,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 34 00
         2C 00 00 00
         00 00      
00000667 40 00 00 00        		.dd LM15-_disp
00000669 0D 00 0A 00        		.dw 0x0d,0x0a
00008B4D                    	.code
                            	LM15:
00008B4D 05 93              		R1=BP	// QImode move
00008B4E 0D 05 16 00        		R2=BP+22
00008B50 02 93              		R1=R2	// QImode move
00008B51 0A 09 0C 00        		R4=R2+12
00008B53 28 D8              		[bp+40]=R4	// QImode move
00008B54 26 94              		R2=[bp+38]	// QImode move
00008B55 C2 92              		R1=[R2]	// QImode move
00008B56 4A 94              		R2=10	// QImode move
00008B57 C8 D4              		[SP--]=R2	// QImode move
00008B58 C8 D2              		[SP--]=R1	// QImode move
00008B59 40 F0 A4 99        		call __divi1	// call with return value
00008B5B 42 00              		SP = SP + 2	//SP
00008B5C C8 D2              		[SP--]=R1	// QImode move
00008B5D 40 F0 2F 99        		call __cvi1f2	// call with return value
00008B5F 41 00              		SP = SP + 1	//SP
00008B60 28 96              		R3=[bp+40]	// QImode move
00008B61 D3 D2              		[R3++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008B62 CB D4              		[R3--]=R2
0000066B                    	.debug
0000066B 2E 00 73 00        		.dw '.stabn 0x44,0,25,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 35 00
         2C 00 00 00
         00 00      
0000067E 56 00 00 00        		.dd LM16-_disp
00000680 0D 00 0A 00        		.dw 0x0d,0x0a
00008B63                    	.code
                            	LM16:
00008B63 05 93              		R1=BP	// QImode move
00008B64 0D 05 16 00        		R2=BP+22
00008B66 02 93              		R1=R2	// QImode move
00008B67 0A 09 0A 00        		R4=R2+10
00008B69 29 D8              		[bp+41]=R4	// QImode move
00008B6A 26 92              		R1=[bp+38]	// QImode move
00008B6B 26 92              		R1=[bp+38]	// QImode move
00008B6C 09 05 03 00        		R2=R1+3
00008B6E 02 97              		R3=R2	// QImode move
00008B6F C3 92              		R1=[R3]	// QImode move
00008B70 4A 94              		R2=10	// QImode move
00008B71 C8 D4              		[SP--]=R2	// QImode move
00008B72 C8 D2              		[SP--]=R1	// QImode move
00008B73 40 F0 FB 99        		call __modi1	// call with return value
00008B75 42 00              		SP = SP + 2	//SP
00008B76 C8 D2              		[SP--]=R1	// QImode move
00008B77 40 F0 2F 99        		call __cvi1f2	// call with return value
00008B79 41 00              		SP = SP + 1	//SP
00008B7A 29 98              		R4=[bp+41]	// QImode move
00008B7B D4 D2              		[R4++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008B7C CC D4              		[R4--]=R2
00000682                    	.debug
00000682 2E 00 73 00        		.dw '.stabn 0x44,0,26,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 36 00
         2C 00 00 00
         00 00      
00000695 70 00 00 00        		.dd LM17-_disp
00000697 0D 00 0A 00        		.dw 0x0d,0x0a
00008B7D                    	.code
                            	LM17:
00008B7D 05 93              		R1=BP	// QImode move
00008B7E 0D 05 16 00        		R2=BP+22
00008B80 02 93              		R1=R2	// QImode move
00008B81 0A 03 08 00        		R1=R2+8
00008B83 2A D2              		[bp+42]=R1	// QImode move
00008B84 26 92              		R1=[bp+38]	// QImode move
00008B85 26 96              		R3=[bp+38]	// QImode move
00008B86 0B 05 03 00        		R2=R3+3
00008B88 02 99              		R4=R2	// QImode move
00008B89 C4 92              		R1=[R4]	// QImode move
00008B8A 4A 94              		R2=10	// QImode move
00008B8B C8 D4              		[SP--]=R2	// QImode move
00008B8C C8 D2              		[SP--]=R1	// QImode move
00008B8D 40 F0 A4 99        		call __divi1	// call with return value
00008B8F 42 00              		SP = SP + 2	//SP
00008B90 C8 D2              		[SP--]=R1	// QImode move
00008B91 40 F0 2F 99        		call __cvi1f2	// call with return value
00008B93 41 00              		SP = SP + 1	//SP
00008B94 2A 96              		R3=[bp+42]	// QImode move
00008B95 D3 D2              		[R3++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008B96 CB D4              		[R3--]=R2
00000699                    	.debug
00000699 2E 00 73 00        		.dw '.stabn 0x44,0,27,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 37 00
         2C 00 00 00
         00 00      
000006AC 8A 00 00 00        		.dd LM18-_disp
000006AE 0D 00 0A 00        		.dw 0x0d,0x0a
00008B97                    	.code
                            	LM18:
00008B97 05 93              		R1=BP	// QImode move
00008B98 0D 05 16 00        		R2=BP+22
00008B9A 02 93              		R1=R2	// QImode move
00008B9B 0A 09 06 00        		R4=R2+6
00008B9D 2B D8              		[bp+43]=R4	// QImode move
00008B9E 26 92              		R1=[bp+38]	// QImode move
00008B9F 26 92              		R1=[bp+38]	// QImode move
00008BA0 09 05 02 00        		R2=R1+2
00008BA2 02 97              		R3=R2	// QImode move
00008BA3 C3 92              		R1=[R3]	// QImode move
00008BA4 4A 94              		R2=10	// QImode move
00008BA5 C8 D4              		[SP--]=R2	// QImode move
00008BA6 C8 D2              		[SP--]=R1	// QImode move
00008BA7 40 F0 FB 99        		call __modi1	// call with return value
00008BA9 42 00              		SP = SP + 2	//SP
00008BAA C8 D2              		[SP--]=R1	// QImode move
00008BAB 40 F0 2F 99        		call __cvi1f2	// call with return value
00008BAD 41 00              		SP = SP + 1	//SP
00008BAE 2B 98              		R4=[bp+43]	// QImode move
00008BAF D4 D2              		[R4++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008BB0 CC D4              		[R4--]=R2
000006B0                    	.debug
000006B0 2E 00 73 00        		.dw '.stabn 0x44,0,28,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 38 00
         2C 00 00 00
         00 00      
000006C3 A4 00 00 00        		.dd LM19-_disp
000006C5 0D 00 0A 00        		.dw 0x0d,0x0a
00008BB1                    	.code
                            	LM19:
00008BB1 05 93              		R1=BP	// QImode move
00008BB2 0D 05 16 00        		R2=BP+22
00008BB4 02 93              		R1=R2	// QImode move
00008BB5 0A 03 04 00        		R1=R2+4
00008BB7 2C D2              		[bp+44]=R1	// QImode move
00008BB8 26 92              		R1=[bp+38]	// QImode move
00008BB9 26 96              		R3=[bp+38]	// QImode move
00008BBA 0B 05 02 00        		R2=R3+2
00008BBC 02 99              		R4=R2	// QImode move
00008BBD C4 92              		R1=[R4]	// QImode move
00008BBE 4A 94              		R2=10	// QImode move
00008BBF C8 D4              		[SP--]=R2	// QImode move
00008BC0 C8 D2              		[SP--]=R1	// QImode move
00008BC1 40 F0 A4 99        		call __divi1	// call with return value
00008BC3 42 00              		SP = SP + 2	//SP
00008BC4 C8 D2              		[SP--]=R1	// QImode move
00008BC5 40 F0 2F 99        		call __cvi1f2	// call with return value
00008BC7 41 00              		SP = SP + 1	//SP
00008BC8 2C 96              		R3=[bp+44]	// QImode move
00008BC9 D3 D2              		[R3++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008BCA CB D4              		[R3--]=R2
000006C7                    	.debug
000006C7 2E 00 73 00        		.dw '.stabn 0x44,0,29,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         32 00 39 00
         2C 00 00 00
         00 00      
000006DA BE 00 00 00        		.dd LM20-_disp
000006DC 0D 00 0A 00        		.dw 0x0d,0x0a
00008BCB                    	.code
                            	LM20:
00008BCB 05 93              		R1=BP	// QImode move
00008BCC 0D 05 16 00        		R2=BP+22
00008BCE 02 93              		R1=R2	// QImode move
00008BCF 0A 09 02 00        		R4=R2+2
00008BD1 2D D8              		[bp+45]=R4	// QImode move
00008BD2 26 92              		R1=[bp+38]	// QImode move
00008BD3 26 92              		R1=[bp+38]	// QImode move
00008BD4 09 05 01 00        		R2=R1+1
00008BD6 02 97              		R3=R2	// QImode move
00008BD7 C3 92              		R1=[R3]	// QImode move
00008BD8 4A 94              		R2=10	// QImode move
00008BD9 C8 D4              		[SP--]=R2	// QImode move
00008BDA C8 D2              		[SP--]=R1	// QImode move
00008BDB 40 F0 FB 99        		call __modi1	// call with return value
00008BDD 42 00              		SP = SP + 2	//SP
00008BDE C8 D2              		[SP--]=R1	// QImode move
00008BDF 40 F0 2F 99        		call __cvi1f2	// call with return value
00008BE1 41 00              		SP = SP + 1	//SP
00008BE2 2D 98              		R4=[bp+45]	// QImode move
00008BE3 D4 D2              		[R4++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008BE4 CC D4              		[R4--]=R2
000006DE                    	.debug
000006DE 2E 00 73 00        		.dw '.stabn 0x44,0,30,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 30 00
         2C 00 00 00
         00 00      
000006F1 D8 00 00 00        		.dd LM21-_disp
000006F3 0D 00 0A 00        		.dw 0x0d,0x0a
00008BE5                    	.code
                            	LM21:
00008BE5 05 93              		R1=BP	// QImode move
00008BE6 0D 03 16 00        		R1=BP+22
00008BE8 2E D2              		[bp+46]=R1	// QImode move
00008BE9 26 92              		R1=[bp+38]	// QImode move
00008BEA 26 96              		R3=[bp+38]	// QImode move
00008BEB 0B 05 01 00        		R2=R3+1
00008BED 02 99              		R4=R2	// QImode move
00008BEE C4 92              		R1=[R4]	// QImode move
00008BEF 4A 94              		R2=10	// QImode move
00008BF0 C8 D4              		[SP--]=R2	// QImode move
00008BF1 C8 D2              		[SP--]=R1	// QImode move
00008BF2 40 F0 A4 99        		call __divi1	// call with return value
00008BF4 42 00              		SP = SP + 2	//SP
00008BF5 C8 D2              		[SP--]=R1	// QImode move
00008BF6 40 F0 2F 99        		call __cvi1f2	// call with return value
00008BF8 41 00              		SP = SP + 1	//SP
00008BF9 2E 96              		R3=[bp+46]	// QImode move
00008BFA D3 D2              		[R3++]=R1	// [RD]=RS HFmode, RD!=RS+1
00008BFB CB D4              		[R3--]=R2
000006F5                    	.debug
000006F5 2E 00 73 00        		.dw '.stabn 0x44,0,32,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 32 00
         2C 00 00 00
         00 00      
00000708 EF 00 00 00        		.dd LM22-_disp
0000070A 0D 00 0A 00        		.dw 0x0d,0x0a
00008BFC                    	.code
                            	LM22:
00008BFC 11 93 45 02        		R1=[_shan_flag]	// QImode move
00008BFE 41 42              		CMP R1,1	// QImode compare
00008BFF 02 5E 0F 9F        		NSJNZ L4	//QImode NE
         B8 8C      
0000070C                    	.debug
0000070C 2E 00 73 00        		.dw '.stabn 0x44,0,34,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 34 00
         2C 00 00 00
         00 00      
0000071F F5 00 00 00        		.dd LM23-_disp
00000721 0D 00 0A 00        		.dw 0x0d,0x0a
00008C02                    	.code
                            	LM23:
00008C02 11 93 47 02        		R1=[_num]	// QImode move
00008C04 41 42              		CMP R1,1	// QImode compare
00008C05 02 5E 0F 9F        		NSJNZ L5	//QImode NE
         5F 8C      
00000723                    	.debug
00000723 2E 00 73 00        		.dw '.stabn 0x44,0,36,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 36 00
         2C 00 00 00
         00 00      
00000736 FB 00 00 00        		.dd LM24-_disp
00000738 0D 00 0A 00        		.dw 0x0d,0x0a
00008C08                    	.code
                            	LM24:
00008C08 05 93              		R1=BP	// QImode move
00008C09 0D 05 14 00        		R2=BP+20
00008C0B 40 92              		R1=0	// QImode move
00008C0C 02 99              		R4=R2	// QImode move
00008C0D C4 D2              		[R4]=R1	// QImode move
                            	L6:
00008C0E 05 93              		R1=BP	// QImode move
00008C0F 0D 05 14 00        		R2=BP+20
00008C11 02 97              		R3=R2	// QImode move
00008C12 C3 92              		R1=[R3]	// QImode move
00008C13 41 42              		CMP R1,1	// QImode compare
00008C14 04 AE 01 EE        		NSJNG L9	//QImode LE
         00 EE      
00008C17 0F 9F 5F 8C        		pc=L5	// Indirect jump
                            	L9:
0000073A                    	.debug
0000073A 2E 00 73 00        		.dw '.stabn 0x44,0,38,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 38 00
         2C 00 00 00
         00 00      
0000074D 0C 01 00 00        		.dd LM25-_disp
0000074F 0D 00 0A 00        		.dw 0x0d,0x0a
00008C19                    	.code
                            	LM25:
00008C19 05 95              		R2=BP	// QImode move
00008C1A 0D 03 0C 00        		R1=BP+12
00008C1C 05 95              		R2=BP	// QImode move
00008C1D 0D 07 14 00        		R3=BP+20
00008C1F 03 99              		R4=R3	// QImode move
00008C20 C4 94              		R2=[R4]	// QImode move
00008C21 02 03              		R1 = R1 + R2	//addqi3
00008C22 01 97              		R3=R1	// QImode move
00008C23 C3 94              		R2=[R3]	// QImode move
00008C24 1A D5 05 70        		[28677]=R2	// QImode move
00000751                    	.debug
00000751 2E 00 73 00        		.dw '.stabn 0x44,0,39,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 39 00
         2C 00 00 00
         00 00      
00000764 19 01 00 00        		.dd LM26-_disp
00000766 0D 00 0A 00        		.dw 0x0d,0x0a
00008C26                    	.code
                            	LM26:
00008C26 05 93              		R1=BP	// QImode move
00008C27 0D 09 15 00        		R4=BP+21
00008C29 2F D8              		[bp+47]=R4	// QImode move
00008C2A 05 95              		R2=BP	// QImode move
00008C2B 0D 03 16 00        		R1=BP+22
00008C2D 05 95              		R2=BP	// QImode move
00008C2E 0D 07 14 00        		R3=BP+20
00008C30 03 99              		R4=R3	// QImode move
00008C31 C4 94              		R2=[R4]	// QImode move
00008C32 02 97              		R3=R2	// QImode move
00008C33 43 95              		R2=R3 lsl 1
00008C34 02 03              		R1 = R1 + R2	//addqi3
00008C35 01 95              		R2=R1	// QImode move
00008C36 D2 96              		R3=[R2++]	// RD=[RS] HFmode, RD!=RS
00008C37 CA 98              		R4=[R2--]
00008C38 90 D8              		push R3,R4 to [sp]	// pushhf
00008C39 40 F0 D5 99        		call __cvf2i1	// call with return value
00008C3B 42 00              		SP = SP + 2	//SP
00008C3C 2F 96              		R3=[bp+47]	// QImode move
00008C3D C3 D2              		[R3]=R1	// QImode move
00000768                    	.debug
00000768 2E 00 73 00        		.dw '.stabn 0x44,0,40,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 30 00
         2C 00 00 00
         00 00      
0000077B 31 01 00 00        		.dd LM27-_disp
0000077D 0D 00 0A 00        		.dw 0x0d,0x0a
00008C3E                    	.code
                            	LM27:
00008C3E 05 93              		R1=BP	// QImode move
00008C3F 0D 05 15 00        		R2=BP+21
00008C41 02 99              		R4=R2	// QImode move
00008C42 C4 96              		R3=[R4]	// QImode move
00008C43 05 93              		R1=BP	// QImode move
00008C44 03 03              		R1 = R1 + R3	//addqi3
00008C45 01 97              		R3=R1	// QImode move
00008C46 C3 94              		R2=[R3]	// QImode move
00008C47 1A D5 00 70        		[28672]=R2	// QImode move
0000077F                    	.debug
0000077F 2E 00 73 00        		.dw '.stabn 0x44,0,41,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 31 00
         2C 00 00 00
         00 00      
00000792 3C 01 00 00        		.dd LM28-_disp
00000794 0D 00 0A 00        		.dw 0x0d,0x0a
00008C49                    	.code
                            	LM28:
00008C49 42 92              		R1=2	// QImode move
00008C4A C8 D2              		[SP--]=R1	// QImode move
00008C4B 40 F0 66 8E        		call _disp_delay	// call without return value
00008C4D 41 00              		SP = SP + 1	//SP
00000796                    	.debug
00000796 2E 00 73 00        		.dw '.stabn 0x44,0,36,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         33 00 36 00
         2C 00 00 00
         00 00      
000007A9 41 01 00 00        		.dd LM29-_disp
000007AB 0D 00 0A 00        		.dw 0x0d,0x0a
00008C4E                    	.code
                            	LM29:
                            	L8:
00008C4E 05 93              		R1=BP	// QImode move
00008C4F 0D 05 14 00        		R2=BP+20
00008C51 05 97              		R3=BP	// QImode move
00008C52 0D 03 14 00        		R1=BP+20
00008C54 05 95              		R2=BP	// QImode move
00008C55 0D 07 14 00        		R3=BP+20
00008C57 03 99              		R4=R3	// QImode move
00008C58 C4 94              		R2=[R4]	// QImode move
00008C59 0A 07 01 00        		R3=R2+1
00008C5B 01 95              		R2=R1	// QImode move
00008C5C C2 D6              		[R2]=R3	// QImode move
00008C5D 0F 9F 0E 8C        		pc=L6	// Indirect jump
                            	L7:
                            	L5:
000007AD                    	.debug
000007AD 2E 00 73 00        		.dw '.stabn 0x44,0,44,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 34 00
         2C 00 00 00
         00 00      
000007C0 52 01 00 00        		.dd LM30-_disp
000007C2 0D 00 0A 00        		.dw 0x0d,0x0a
00008C5F                    	.code
                            	LM30:
00008C5F 05 93              		R1=BP	// QImode move
00008C60 0D 05 14 00        		R2=BP+20
00008C62 42 92              		R1=2	// QImode move
00008C63 02 97              		R3=R2	// QImode move
00008C64 C3 D2              		[R3]=R1	// QImode move
                            	L10:
00008C65 05 93              		R1=BP	// QImode move
00008C66 0D 05 14 00        		R2=BP+20
00008C68 02 99              		R4=R2	// QImode move
00008C69 C4 92              		R1=[R4]	// QImode move
00008C6A 43 42              		CMP R1,3	// QImode compare
00008C6B 04 AE 01 EE        		NSJNG L13	//QImode LE
         00 EE      
00008C6E 0F 9F B6 8C        		pc=L11	// Indirect jump
                            	L13:
000007C4                    	.debug
000007C4 2E 00 73 00        		.dw '.stabn 0x44,0,46,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 36 00
         2C 00 00 00
         00 00      
000007D7 63 01 00 00        		.dd LM31-_disp
000007D9 0D 00 0A 00        		.dw 0x0d,0x0a
00008C70                    	.code
                            	LM31:
00008C70 05 95              		R2=BP	// QImode move
00008C71 0D 03 0C 00        		R1=BP+12
00008C73 05 95              		R2=BP	// QImode move
00008C74 0D 07 14 00        		R3=BP+20
00008C76 03 99              		R4=R3	// QImode move
00008C77 C4 94              		R2=[R4]	// QImode move
00008C78 02 03              		R1 = R1 + R2	//addqi3
00008C79 01 97              		R3=R1	// QImode move
00008C7A C3 94              		R2=[R3]	// QImode move
00008C7B 1A D5 05 70        		[28677]=R2	// QImode move
000007DB                    	.debug
000007DB 2E 00 73 00        		.dw '.stabn 0x44,0,47,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 37 00
         2C 00 00 00
         00 00      
000007EE 70 01 00 00        		.dd LM32-_disp
000007F0 0D 00 0A 00        		.dw 0x0d,0x0a
00008C7D                    	.code
                            	LM32:
00008C7D 05 93              		R1=BP	// QImode move
00008C7E 0D 09 15 00        		R4=BP+21
00008C80 30 D8              		[bp+48]=R4	// QImode move
00008C81 05 95              		R2=BP	// QImode move
00008C82 0D 03 16 00        		R1=BP+22
00008C84 05 95              		R2=BP	// QImode move
00008C85 0D 07 14 00        		R3=BP+20
00008C87 03 99              		R4=R3	// QImode move
00008C88 C4 94              		R2=[R4]	// QImode move
00008C89 02 97              		R3=R2	// QImode move
00008C8A 43 95              		R2=R3 lsl 1
00008C8B 02 03              		R1 = R1 + R2	//addqi3
00008C8C 01 95              		R2=R1	// QImode move
00008C8D D2 96              		R3=[R2++]	// RD=[RS] HFmode, RD!=RS
00008C8E CA 98              		R4=[R2--]
00008C8F 90 D8              		push R3,R4 to [sp]	// pushhf
00008C90 40 F0 D5 99        		call __cvf2i1	// call with return value
00008C92 42 00              		SP = SP + 2	//SP
00008C93 30 96              		R3=[bp+48]	// QImode move
00008C94 C3 D2              		[R3]=R1	// QImode move
000007F2                    	.debug
000007F2 2E 00 73 00        		.dw '.stabn 0x44,0,48,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 38 00
         2C 00 00 00
         00 00      
00000805 88 01 00 00        		.dd LM33-_disp
00000807 0D 00 0A 00        		.dw 0x0d,0x0a
00008C95                    	.code
                            	LM33:
00008C95 05 93              		R1=BP	// QImode move
00008C96 0D 05 15 00        		R2=BP+21
00008C98 02 99              		R4=R2	// QImode move
00008C99 C4 96              		R3=[R4]	// QImode move
00008C9A 05 93              		R1=BP	// QImode move
00008C9B 03 03              		R1 = R1 + R3	//addqi3
00008C9C 01 97              		R3=R1	// QImode move
00008C9D C3 94              		R2=[R3]	// QImode move
00008C9E 1A D5 00 70        		[28672]=R2	// QImode move
00000809                    	.debug
00000809 2E 00 73 00        		.dw '.stabn 0x44,0,49,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 39 00
         2C 00 00 00
         00 00      
0000081C 93 01 00 00        		.dd LM34-_disp
0000081E 0D 00 0A 00        		.dw 0x0d,0x0a
00008CA0                    	.code
                            	LM34:
00008CA0 42 92              		R1=2	// QImode move
00008CA1 C8 D2              		[SP--]=R1	// QImode move
00008CA2 40 F0 66 8E        		call _disp_delay	// call without return value
00008CA4 41 00              		SP = SP + 1	//SP
00000820                    	.debug
00000820 2E 00 73 00        		.dw '.stabn 0x44,0,44,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         34 00 34 00
         2C 00 00 00
         00 00      
00000833 98 01 00 00        		.dd LM35-_disp
00000835 0D 00 0A 00        		.dw 0x0d,0x0a
00008CA5                    	.code
                            	LM35:
                            	L12:
00008CA5 05 93              		R1=BP	// QImode move
00008CA6 0D 05 14 00        		R2=BP+20
00008CA8 05 97              		R3=BP	// QImode move
00008CA9 0D 03 14 00        		R1=BP+20
00008CAB 05 95              		R2=BP	// QImode move
00008CAC 0D 07 14 00        		R3=BP+20
00008CAE 03 99              		R4=R3	// QImode move
00008CAF C4 94              		R2=[R4]	// QImode move
00008CB0 0A 07 01 00        		R3=R2+1
00008CB2 01 95              		R2=R1	// QImode move
00008CB3 C2 D6              		[R2]=R3	// QImode move
00008CB4 0F 9F 65 8C        		pc=L10	// Indirect jump
                            	L11:
00000837                    	.debug
00000837 2E 00 73 00        		.dw '.stabn 0x44,0,51,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 31 00
         2C 00 00 00
         00 00      
0000084A A9 01 00 00        		.dd LM36-_disp
0000084C 0D 00 0A 00        		.dw 0x0d,0x0a
00008CB6                    	.code
                            	LM36:
00008CB6 0F 9F CB 8D        		pc=L14	// Indirect jump
                            	L4:
0000084E                    	.debug
0000084E 2E 00 73 00        		.dw '.stabn 0x44,0,52,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 32 00
         2C 00 00 00
         00 00      
00000861 AB 01 00 00        		.dd LM37-_disp
00000863 0D 00 0A 00        		.dw 0x0d,0x0a
00008CB8                    	.code
                            	LM37:
00008CB8 11 93 45 02        		R1=[_shan_flag]	// QImode move
00008CBA 42 42              		CMP R1,2	// QImode compare
00008CBB 02 5E 0F 9F        		NSJNZ L15	//QImode NE
         74 8D      
00000865                    	.debug
00000865 2E 00 73 00        		.dw '.stabn 0x44,0,55,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 35 00
         2C 00 00 00
         00 00      
00000878 B1 01 00 00        		.dd LM38-_disp
0000087A 0D 00 0A 00        		.dw 0x0d,0x0a
00008CBE                    	.code
                            	LM38:
00008CBE 05 93              		R1=BP	// QImode move
00008CBF 0D 05 14 00        		R2=BP+20
00008CC1 40 92              		R1=0	// QImode move
00008CC2 02 97              		R3=R2	// QImode move
00008CC3 C3 D2              		[R3]=R1	// QImode move
                            	L16:
00008CC4 05 93              		R1=BP	// QImode move
00008CC5 0D 05 14 00        		R2=BP+20
00008CC7 02 99              		R4=R2	// QImode move
00008CC8 C4 92              		R1=[R4]	// QImode move
00008CC9 41 42              		CMP R1,1	// QImode compare
00008CCA 04 AE 01 EE        		NSJNG L19	//QImode LE
         00 EE      
00008CCD 0F 9F 15 8D        		pc=L17	// Indirect jump
                            	L19:
0000087C                    	.debug
0000087C 2E 00 73 00        		.dw '.stabn 0x44,0,57,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 37 00
         2C 00 00 00
         00 00      
0000088F C2 01 00 00        		.dd LM39-_disp
00000891 0D 00 0A 00        		.dw 0x0d,0x0a
00008CCF                    	.code
                            	LM39:
00008CCF 05 95              		R2=BP	// QImode move
00008CD0 0D 03 0C 00        		R1=BP+12
00008CD2 05 95              		R2=BP	// QImode move
00008CD3 0D 07 14 00        		R3=BP+20
00008CD5 03 99              		R4=R3	// QImode move
00008CD6 C4 94              		R2=[R4]	// QImode move
00008CD7 02 03              		R1 = R1 + R2	//addqi3
00008CD8 01 97              		R3=R1	// QImode move
00008CD9 C3 94              		R2=[R3]	// QImode move
00008CDA 1A D5 05 70        		[28677]=R2	// QImode move
00000893                    	.debug
00000893 2E 00 73 00        		.dw '.stabn 0x44,0,58,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 38 00
         2C 00 00 00
         00 00      
000008A6 CF 01 00 00        		.dd LM40-_disp
000008A8 0D 00 0A 00        		.dw 0x0d,0x0a
00008CDC                    	.code
                            	LM40:
00008CDC 05 93              		R1=BP	// QImode move
00008CDD 0D 09 15 00        		R4=BP+21
00008CDF 31 D8              		[bp+49]=R4	// QImode move
00008CE0 05 95              		R2=BP	// QImode move
00008CE1 0D 03 16 00        		R1=BP+22
00008CE3 05 95              		R2=BP	// QImode move
00008CE4 0D 07 14 00        		R3=BP+20
00008CE6 03 99              		R4=R3	// QImode move
00008CE7 C4 94              		R2=[R4]	// QImode move
00008CE8 02 97              		R3=R2	// QImode move
00008CE9 43 95              		R2=R3 lsl 1
00008CEA 02 03              		R1 = R1 + R2	//addqi3
00008CEB 01 95              		R2=R1	// QImode move
00008CEC D2 96              		R3=[R2++]	// RD=[RS] HFmode, RD!=RS
00008CED CA 98              		R4=[R2--]
00008CEE 90 D8              		push R3,R4 to [sp]	// pushhf
00008CEF 40 F0 D5 99        		call __cvf2i1	// call with return value
00008CF1 42 00              		SP = SP + 2	//SP
00008CF2 31 96              		R3=[bp+49]	// QImode move
00008CF3 C3 D2              		[R3]=R1	// QImode move
000008AA                    	.debug
000008AA 2E 00 73 00        		.dw '.stabn 0x44,0,59,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 39 00
         2C 00 00 00
         00 00      
000008BD E7 01 00 00        		.dd LM41-_disp
000008BF 0D 00 0A 00        		.dw 0x0d,0x0a
00008CF4                    	.code
                            	LM41:
00008CF4 05 93              		R1=BP	// QImode move
00008CF5 0D 05 15 00        		R2=BP+21
00008CF7 02 99              		R4=R2	// QImode move
00008CF8 C4 96              		R3=[R4]	// QImode move
00008CF9 05 93              		R1=BP	// QImode move
00008CFA 03 03              		R1 = R1 + R3	//addqi3
00008CFB 01 97              		R3=R1	// QImode move
00008CFC C3 94              		R2=[R3]	// QImode move
00008CFD 1A D5 00 70        		[28672]=R2	// QImode move
000008C1                    	.debug
000008C1 2E 00 73 00        		.dw '.stabn 0x44,0,60,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 30 00
         2C 00 00 00
         00 00      
000008D4 F2 01 00 00        		.dd LM42-_disp
000008D6 0D 00 0A 00        		.dw 0x0d,0x0a
00008CFF                    	.code
                            	LM42:
00008CFF 42 92              		R1=2	// QImode move
00008D00 C8 D2              		[SP--]=R1	// QImode move
00008D01 40 F0 66 8E        		call _disp_delay	// call without return value
00008D03 41 00              		SP = SP + 1	//SP
000008D8                    	.debug
000008D8 2E 00 73 00        		.dw '.stabn 0x44,0,55,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         35 00 35 00
         2C 00 00 00
         00 00      
000008EB F7 01 00 00        		.dd LM43-_disp
000008ED 0D 00 0A 00        		.dw 0x0d,0x0a
00008D04                    	.code
                            	LM43:
                            	L18:
00008D04 05 93              		R1=BP	// QImode move
00008D05 0D 05 14 00        		R2=BP+20
00008D07 05 97              		R3=BP	// QImode move
00008D08 0D 03 14 00        		R1=BP+20
00008D0A 05 95              		R2=BP	// QImode move
00008D0B 0D 07 14 00        		R3=BP+20
00008D0D 03 99              		R4=R3	// QImode move
00008D0E C4 94              		R2=[R4]	// QImode move
00008D0F 0A 07 01 00        		R3=R2+1
00008D11 01 95              		R2=R1	// QImode move
00008D12 C2 D6              		[R2]=R3	// QImode move
00008D13 0F 9F C4 8C        		pc=L16	// Indirect jump
                            	L17:
000008EF                    	.debug
000008EF 2E 00 73 00        		.dw '.stabn 0x44,0,62,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 32 00
         2C 00 00 00
         00 00      
00000902 08 02 00 00        		.dd LM44-_disp
00000904 0D 00 0A 00        		.dw 0x0d,0x0a
00008D15                    	.code
                            	LM44:
00008D15 11 93 47 02        		R1=[_num]	// QImode move
00008D17 41 42              		CMP R1,1	// QImode compare
00008D18 02 5E 0F 9F        		NSJNZ L20	//QImode NE
         72 8D      
00000906                    	.debug
00000906 2E 00 73 00        		.dw '.stabn 0x44,0,64,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 34 00
         2C 00 00 00
         00 00      
00000919 0E 02 00 00        		.dd LM45-_disp
0000091B 0D 00 0A 00        		.dw 0x0d,0x0a
00008D1B                    	.code
                            	LM45:
00008D1B 05 93              		R1=BP	// QImode move
00008D1C 0D 05 14 00        		R2=BP+20
00008D1E 42 92              		R1=2	// QImode move
00008D1F 02 97              		R3=R2	// QImode move
00008D20 C3 D2              		[R3]=R1	// QImode move
                            	L21:
00008D21 05 93              		R1=BP	// QImode move
00008D22 0D 05 14 00        		R2=BP+20
00008D24 02 99              		R4=R2	// QImode move
00008D25 C4 92              		R1=[R4]	// QImode move
00008D26 43 42              		CMP R1,3	// QImode compare
00008D27 04 AE 01 EE        		NSJNG L24	//QImode LE
         00 EE      
00008D2A 0F 9F 72 8D        		pc=L20	// Indirect jump
                            	L24:
0000091D                    	.debug
0000091D 2E 00 73 00        		.dw '.stabn 0x44,0,66,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 36 00
         2C 00 00 00
         00 00      
00000930 1F 02 00 00        		.dd LM46-_disp
00000932 0D 00 0A 00        		.dw 0x0d,0x0a
00008D2C                    	.code
                            	LM46:
00008D2C 05 95              		R2=BP	// QImode move
00008D2D 0D 03 0C 00        		R1=BP+12
00008D2F 05 95              		R2=BP	// QImode move
00008D30 0D 07 14 00        		R3=BP+20
00008D32 03 99              		R4=R3	// QImode move
00008D33 C4 94              		R2=[R4]	// QImode move
00008D34 02 03              		R1 = R1 + R2	//addqi3
00008D35 01 97              		R3=R1	// QImode move
00008D36 C3 94              		R2=[R3]	// QImode move
00008D37 1A D5 05 70        		[28677]=R2	// QImode move
00000934                    	.debug
00000934 2E 00 73 00        		.dw '.stabn 0x44,0,67,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 37 00
         2C 00 00 00
         00 00      
00000947 2C 02 00 00        		.dd LM47-_disp
00000949 0D 00 0A 00        		.dw 0x0d,0x0a
00008D39                    	.code
                            	LM47:
00008D39 05 93              		R1=BP	// QImode move
00008D3A 0D 09 15 00        		R4=BP+21
00008D3C 32 D8              		[bp+50]=R4	// QImode move
00008D3D 05 95              		R2=BP	// QImode move
00008D3E 0D 03 16 00        		R1=BP+22
00008D40 05 95              		R2=BP	// QImode move
00008D41 0D 07 14 00        		R3=BP+20
00008D43 03 99              		R4=R3	// QImode move
00008D44 C4 94              		R2=[R4]	// QImode move
00008D45 02 97              		R3=R2	// QImode move
00008D46 43 95              		R2=R3 lsl 1
00008D47 02 03              		R1 = R1 + R2	//addqi3
00008D48 01 95              		R2=R1	// QImode move
00008D49 D2 96              		R3=[R2++]	// RD=[RS] HFmode, RD!=RS
00008D4A CA 98              		R4=[R2--]
00008D4B 90 D8              		push R3,R4 to [sp]	// pushhf
00008D4C 40 F0 D5 99        		call __cvf2i1	// call with return value
00008D4E 42 00              		SP = SP + 2	//SP
00008D4F 32 96              		R3=[bp+50]	// QImode move
00008D50 C3 D2              		[R3]=R1	// QImode move
0000094B                    	.debug
0000094B 2E 00 73 00        		.dw '.stabn 0x44,0,68,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 38 00
         2C 00 00 00
         00 00      
0000095E 44 02 00 00        		.dd LM48-_disp
00000960 0D 00 0A 00        		.dw 0x0d,0x0a
00008D51                    	.code
                            	LM48:
00008D51 05 93              		R1=BP	// QImode move
00008D52 0D 05 15 00        		R2=BP+21
00008D54 02 99              		R4=R2	// QImode move
00008D55 C4 96              		R3=[R4]	// QImode move
00008D56 05 93              		R1=BP	// QImode move
00008D57 03 03              		R1 = R1 + R3	//addqi3
00008D58 01 97              		R3=R1	// QImode move
00008D59 C3 94              		R2=[R3]	// QImode move
00008D5A 1A D5 00 70        		[28672]=R2	// QImode move
00000962                    	.debug
00000962 2E 00 73 00        		.dw '.stabn 0x44,0,69,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 39 00
         2C 00 00 00
         00 00      
00000975 4F 02 00 00        		.dd LM49-_disp
00000977 0D 00 0A 00        		.dw 0x0d,0x0a
00008D5C                    	.code
                            	LM49:
00008D5C 42 92              		R1=2	// QImode move
00008D5D C8 D2              		[SP--]=R1	// QImode move
00008D5E 40 F0 66 8E        		call _disp_delay	// call without return value
00008D60 41 00              		SP = SP + 1	//SP
00000979                    	.debug
00000979 2E 00 73 00        		.dw '.stabn 0x44,0,64,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         36 00 34 00
         2C 00 00 00
         00 00      
0000098C 54 02 00 00        		.dd LM50-_disp
0000098E 0D 00 0A 00        		.dw 0x0d,0x0a
00008D61                    	.code
                            	LM50:
                            	L23:
00008D61 05 93              		R1=BP	// QImode move
00008D62 0D 05 14 00        		R2=BP+20
00008D64 05 97              		R3=BP	// QImode move
00008D65 0D 03 14 00        		R1=BP+20
00008D67 05 95              		R2=BP	// QImode move
00008D68 0D 07 14 00        		R3=BP+20
00008D6A 03 99              		R4=R3	// QImode move
00008D6B C4 94              		R2=[R4]	// QImode move
00008D6C 0A 07 01 00        		R3=R2+1
00008D6E 01 95              		R2=R1	// QImode move
00008D6F C2 D6              		[R2]=R3	// QImode move
00008D70 0F 9F 21 8D        		pc=L21	// Indirect jump
                            	L22:
                            	L20:
00000990                    	.debug
00000990 2E 00 73 00        		.dw '.stabn 0x44,0,72,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 32 00
         2C 00 00 00
         00 00      
000009A3 65 02 00 00        		.dd LM51-_disp
000009A5 0D 00 0A 00        		.dw 0x0d,0x0a
00008D72                    	.code
                            	LM51:
00008D72 0F 9F CB 8D        		pc=L14	// Indirect jump
                            	L15:
000009A7                    	.debug
000009A7 2E 00 73 00        		.dw '.stabn 0x44,0,74,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 34 00
         2C 00 00 00
         00 00      
000009BA 67 02 00 00        		.dd LM52-_disp
000009BC 0D 00 0A 00        		.dw 0x0d,0x0a
00008D74                    	.code
                            	LM52:
00008D74 05 93              		R1=BP	// QImode move
00008D75 0D 05 14 00        		R2=BP+20
00008D77 40 92              		R1=0	// QImode move
00008D78 02 97              		R3=R2	// QImode move
00008D79 C3 D2              		[R3]=R1	// QImode move
                            	L26:
00008D7A 05 93              		R1=BP	// QImode move
00008D7B 0D 05 14 00        		R2=BP+20
00008D7D 02 99              		R4=R2	// QImode move
00008D7E C4 92              		R1=[R4]	// QImode move
00008D7F 43 42              		CMP R1,3	// QImode compare
00008D80 04 AE 01 EE        		NSJNG L29	//QImode LE
         00 EE      
00008D83 0F 9F CB 8D        		pc=L14	// Indirect jump
                            	L29:
000009BE                    	.debug
000009BE 2E 00 73 00        		.dw '.stabn 0x44,0,76,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 36 00
         2C 00 00 00
         00 00      
000009D1 78 02 00 00        		.dd LM53-_disp
000009D3 0D 00 0A 00        		.dw 0x0d,0x0a
00008D85                    	.code
                            	LM53:
00008D85 05 95              		R2=BP	// QImode move
00008D86 0D 03 0C 00        		R1=BP+12
00008D88 05 95              		R2=BP	// QImode move
00008D89 0D 07 14 00        		R3=BP+20
00008D8B 03 99              		R4=R3	// QImode move
00008D8C C4 94              		R2=[R4]	// QImode move
00008D8D 02 03              		R1 = R1 + R2	//addqi3
00008D8E 01 97              		R3=R1	// QImode move
00008D8F C3 94              		R2=[R3]	// QImode move
00008D90 1A D5 05 70        		[28677]=R2	// QImode move
000009D5                    	.debug
000009D5 2E 00 73 00        		.dw '.stabn 0x44,0,77,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 37 00
         2C 00 00 00
         00 00      
000009E8 85 02 00 00        		.dd LM54-_disp
000009EA 0D 00 0A 00        		.dw 0x0d,0x0a
00008D92                    	.code
                            	LM54:
00008D92 05 93              		R1=BP	// QImode move
00008D93 0D 09 15 00        		R4=BP+21
00008D95 33 D8              		[bp+51]=R4	// QImode move
00008D96 05 95              		R2=BP	// QImode move
00008D97 0D 03 16 00        		R1=BP+22
00008D99 05 95              		R2=BP	// QImode move
00008D9A 0D 07 14 00        		R3=BP+20
00008D9C 03 99              		R4=R3	// QImode move
00008D9D C4 94              		R2=[R4]	// QImode move
00008D9E 02 97              		R3=R2	// QImode move
00008D9F 43 95              		R2=R3 lsl 1
00008DA0 02 03              		R1 = R1 + R2	//addqi3
00008DA1 01 95              		R2=R1	// QImode move
00008DA2 D2 96              		R3=[R2++]	// RD=[RS] HFmode, RD!=RS
00008DA3 CA 98              		R4=[R2--]
00008DA4 90 D8              		push R3,R4 to [sp]	// pushhf
00008DA5 40 F0 D5 99        		call __cvf2i1	// call with return value
00008DA7 42 00              		SP = SP + 2	//SP
00008DA8 33 96              		R3=[bp+51]	// QImode move
00008DA9 C3 D2              		[R3]=R1	// QImode move
000009EC                    	.debug
000009EC 2E 00 73 00        		.dw '.stabn 0x44,0,78,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 38 00
         2C 00 00 00
         00 00      
000009FF 9D 02 00 00        		.dd LM55-_disp
00000A01 0D 00 0A 00        		.dw 0x0d,0x0a
00008DAA                    	.code
                            	LM55:
00008DAA 05 93              		R1=BP	// QImode move
00008DAB 0D 05 15 00        		R2=BP+21
00008DAD 02 99              		R4=R2	// QImode move
00008DAE C4 96              		R3=[R4]	// QImode move
00008DAF 05 93              		R1=BP	// QImode move
00008DB0 03 03              		R1 = R1 + R3	//addqi3
00008DB1 01 97              		R3=R1	// QImode move
00008DB2 C3 94              		R2=[R3]	// QImode move
00008DB3 1A D5 00 70        		[28672]=R2	// QImode move
00000A03                    	.debug
00000A03 2E 00 73 00        		.dw '.stabn 0x44,0,79,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 39 00
         2C 00 00 00
         00 00      
00000A16 A8 02 00 00        		.dd LM56-_disp
00000A18 0D 00 0A 00        		.dw 0x0d,0x0a
00008DB5                    	.code
                            	LM56:
00008DB5 42 92              		R1=2	// QImode move
00008DB6 C8 D2              		[SP--]=R1	// QImode move
00008DB7 40 F0 66 8E        		call _disp_delay	// call without return value
00008DB9 41 00              		SP = SP + 1	//SP
00000A1A                    	.debug
00000A1A 2E 00 73 00        		.dw '.stabn 0x44,0,74,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         37 00 34 00
         2C 00 00 00
         00 00      
00000A2D AD 02 00 00        		.dd LM57-_disp
00000A2F 0D 00 0A 00        		.dw 0x0d,0x0a
00008DBA                    	.code
                            	LM57:
                            	L28:
00008DBA 05 93              		R1=BP	// QImode move
00008DBB 0D 05 14 00        		R2=BP+20
00008DBD 05 97              		R3=BP	// QImode move
00008DBE 0D 03 14 00        		R1=BP+20
00008DC0 05 95              		R2=BP	// QImode move
00008DC1 0D 07 14 00        		R3=BP+20
00008DC3 03 99              		R4=R3	// QImode move
00008DC4 C4 94              		R2=[R4]	// QImode move
00008DC5 0A 07 01 00        		R3=R2+1
00008DC7 01 95              		R2=R1	// QImode move
00008DC8 C2 D6              		[R2]=R3	// QImode move
00008DC9 0F 9F 7A 8D        		pc=L26	// Indirect jump
                            	L27:
                            	L25:
                            	L14:
00000A31                    	.debug
00000A31 2E 00 73 00        		.dw '.stabn 0x44,0,81,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 31 00
         2C 00 00 00
         00 00      
00000A44 BE 02 00 00        		.dd LM58-_disp
00000A46 0D 00 0A 00        		.dw 0x0d,0x0a
00008DCB                    	.code
                            	LM58:
00008DCB 05 93              		R1=BP	// QImode move
00008DCC 0D 05 14 00        		R2=BP+20
00008DCE 44 92              		R1=4	// QImode move
00008DCF 02 97              		R3=R2	// QImode move
00008DD0 C3 D2              		[R3]=R1	// QImode move
                            	L30:
00008DD1 05 93              		R1=BP	// QImode move
00008DD2 0D 05 14 00        		R2=BP+20
00008DD4 02 99              		R4=R2	// QImode move
00008DD5 C4 92              		R1=[R4]	// QImode move
00008DD6 47 42              		CMP R1,7	// QImode compare
00008DD7 04 AE 01 EE        		NSJNG L33	//QImode LE
         00 EE      
00008DDA 0F 9F 22 8E        		pc=L31	// Indirect jump
                            	L33:
00000A48                    	.debug
00000A48 2E 00 73 00        		.dw '.stabn 0x44,0,83,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 33 00
         2C 00 00 00
         00 00      
00000A5B CF 02 00 00        		.dd LM59-_disp
00000A5D 0D 00 0A 00        		.dw 0x0d,0x0a
00008DDC                    	.code
                            	LM59:
00008DDC 05 95              		R2=BP	// QImode move
00008DDD 0D 03 0C 00        		R1=BP+12
00008DDF 05 95              		R2=BP	// QImode move
00008DE0 0D 07 14 00        		R3=BP+20
00008DE2 03 99              		R4=R3	// QImode move
00008DE3 C4 94              		R2=[R4]	// QImode move
00008DE4 02 03              		R1 = R1 + R2	//addqi3
00008DE5 01 97              		R3=R1	// QImode move
00008DE6 C3 94              		R2=[R3]	// QImode move
00008DE7 1A D5 05 70        		[28677]=R2	// QImode move
00000A5F                    	.debug
00000A5F 2E 00 73 00        		.dw '.stabn 0x44,0,84,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 34 00
         2C 00 00 00
         00 00      
00000A72 DC 02 00 00        		.dd LM60-_disp
00000A74 0D 00 0A 00        		.dw 0x0d,0x0a
00008DE9                    	.code
                            	LM60:
00008DE9 05 93              		R1=BP	// QImode move
00008DEA 0D 09 15 00        		R4=BP+21
00008DEC 34 D8              		[bp+52]=R4	// QImode move
00008DED 05 95              		R2=BP	// QImode move
00008DEE 0D 03 16 00        		R1=BP+22
00008DF0 05 95              		R2=BP	// QImode move
00008DF1 0D 07 14 00        		R3=BP+20
00008DF3 03 99              		R4=R3	// QImode move
00008DF4 C4 94              		R2=[R4]	// QImode move
00008DF5 02 97              		R3=R2	// QImode move
00008DF6 43 95              		R2=R3 lsl 1
00008DF7 02 03              		R1 = R1 + R2	//addqi3
00008DF8 01 95              		R2=R1	// QImode move
00008DF9 D2 96              		R3=[R2++]	// RD=[RS] HFmode, RD!=RS
00008DFA CA 98              		R4=[R2--]
00008DFB 90 D8              		push R3,R4 to [sp]	// pushhf
00008DFC 40 F0 D5 99        		call __cvf2i1	// call with return value
00008DFE 42 00              		SP = SP + 2	//SP
00008DFF 34 96              		R3=[bp+52]	// QImode move
00008E00 C3 D2              		[R3]=R1	// QImode move
00000A76                    	.debug
00000A76 2E 00 73 00        		.dw '.stabn 0x44,0,85,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 35 00
         2C 00 00 00
         00 00      
00000A89 F4 02 00 00        		.dd LM61-_disp
00000A8B 0D 00 0A 00        		.dw 0x0d,0x0a
00008E01                    	.code
                            	LM61:
00008E01 05 93              		R1=BP	// QImode move
00008E02 0D 05 15 00        		R2=BP+21
00008E04 02 99              		R4=R2	// QImode move
00008E05 C4 96              		R3=[R4]	// QImode move
00008E06 05 93              		R1=BP	// QImode move
00008E07 03 03              		R1 = R1 + R3	//addqi3
00008E08 01 97              		R3=R1	// QImode move
00008E09 C3 94              		R2=[R3]	// QImode move
00008E0A 1A D5 00 70        		[28672]=R2	// QImode move
00000A8D                    	.debug
00000A8D 2E 00 73 00        		.dw '.stabn 0x44,0,86,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 36 00
         2C 00 00 00
         00 00      
00000AA0 FF 02 00 00        		.dd LM62-_disp
00000AA2 0D 00 0A 00        		.dw 0x0d,0x0a
00008E0C                    	.code
                            	LM62:
00008E0C 42 92              		R1=2	// QImode move
00008E0D C8 D2              		[SP--]=R1	// QImode move
00008E0E 40 F0 66 8E        		call _disp_delay	// call without return value
00008E10 41 00              		SP = SP + 1	//SP
00000AA4                    	.debug
00000AA4 2E 00 73 00        		.dw '.stabn 0x44,0,81,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 31 00
         2C 00 00 00
         00 00      
00000AB7 04 03 00 00        		.dd LM63-_disp
00000AB9 0D 00 0A 00        		.dw 0x0d,0x0a
00008E11                    	.code
                            	LM63:
                            	L32:
00008E11 05 93              		R1=BP	// QImode move
00008E12 0D 05 14 00        		R2=BP+20
00008E14 05 97              		R3=BP	// QImode move
00008E15 0D 03 14 00        		R1=BP+20
00008E17 05 95              		R2=BP	// QImode move
00008E18 0D 07 14 00        		R3=BP+20
00008E1A 03 99              		R4=R3	// QImode move
00008E1B C4 94              		R2=[R4]	// QImode move
00008E1C 0A 07 01 00        		R3=R2+1
00008E1E 01 95              		R2=R1	// QImode move
00008E1F C2 D6              		[R2]=R3	// QImode move
00008E20 0F 9F D1 8D        		pc=L30	// Indirect jump
                            	L31:
00000ABB                    	.debug
00000ABB 2E 00 73 00        		.dw '.stabn 0x44,0,88,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 38 00
         2C 00 00 00
         00 00      
00000ACE 15 03 00 00        		.dd LM64-_disp
00000AD0 0D 00 0A 00        		.dw 0x0d,0x0a
00008E22                    	.code
                            	LM64:
00008E22 11 93 46 02        		R1=[_apm]	// QImode move
00008E24 40 42              		CMP R1,0	// QImode test
00008E25 0B 4E 01 EE        		NSJNZ L34	//QImode NE
         00 EE      
00000AD2                    	.debug
00000AD2 2E 00 73 00        		.dw '.stabn 0x44,0,89,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         38 00 39 00
         2C 00 00 00
         00 00      
00000AE5 1B 03 00 00        		.dd LM65-_disp
00000AE7 0D 00 0A 00        		.dw 0x0d,0x0a
00008E28                    	.code
                            	LM65:
00008E28 05 93              		R1=BP	// QImode move
00008E29 0D 05 0A 00        		R2=BP+10
00008E2B 02 97              		R3=R2	// QImode move
00008E2C C3 92              		R1=[R3]	// QImode move
00008E2D 19 D3 00 70        		[28672]=R1	// QImode move
00008E2F 0F 9F 38 8E        		pc=L35	// Indirect jump
                            	L34:
00000AE9                    	.debug
00000AE9 2E 00 73 00        		.dw '.stabn 0x44,0,91,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 31 00
         2C 00 00 00
         00 00      
00000AFC 24 03 00 00        		.dd LM66-_disp
00000AFE 0D 00 0A 00        		.dw 0x0d,0x0a
00008E31                    	.code
                            	LM66:
00008E31 05 93              		R1=BP	// QImode move
00008E32 0D 05 0B 00        		R2=BP+11
00008E34 02 99              		R4=R2	// QImode move
00008E35 C4 92              		R1=[R4]	// QImode move
00008E36 19 D3 00 70        		[28672]=R1	// QImode move
                            	L35:
00000B00                    	.debug
00000B00 2E 00 73 00        		.dw '.stabn 0x44,0,92,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 32 00
         2C 00 00 00
         00 00      
00000B13 2B 03 00 00        		.dd LM67-_disp
00000B15 0D 00 0A 00        		.dw 0x0d,0x0a
00008E38                    	.code
                            	LM67:
00008E38 42 92              		R1=2	// QImode move
00008E39 C8 D2              		[SP--]=R1	// QImode move
00008E3A 40 F0 66 8E        		call _disp_delay	// call without return value
00008E3C 41 00              		SP = SP + 1	//SP
00000B17                    	.debug
00000B17 2E 00 73 00        		.dw '.stabn 0x44,0,93,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 33 00
         2C 00 00 00
         00 00      
00000B2A 30 03 00 00        		.dd LM68-_disp
00000B2C 0D 00 0A 00        		.dw 0x0d,0x0a
00008E3D                    	.code
                            	LM68:
00008E3D 11 93 44 02        		R1=[_dian]	// QImode move
00008E3F 41 42              		CMP R1,1	// QImode compare
00008E40 1C 4E 01 EE        		NSJNZ L36	//QImode NE
         00 EE      
00000B2E                    	.debug
00000B2E 2E 00 73 00        		.dw '.stabn 0x44,0,95,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 35 00
         2C 00 00 00
         00 00      
00000B41 36 03 00 00        		.dd LM69-_disp
00000B43 0D 00 0A 00        		.dw 0x0d,0x0a
00008E43                    	.code
                            	LM69:
00008E43 09 93 00 08        		R1=2048	// QImode move
00008E45 19 D3 05 70        		[28677]=R1	// QImode move
00000B45                    	.debug
00000B45 2E 00 73 00        		.dw '.stabn 0x44,0,96,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 36 00
         2C 00 00 00
         00 00      
00000B58 3A 03 00 00        		.dd LM70-_disp
00000B5A 0D 00 0A 00        		.dw 0x0d,0x0a
00008E47                    	.code
                            	LM70:
00008E47 09 63 00 80        		R1=(-32768)	// QImode move
00008E49 19 D3 00 70        		[28672]=R1	// QImode move
00000B5C                    	.debug
00000B5C 2E 00 73 00        		.dw '.stabn 0x44,0,97,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 37 00
         2C 00 00 00
         00 00      
00000B6F 3E 03 00 00        		.dd LM71-_disp
00000B71 0D 00 0A 00        		.dw 0x0d,0x0a
00008E4B                    	.code
                            	LM71:
00008E4B 42 92              		R1=2	// QImode move
00008E4C C8 D2              		[SP--]=R1	// QImode move
00008E4D 40 F0 66 8E        		call _disp_delay	// call without return value
00008E4F 41 00              		SP = SP + 1	//SP
00000B73                    	.debug
00000B73 2E 00 73 00        		.dw '.stabn 0x44,0,98,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 38 00
         2C 00 00 00
         00 00      
00000B86 43 03 00 00        		.dd LM72-_disp
00000B88 0D 00 0A 00        		.dw 0x0d,0x0a
00008E50                    	.code
                            	LM72:
00008E50 09 93 00 02        		R1=512	// QImode move
00008E52 19 D3 05 70        		[28677]=R1	// QImode move
00000B8A                    	.debug
00000B8A 2E 00 73 00        		.dw '.stabn 0x44,0,99,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         39 00 39 00
         2C 00 00 00
         00 00      
00000B9D 47 03 00 00        		.dd LM73-_disp
00000B9F 0D 00 0A 00        		.dw 0x0d,0x0a
00008E54                    	.code
                            	LM73:
00008E54 09 63 00 80        		R1=(-32768)	// QImode move
00008E56 19 D3 00 70        		[28672]=R1	// QImode move
00000BA1                    	.debug
00000BA1 2E 00 73 00        		.dw '.stabn 0x44,0,100,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         30 00 2C 00
         00 00 00 00
00000BB5 4B 03 00 00        		.dd LM74-_disp
00000BB7 0D 00 0A 00        		.dw 0x0d,0x0a
00008E58                    	.code
                            	LM74:
00008E58 42 92              		R1=2	// QImode move
00008E59 C8 D2              		[SP--]=R1	// QImode move
00008E5A 40 F0 66 8E        		call _disp_delay	// call without return value
00008E5C 41 00              		SP = SP + 1	//SP
                            	L36:
00000BB9                    	.debug
00000BB9 2E 00 73 00        		.dw '.stabn 0x44,0,102,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         32 00 2C 00
         00 00 00 00
00000BCD 50 03 00 00        		.dd LM75-_disp
00000BCF 0D 00 0A 00        		.dw 0x0d,0x0a
00008E5D                    	.code
                            	LM75:
00008E5D 40 92              		R1=0	// QImode move
00008E5E 19 D3 05 70        		[28677]=R1	// QImode move
00000BD1                    	.debug
00000BD1 2E 00 73 00        		.dw '.stabn 0x44,0,103,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         33 00 2C 00
         00 00 00 00
00000BE5 53 03 00 00        		.dd LM76-_disp
00000BE7 0D 00 0A 00        		.dw 0x0d,0x0a
00008E60                    	.code
                            	LM76:
00008E60 40 92              		R1=0	// QImode move
00008E61 19 D3 00 70        		[28672]=R1	// QImode move
00000BE9                    	.debug
00000BE9 2E 00 73 00        		.dw '.stabn 0x44,0,104,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         34 00 2C 00
         00 00 00 00
00000BFD 56 03 00 00        		.dd LM77-_disp
00000BFF 0D 00 0A 00        		.dw 0x0d,0x0a
00008E63                    	.code
                            	LM77:
                            	LBE2:
00000C01                    	.debug
00000C01 2E 00 73 00        		.dw '.stabn 0x44,0,104,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         34 00 2C 00
         00 00 00 00
00000C15 56 03 00 00        		.dd LM78-_disp
00000C17 0D 00 0A 00        		.dw 0x0d,0x0a
00008E63                    	.code
                            	LM78:
                            	L3:
                            	
00008E63 75 00              		sp+=53
00008E64 88 98              		pop bp from [sp]
00008E65 90 9A              		retf
                            		.endp	// end of disp
                            	
00000C19                    	.debug
00000C19 2E 00 73 00        		.dw '.stabs "t:p1",160,0,0,56',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         74 00 3A 00
         70 00 31 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         35 00 36 00
         0D 00 0A 00
00008E66                    	.CODE
00000C33                    	.debug
00000C33 2E 00 73 00        		.dw '.stabs "h:p1",160,0,0,57',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         68 00 3A 00
         70 00 31 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         35 00 37 00
         0D 00 0A 00
00008E66                    	.CODE
00000C4D                    	.debug
00000C4D 2E 00 73 00        		.dw '.stabs "m:p1",160,0,0,58',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6D 00 3A 00
         70 00 31 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         35 00 38 00
         0D 00 0A 00
00008E66                    	.CODE
00000C67                    	.debug
00000C67 2E 00 73 00        		.dw '.stabs "s:p1",160,0,0,59',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         73 00 3A 00
         70 00 31 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         35 00 39 00
         0D 00 0A 00
00008E66                    	.CODE
00000C81                    	.debug
00000C81 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000C93 07 00 00 00        		.dd LBB2-_disp
00000C95 0D 00 0A 00        		.dw 0x0d,0x0a
00008E66                    	.code
00000C97                    	.debug
00000C97 2E 00 73 00        		.dw '.stabs "d:20=ar1;0;11;1",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 3A 00
         32 00 30 00
         3D 00 61 00
         72 00 31 00
         3B 00 30 00
         3B 00 31 00
         31 00 3B 00
         31 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008E66                    	.CODE
00000CBB                    	.debug
00000CBB 2E 00 73 00        		.dw '.stabs "dig:21=ar1;0;7;1",128,0,0,12',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         67 00 3A 00
         32 00 31 00
         3D 00 61 00
         72 00 31 00
         3B 00 30 00
         3B 00 37 00
         3B 00 31 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         31 00 32 00
         0D 00 0A 00
00008E66                    	.CODE
00000CE1                    	.debug
00000CE1 2E 00 73 00        		.dw '.stabs "i:1",128,0,0,20',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         69 00 3A 00
         31 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 32 00
         30 00 0D 00
         0A 00      
00008E66                    	.CODE
00000CFA                    	.debug
00000CFA 2E 00 73 00        		.dw '.stabs "mm:1",128,0,0,21',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6D 00 6D 00
         3A 00 31 00
         22 00 2C 00
         31 00 32 00
         38 00 2C 00
         30 00 2C 00
         30 00 2C 00
         32 00 31 00
         0D 00 0A 00
00008E66                    	.CODE
00000D14                    	.debug
00000D14 2E 00 73 00        		.dw '.stabs "dis:22=ar1;0;7;12",128,0,0,22',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         73 00 3A 00
         32 00 32 00
         3D 00 61 00
         72 00 31 00
         3B 00 30 00
         3B 00 37 00
         3B 00 31 00
         32 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 32 00
         32 00 0D 00
         0A 00      
00008E66                    	.CODE
00000D3B                    	.debug
00000D3B 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000D4D 56 03 00 00        		.dd LBE2-_disp
00000D4F 0D 00 0A 00        		.dw 0x0d,0x0a
00008E66                    	.code
00000D51                    	.debug
00000D51 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000D5A 59 03 00 00        		.dd LME2-_disp
00000D5C 0D 00 0A 00        		.dw 0x0d,0x0a
00008E66                    	.code
                            	LME2:
00008E66                    	.code
00000D5E                    	.debug
00000D5E 2E 00 73 00        		.dw '.stabs "disp_delay:F19",36,0,0,',0,0,offset _disp_delay,seg _disp_delay,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         73 00 70 00
         5F 00 64 00
         65 00 6C 00
         61 00 79 00
         3A 00 46 00
         31 00 39 00
         22 00 2C 00
         33 00 36 00
         2C 00 30 00
         2C 00 30 00
         2C 00 00 00
         00 00 80 03
         00 00 0D 00
         0A 00      
00008E66                    	.CODE
                            	.public _disp_delay
                            	_disp_delay:	.proc
00000D83                    	.debug
00000D83 2E 00 73 00        		.dw '.stabn 0x44,0,106,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         36 00 2C 00
         00 00 00 00
00000D97 00 00 00 00        		.dd LM79-_disp_delay
00000D99 0D 00 0A 00        		.dw 0x0d,0x0a
00008E66                    	.code
                            	LM79:
                            		// total=3, vars=3
                            		// frame_pointer_needed: 1
00008E66 88 DA              		push bp to [sp]
00008E67 43 20              		sp-=3
00008E68 08 0B 01 00        		bp=sp+1
                            	
00008E6A 0D 03 06 00        		R1=BP+6
00000D9B                    	.debug
00000D9B 2E 00 73 00        		.dw '.stabn 0x44,0,107,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         37 00 2C 00
         00 00 00 00
00000DAF 06 00 00 00        		.dd LM80-_disp_delay
00000DB1 0D 00 0A 00        		.dw 0x0d,0x0a
00008E6C                    	.code
                            	LM80:
                            	LBB3:
00008E6C 40 94              		R2=0	// QImode move
00008E6D C5 D4              		[BP]=R2	// QImode move
00008E6E 05 95              		R2=BP	// QImode move
00008E6F 0D 07 01 00        		R3=BP+1
00008E71 40 94              		R2=0	// QImode move
00008E72 03 99              		R4=R3	// QImode move
00008E73 C4 D4              		[R4]=R2	// QImode move
00000DB3                    	.debug
00000DB3 2E 00 73 00        		.dw '.stabn 0x44,0,108,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         38 00 2C 00
         00 00 00 00
00000DC7 0E 00 00 00        		.dd LM81-_disp_delay
00000DC9 0D 00 0A 00        		.dw 0x0d,0x0a
00008E74                    	.code
                            	LM81:
00008E74 40 94              		R2=0	// QImode move
00008E75 C5 D4              		[BP]=R2	// QImode move
                            	L50:
00008E76 C5 94              		R2=[BP]	// QImode move
00008E77 01 97              		R3=R1	// QImode move
00008E78 C3 44              		CMP R2,[R3]	// QImode compare
00008E79 04 3E 01 EE        		NSJL L53	//QImode LT
         00 EE      
00008E7C 0F 9F AB 8E        		pc=L51	// Indirect jump
                            	L53:
00000DCB                    	.debug
00000DCB 2E 00 73 00        		.dw '.stabn 0x44,0,110,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         30 00 2C 00
         00 00 00 00
00000DDF 18 00 00 00        		.dd LM82-_disp_delay
00000DE1 0D 00 0A 00        		.dw 0x0d,0x0a
00008E7E                    	.code
                            	LM82:
00008E7E 05 95              		R2=BP	// QImode move
00008E7F 0D 07 01 00        		R3=BP+1
00008E81 40 94              		R2=0	// QImode move
00008E82 03 99              		R4=R3	// QImode move
00008E83 C4 D4              		[R4]=R2	// QImode move
                            	L54:
00008E84 05 95              		R2=BP	// QImode move
00008E85 0D 07 01 00        		R3=BP+1
00008E87 03 99              		R4=R3	// QImode move
00008E88 C4 94              		R2=[R4]	// QImode move
00008E89 0A 45 EF 00        		CMP R2,239	// QImode compare
00008E8B 04 AE 01 EE        		NSJNG L57	//QImode LE
         00 EE      
00008E8E 0F 9F A5 8E        		pc=L52	// Indirect jump
                            	L57:
00000DE3                    	.debug
00000DE3 2E 00 73 00        		.dw '.stabn 0x44,0,111,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         31 00 2C 00
         00 00 00 00
00000DF7 2A 00 00 00        		.dd LM83-_disp_delay
00000DF9 0D 00 0A 00        		.dw 0x0d,0x0a
00008E90                    	.code
                            	LM83:
00008E90 41 94              		R2=1	// QImode move
00008E91 1A D5 12 70        		[28690]=R2	// QImode move
00000DFB                    	.debug
00000DFB 2E 00 73 00        		.dw '.stabn 0x44,0,110,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         30 00 2C 00
         00 00 00 00
00000E0F 2D 00 00 00        		.dd LM84-_disp_delay
00000E11 0D 00 0A 00        		.dw 0x0d,0x0a
00008E93                    	.code
                            	LM84:
                            	L56:
00008E93 05 95              		R2=BP	// QImode move
00008E94 0D 07 01 00        		R3=BP+1
00008E96 05 99              		R4=BP	// QImode move
00008E97 0D 05 01 00        		R2=BP+1
00008E99 05 97              		R3=BP	// QImode move
00008E9A 0D 07 01 00        		R3=BP+1
00008E9C 02 D6              		[bp+2]=R3	// QImode move
00008E9D 02 98              		R4=[bp+2]	// QImode move
00008E9E C4 96              		R3=[R4]	// QImode move
00008E9F 0B 09 01 00        		R4=R3+1
00008EA1 02 97              		R3=R2	// QImode move
00008EA2 C3 D8              		[R3]=R4	// QImode move
00008EA3 0F 9F 84 8E        		pc=L54	// Indirect jump
                            	L55:
00000E13                    	.debug
00000E13 2E 00 73 00        		.dw '.stabn 0x44,0,108,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 30 00
         38 00 2C 00
         00 00 00 00
00000E27 3F 00 00 00        		.dd LM85-_disp_delay
00000E29 0D 00 0A 00        		.dw 0x0d,0x0a
00008EA5                    	.code
                            	LM85:
                            	L52:
00008EA5 C5 94              		R2=[BP]	// QImode move
00008EA6 0A 07 01 00        		R3=R2+1
00008EA8 C5 D6              		[BP]=R3	// QImode move
00008EA9 0F 9F 76 8E        		pc=L50	// Indirect jump
                            	L51:
00000E2B                    	.debug
00000E2B 2E 00 73 00        		.dw '.stabn 0x44,0,113,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         33 00 2C 00
         00 00 00 00
00000E3F 45 00 00 00        		.dd LM86-_disp_delay
00000E41 0D 00 0A 00        		.dw 0x0d,0x0a
00008EAB                    	.code
                            	LM86:
                            	LBE3:
00000E43                    	.debug
00000E43 2E 00 73 00        		.dw '.stabn 0x44,0,113,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         33 00 2C 00
         00 00 00 00
00000E57 45 00 00 00        		.dd LM87-_disp_delay
00000E59 0D 00 0A 00        		.dw 0x0d,0x0a
00008EAB                    	.code
                            	LM87:
                            	L49:
                            	
00008EAB 43 00              		sp+=3
00008EAC 88 98              		pop bp from [sp]
00008EAD 90 9A              		retf
                            		.endp	// end of disp_delay
                            	
00000E5B                    	.debug
00000E5B 2E 00 73 00        		.dw '.stabs "j:p1",160,0,0,6',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         6A 00 3A 00
         70 00 31 00
         22 00 2C 00
         31 00 36 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         36 00 0D 00
         0A 00      
00008EAE                    	.CODE
00000E74                    	.debug
00000E74 2E 00 73 00        		.dw '.stabn 0xc0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 63 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000E86 06 00 00 00        		.dd LBB3-_disp_delay
00000E88 0D 00 0A 00        		.dw 0x0d,0x0a
00008EAE                    	.code
00000E8A                    	.debug
00000E8A 2E 00 73 00        		.dw '.stabs "DelayValuel:1",128,0,0,0',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         44 00 65 00
         6C 00 61 00
         79 00 56 00
         61 00 6C 00
         75 00 65 00
         6C 00 3A 00
         31 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 30 00
         0D 00 0A 00
00008EAE                    	.CODE
00000EAC                    	.debug
00000EAC 2E 00 73 00        		.dw '.stabs "DelayValue2:1",128,0,0,1',0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         44 00 65 00
         6C 00 61 00
         79 00 56 00
         61 00 6C 00
         75 00 65 00
         32 00 3A 00
         31 00 22 00
         2C 00 31 00
         32 00 38 00
         2C 00 30 00
         2C 00 30 00
         2C 00 31 00
         0D 00 0A 00
00008EAE                    	.CODE
00000ECE                    	.debug
00000ECE 2E 00 73 00        		.dw '.stabn 0xe0,0,0,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 65 00
         30 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
00000EE0 45 00 00 00        		.dd LBE3-_disp_delay
00000EE2 0D 00 0A 00        		.dw 0x0d,0x0a
00008EAE                    	.code
00000EE4                    	.debug
00000EE4 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000EED 48 00 00 00        		.dd LME3-_disp_delay
00000EEF 0D 00 0A 00        		.dw 0x0d,0x0a
00008EAE                    	.code
                            	LME3:
00008EAE                    	.code
00000EF1                    	.debug
00000EF1 2E 00 73 00        		.dw '.stabs "disp_ID:F19",36,0,0,',0,0,offset _disp_ID,seg _disp_ID,0x0d,0x0a
         74 00 61 00
         62 00 73 00
         20 00 22 00
         64 00 69 00
         73 00 70 00
         5F 00 49 00
         44 00 3A 00
         46 00 31 00
         39 00 22 00
         2C 00 33 00
         36 00 2C 00
         30 00 2C 00
         30 00 2C 00
         00 00 00 00
         C8 03 00 00
         0D 00 0A 00
00008EAE                    	.CODE
                            	.public _disp_ID
                            	_disp_ID:	.proc
00000F13                    	.debug
00000F13 2E 00 73 00        		.dw '.stabn 0x44,0,116,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         36 00 2C 00
         00 00 00 00
00000F27 00 00 00 00        		.dd LM88-_disp_ID
00000F29 0D 00 0A 00        		.dw 0x0d,0x0a
00008EAE                    	.code
                            	LM88:
                            		// total=1, vars=1
                            		// frame_pointer_needed: 1
00008EAE 88 DA              		push bp to [sp]
00008EAF 41 20              		sp-=1
00008EB0 08 0B 01 00        		bp=sp+1
                            	
00008EB2 0D 03 04 00        		R1=BP+4
00008EB4 C5 D2              		[BP]=R1	// QImode move
00000F2B                    	.debug
00000F2B 2E 00 73 00        		.dw '.stabn 0x44,0,117,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         37 00 2C 00
         00 00 00 00
00000F3F 07 00 00 00        		.dd LM89-_disp_ID
00000F41 0D 00 0A 00        		.dw 0x0d,0x0a
00008EB5                    	.code
                            	LM89:
00008EB5 41 92              		R1=1	// QImode move
00008EB6 C8 D2              		[SP--]=R1	// QImode move
00008EB7 42 92              		R1=2	// QImode move
00008EB8 C8 D2              		[SP--]=R1	// QImode move
00008EB9 44 92              		R1=4	// QImode move
00008EBA C8 D2              		[SP--]=R1	// QImode move
00008EBB 41 92              		R1=1	// QImode move
00008EBC C8 D2              		[SP--]=R1	// QImode move
00008EBD 40 F0 0D 8B        		call _disp	// call without return value
00008EBF 44 00              		SP = SP + 4	//SP
00000F43                    	.debug
00000F43 2E 00 73 00        		.dw '.stabn 0x44,0,118,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         38 00 2C 00
         00 00 00 00
00000F57 12 00 00 00        		.dd LM90-_disp_ID
00000F59 0D 00 0A 00        		.dw 0x0d,0x0a
00008EC0                    	.code
                            	LM90:
00000F5B                    	.debug
00000F5B 2E 00 73 00        		.dw '.stabn 0x44,0,118,',0,0
         74 00 61 00
         62 00 6E 00
         20 00 30 00
         78 00 34 00
         34 00 2C 00
         30 00 2C 00
         31 00 31 00
         38 00 2C 00
         00 00 00 00
00000F6F 12 00 00 00        		.dd LM91-_disp_ID
00000F71 0D 00 0A 00        		.dw 0x0d,0x0a
00008EC0                    	.code
                            	LM91:
                            	L60:
                            	
00008EC0 41 00              		sp+=1
00008EC1 88 98              		pop bp from [sp]
00008EC2 90 9A              		retf
                            		.endp	// end of disp_ID
                            	
00000F73                    	.debug
00000F73 2E 00 73 00        		.dw '.stabf ',0,0
         74 00 61 00
         62 00 66 00
         20 00 00 00
         00 00      
00000F7C 15 00 00 00        		.dd LME4-_disp_ID
00000F7E 0D 00 0A 00        		.dw 0x0d,0x0a
00008EC3                    	.code
                            	LME4:
00000246                    	.iram
                            	.public _apm
                            	_apm:
00000246 00 00              		.dw 0
                            	.external _num
                            	.external __BlockCopy
                            	.external __cvf2i1
                            	.external __cvi1f2
                            	.external __divi1
                            	.external __modi1
                            		.end
0 error(s), 0 warning(s).



