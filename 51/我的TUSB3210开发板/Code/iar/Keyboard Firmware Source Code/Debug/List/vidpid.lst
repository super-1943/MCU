###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.51A/W32 for 8051                28/May/2010  14:43:53 #
# Copyright 2004-2009 IAR Systems AB.                                         #
# Time limited license: 20 days left                                          #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\AllProject\51\Keyboard Firmware Source          #
#                          Code\vidpid.c                                      #
#    Command line       =  "E:\AllProject\51\Keyboard Firmware Source         #
#                          Code\vidpid.c" -lC "E:\AllProject\51\Keyboard      #
#                          Firmware Source Code\Debug\List\" -lA              #
#                          "E:\AllProject\51\Keyboard Firmware Source         #
#                          Code\Debug\List\" -o "E:\AllProject\51\Keyboard    #
#                          Firmware Source Code\Debug\Obj\" -e                #
#                          --char_is_signed --no_cse --no_unroll --no_inline  #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large --code_model=near   #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8 -I      #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.3 Evaluation version\8051\INC\" -I "C:\Program   #
#                          Files\IAR Systems\Embedded Workbench 5.3           #
#                          Evaluation version\8051\INC\CLIB\" -Ol             #
#    List file          =  E:\AllProject\51\Keyboard Firmware Source          #
#                          Code\Debug\List\vidpid.lst                         #
#    Object file        =  E:\AllProject\51\Keyboard Firmware Source          #
#                          Code\Debug\Obj\vidpid.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\AllProject\51\Keyboard Firmware Source Code\vidpid.c
      1          /******************************************************************************
      2           *                         VAULT INFORMATION SERVICES                         *
      3           *                          TEXAS INSTRUMENTS, INC.                           *
      4           *----------------------------------------------------------------------------*
      5           *     "VID/PID Selection Detection Module for TUSB2136 Keyboard Demo App"    *
      6           *                                                                            * 
      7           * Programmed by: Craig Steiner, VIS (csteiner@vaultbbs.com)                  * 
      8           * Develop Date:  30/Sep/2000                                                 *  
      9           *----------------------------------------------------------------------------*
     10           * Description: This module is a component of the TUSB2136 Demo App.  It      *
     11           *   detects the setting provided on the s0-s3 pins and chooses the product   *
     12           *   configuration base on that setting.                                      *
     13           *                                                                            * 
     14           * NOTE: The end user may easily modify the funcDefs[] structure defined below* 
     15           *       to support his/her product without requiring extensive modification  *  
     16           *       to the rest of the source code.                                      *   
     17           ******************************************************************************/
     18          
     19          #include <io51.h>
     20          #include "types.h"
     21          #include "tusb2136.h"
     22          
     23          /***************************************************************************
     24           * Structure: FUNCDEF Structure                                            *
     25           * Programmer: Craig Steiner (csteiner@vaultbbs.com)                       *
     26           * Description: The funcDefs[] structure contains the VID/PID settings for *
     27           *    each possible s0123 setting. The s0123 is read at boot-time from     *
     28           *    pins S0-S3 in order to obtain a given "personality" depending on the *
     29           *    way these pins are tied.  This allows a single firmware to handle a  * 
     30           *    variety of distinct manufacturer/products that essentially work the  *  
     31           *    same way.                                                            *   
     32           *                                                                         *    
     33           *    The last entry in the structure should use an s0123 setting of 0xFF  *    
     34           *    to indicate the "default" setting.  The parameters contained in this *    
     35           *    entry will be used if the value contained on s0123 is not found in   *     
     36           *    the structure.                                                       *      
     37           *                                                                         *     
     38           *    The structure definition for FUNCDEF_STRUCT is contained in the      *     
     39           *    types.h include file.                                                *      
     40           ***************************************************************************/
     41          

   \                                 In  segment CODE_C, align 1
     42          struct FUNCDEF_STRUCT code funcDefs[17] = {
   \                     funcDefs:
   \   000000   00           DB 0
   \   000001   51040100     DW 1105, 1, 1105, 16, 4369, `?<Constant "Texas Instruments">`
   \            51041000
   \            1111....
   \   00000D   ....0000     DW `?<Constant "Texas Instruments TUS...">`, 0H
   \   000011   01           DB 1
   \   000012   51040200     DW 1105, 2, 1105, 32, 8738, `?<Constant "Texas Instruments">`
   \            51042000
   \            2222....
   \   00001E   ....0000     DW `?<Constant "Texas Instruments TUS...">_1`, 0H
   \   000022   02           DB 2
   \   000023   51040300     DW 1105, 3, 1105, 48, 13107, `?<Constant "Texas Instruments">`
   \            51043000
   \            3333....
   \   00002F   ....0000     DW `?<Constant "Texas Instruments TUS...">_2`, 0H
   \   000033   03           DB 3
   \   000034   51040400     DW 1105, 4, 1105, 64, 17476, `?<Constant "Texas Instruments">`
   \            51044000
   \            4444....
   \   000040   ....0000     DW `?<Constant "Texas Instruments TUS...">_3`, 0H
   \   000044   FF           DB 255
   \   000045   5104EEEE     DW 1105, 61166, 1105, 65535, 65535, `?<Constant "Texas Instruments">`
   \            5104FFFF
   \            FFFF....
   \   000051   ....0000     DW `?<Constant "Texas Instruments TUS...">_4`, 0H
   \   000055   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000065   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000075   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000085   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000095   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   0000A5   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   0000B5   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   0000C5   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   0000D5   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   0000E5   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   0000F5   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000105   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
   \            00000000
   \   000115   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \            00000000
     43          	// VID/PID Setting 0 *******************************
     44          	{0, // S0S1 value 
     45          	0x0451, 0x0001, // HUB VID/PID */
     46          	0x0451, 0x0010, // FNC VID/PID */
     47          	0x1111,	// FNC revision level
     48          	"Texas Instruments",
     49          	"Texas Instruments TUSB2136 Keyboard (Ver 0)",
     50          	NULL},
     51          
     52          	// VID/PID Setting 1 ********************************
     53          	{1, // S0S1 value 
     54          	0x0451, 0x0002, // HUB VID/PID */
     55          	0x0451, 0x0020, // FNC VID/PID */
     56          	0x2222,	// FNC revision level
     57          	"Texas Instruments",
     58          	"Texas Instruments TUSB2136 EVM DEMO 1 (Ver 1)",
     59          	NULL},
     60          	
     61          	// VID/PID Setting 2 ********************************
     62          	{2, // S0S1 value 
     63          	0x0451, 0x0003, // HUB VID/PID */
     64          	0x0451, 0x0030, // FNC VID/PID */
     65          	0x3333,	// FNC revision level
     66          	"Texas Instruments",
     67          	"Texas Instruments TUSB2136 EVM DEMO 2 (Ver 2)",
     68          	NULL},
     69          
     70          	// VID/PID Setting 3 ********************************
     71          	{3, // S0S1 value 
     72          	0x0451, 0x0004, // HUB VID/PID */
     73          	0x0451, 0x0040, // FNC VID/PID */
     74          	0x4444,	// FNC revision level
     75          	"Texas Instruments",
     76          //	"Texas Instruments TUSB2136 for NewMotion One-Key Keyboard (Ver 3)",
     77          	"Texas Instruments TUSB2136 for Flat Keyboard (Ver 3)",
     78          	NULL},
     79          
     80          	// VID/PID DEFAULT SETTING ***************************	
     81          	// ** WARNING: YOU MAY CHANGE THE DEFAULT PARAMETERS,
     82          	//             BUT DO NOT REMOVE THIS ENTRY.  THE CODE
     83          	//             MUST BE ABLE TO USE A DEFAULT VALUE TO
     84          	//             HAVE VALID PARAMETERS IF NONE OF THE
     85          	//             PREVIOUS ENTRIES HANDLE THE DETECTED
     86          	//             S0123 SETTING.
     87          	// ***************************************************
     88          	{0xFF, // S0S1 value (default value = 0xFF)
     89          	0x0451, 0xEEEE, // HUB VID/PID */
     90          	0x0451, 0xFFFF, // FNC VID/PID */
     91          	0xFFFF,	// FNC revision level
     92          	"Texas Instruments",
     93          	"Texas Instruments TUSB2136 Generic Setting",
     94          	NULL}
     95          	};
     96          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          unsigned char s0123; // The s0132 value read from VIDSTA at boot time
   \                     s0123:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          unsigned char fncOffset; // The offset into the funcDefs structure, used in 
   \                     fncOffset:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          						// other modules to directly access the information
    100          						// from the funcDefs[] structure.
    101          
    102          /***************************************************************************
    103           * Function:   GetVidPidSetting                                            *
    104           * Programmer: Craig Steiner (csteiner@vaultbbs.com)                       *
    105           * Description: Obtains the setting from S0-S3 (P3.0/P3.1).  This is then  *
    106           *    used to select the various VID/PID settings for the hub and function.*
    107           ***************************************************************************/
    108          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    109          void GetVidPidSetting(void)
   \                     GetVidPidSetting:
    110          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    111          int i;
    112          	// Obtain the VID/PID setting from mapped memory.
    113          	for(i=0; i<50; i++); // wait for stable of s0-s3
   \   000004   7800         MOV     R0,#0x0
   \   000006   7900         MOV     R1,#0x0
   \   000008   8008         SJMP    ??GetVidPidSetting_0
   \                     ??GetVidPidSetting_1:
   \   00000A   E8           MOV     A,R0
   \   00000B   2401         ADD     A,#0x1
   \   00000D   F8           MOV     R0,A
   \   00000E   E9           MOV     A,R1
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \                     ??GetVidPidSetting_0:
   \   000012   C3           CLR     C
   \   000013   E8           MOV     A,R0
   \   000014   9432         SUBB    A,#0x32
   \   000016   E9           MOV     A,R1
   \   000017   9400         SUBB    A,#0x0
   \   000019   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00001B   65D0         XRL     A,PSW
   \   00001D   33           RLC     A
   \   00001E   40EA         JC      ??GetVidPidSetting_1
    114          	
    115          	s0123 = 1; // modified for TUSB3210 Keyboard EVM, Aug 7 2001
   \   000020   7401         MOV     A,#0x1
   \   000022   90....       MOV     DPTR,#s0123
   \   000025   F0           MOVX    @DPTR,A
    116          	
    117          	// We now must search the funcDefs[] structure for the detected
    118          	// s0123 setting.  The variable used as the index in the for... loop
    119          	// is the global fncOffset variable.  Thus when the loop is complete
    120          	// the fncOffset variable will point to the entry in fncDefs[] that
    121          	// contains the selected configuration information.  We limit the
    122          	// loop at 17 so that a structure without a terminating 0xFF entry
    123          	// does not cause an infinite crash/loop.
    124          	
    125          	for(fncOffset = 0; fncOffset < 17; fncOffset++ )
   \   000026   7400         MOV     A,#0x0
   \   000028   90....       MOV     DPTR,#fncOffset
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   8007         SJMP    ??GetVidPidSetting_2
   \                     ??GetVidPidSetting_3:
   \   00002E   90....       MOV     DPTR,#fncOffset
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2401         ADD     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
   \                     ??GetVidPidSetting_2:
   \   000035   90....       MOV     DPTR,#fncOffset
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C3           CLR     C
   \   00003A   9411         SUBB    A,#0x11
   \   00003C   505C         JNC     ??GetVidPidSetting_4
    126          		if(funcDefs[fncOffset].s0123 == s0123 || funcDefs[fncOffset].s0123 == 0xFF )
   \   00003E   90....       MOV     DPTR,#fncOffset
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   E8           MOV     A,R0
   \   000046   75F011       MOV     B,#0x11
   \   000049   A4           MUL     AB
   \   00004A   C8           XCH     A,R0
   \   00004B   AAF0         MOV     R2,B
   \   00004D   75F000       MOV     B,#0x0
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   FA           MOV     R2,A
   \   000053   75F011       MOV     B,#0x11
   \   000056   E9           MOV     A,R1
   \   000057   A4           MUL     AB
   \   000058   2A           ADD     A,R2
   \   000059   F9           MOV     R1,A
   \   00005A   E8           MOV     A,R0
   \   00005B   24..         ADD     A,#(funcDefs & 0xff)
   \   00005D   F582         MOV     DPL,A
   \   00005F   E9           MOV     A,R1
   \   000060   34..         ADDC    A,#((funcDefs >> 8) & 0xff)
   \   000062   F583         MOV     DPH,A
   \   000064   E4           CLR     A
   \   000065   93           MOVC    A,@A+DPTR
   \   000066   FA           MOV     R2,A
   \   000067   90....       MOV     DPTR,#s0123
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6A           XRL     A,R2
   \   00006C   602C         JZ      ??GetVidPidSetting_4
   \   00006E   90....       MOV     DPTR,#fncOffset
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   7900         MOV     R1,#0x0
   \   000075   E8           MOV     A,R0
   \   000076   75F011       MOV     B,#0x11
   \   000079   A4           MUL     AB
   \   00007A   C8           XCH     A,R0
   \   00007B   AAF0         MOV     R2,B
   \   00007D   75F000       MOV     B,#0x0
   \   000080   A4           MUL     AB
   \   000081   2A           ADD     A,R2
   \   000082   FA           MOV     R2,A
   \   000083   75F011       MOV     B,#0x11
   \   000086   E9           MOV     A,R1
   \   000087   A4           MUL     AB
   \   000088   2A           ADD     A,R2
   \   000089   F9           MOV     R1,A
   \   00008A   E8           MOV     A,R0
   \   00008B   24..         ADD     A,#(funcDefs & 0xff)
   \   00008D   F582         MOV     DPL,A
   \   00008F   E9           MOV     A,R1
   \   000090   34..         ADDC    A,#((funcDefs >> 8) & 0xff)
   \   000092   F583         MOV     DPH,A
   \   000094   E4           CLR     A
   \   000095   93           MOVC    A,@A+DPTR
   \   000096   64FF         XRL     A,#0xff
   \   000098   7094         JNZ     ??GetVidPidSetting_3
    127          			break;
    128          }
   \                     ??GetVidPidSetting_4:
   \   00009A   D083         POP     DPH
   \   00009C   D082         POP     DPL
   \   00009E   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Texas Instruments`:
   \   000000   54657861     DB "Texas Instruments"
   \            7320496E
   \            73747275
   \            6D656E74
   \            7300    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Texas Instruments_1`:
   \   000000   54657861     DB "Texas Instruments TUSB2136 Keyboard (Ver 0)"
   \            7320496E
   \            73747275
   \            6D656E74
   \            73205455
   \            53423231
   \            3336204B
   \            6579626F
   \            61726420
   \            28566572
   \            20302900

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Texas Instruments_2`:
   \   000000   54657861     DB "Texas Instruments TUSB2136 EVM DEMO 1 (Ver 1)"
   \            7320496E
   \            73747275
   \            6D656E74
   \            73205455
   \            53423231
   \            33362045
   \            564D2044
   \            454D4F20
   \            31202856
   \            65722031
   \            2900    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Texas Instruments_3`:
   \   000000   54657861     DB "Texas Instruments TUSB2136 EVM DEMO 2 (Ver 2)"
   \            7320496E
   \            73747275
   \            6D656E74
   \            73205455
   \            53423231
   \            33362045
   \            564D2044
   \            454D4F20
   \            32202856
   \            65722032
   \            2900    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Texas Instruments_4`:
   \   000000   54657861     DB 54H, 65H, 78H, 61H, 73H, 20H, 49H, 6EH
   \            7320496E
   \   000008   73747275     DB 73H, 74H, 72H, 75H, 6DH, 65H, 6EH, 74H
   \            6D656E74
   \   000010   73205455     DB 73H, 20H, 54H, 55H, 53H, 42H, 32H, 31H
   \            53423231
   \   000018   33362066     DB 33H, 36H, 20H, 66H, 6FH, 72H, 20H, 46H
   \            6F722046
   \   000020   6C617420     DB 6CH, 61H, 74H, 20H, 4BH, 65H, 79H, 62H
   \            4B657962
   \   000028   6F617264     DB 6FH, 61H, 72H, 64H, 20H, 28H, 56H, 65H
   \            20285665
   \   000030   72203329     DB 72H, 20H, 33H, 29H, 0
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Texas Instruments_5`:
   \   000000   54657861     DB "Texas Instruments TUSB2136 Generic Setting"
   \            7320496E
   \            73747275
   \            6D656E74
   \            73205455
   \            53423231
   \            33362047
   \            656E6572
   \            69632053
   \            65747469
   \            6E6700  

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Texas Instruments">`:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for <Constant "Texas Instruments`
   \   000012                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Texas Instruments TUS...">`:
   \   000000                DS 44
   \   00002C                REQUIRE `?<Initializer for <Constant "Texas Instruments_1`
   \   00002C                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Texas Instruments TUS...">_1`:
   \   000000                DS 46
   \   00002E                REQUIRE `?<Initializer for <Constant "Texas Instruments_2`
   \   00002E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Texas Instruments TUS...">_2`:
   \   000000                DS 46
   \   00002E                REQUIRE `?<Initializer for <Constant "Texas Instruments_3`
   \   00002E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Texas Instruments TUS...">_3`:
   \   000000                DS 53
   \   000035                REQUIRE `?<Initializer for <Constant "Texas Instruments_4`
   \   000035                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Texas Instruments TUS...">_4`:
   \   000000                DS 43
   \   00002B                REQUIRE `?<Initializer for <Constant "Texas Instruments_5`
   \   00002B                REQUIRE __INIT_XDATA_I
    129          

   Maximum stack usage in bytes:

     Function         ISTACK PSTACK XSTACK
     --------         ------ ------ ------
     GetVidPidSetting     2      0      0


   Segment part sizes:

     Function/Label                                   Bytes
     --------------                                   -----
     funcDefs                                          289
     s0123                                               1
     fncOffset                                           1
     GetVidPidSetting                                  159
     ?<Initializer for <Constant "Texas Instruments     18
     ?<Initializer for <Constant "Texas Instruments_1   44
     ?<Initializer for <Constant "Texas Instruments_2   46
     ?<Initializer for <Constant "Texas Instruments_3   46
     ?<Initializer for <Constant "Texas Instruments_4   53
     ?<Initializer for <Constant "Texas Instruments_5   43
     ?<Constant "Texas Instruments">                    18
     ?<Constant "Texas Instruments TUS...">             44
     ?<Constant "Texas Instruments TUS...">_1           46
     ?<Constant "Texas Instruments TUS...">_2           46
     ?<Constant "Texas Instruments TUS...">_3           53
     ?<Constant "Texas Instruments TUS...">_4           43

 
 289 bytes in segment CODE_C
 159 bytes in segment NEAR_CODE
 250 bytes in segment XDATA_I
 250 bytes in segment XDATA_ID
   2 bytes in segment XDATA_Z
 
 698 bytes of CODE  memory
 252 bytes of XDATA memory

Errors: none
Warnings: none
