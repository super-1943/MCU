///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               28/May/2010  14:43:48 /
// Copyright 2004-2009 IAR Systems AB.                                        /
// Time limited license: 20 days left                                         /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\AllProject\51\Keyboard Firmware Source         /
//                          Code\support.c                                    /
//    Command line       =  "E:\AllProject\51\Keyboard Firmware Source        /
//                          Code\support.c" -lC "E:\AllProject\51\Keyboard    /
//                          Firmware Source Code\Debug\List\" -lA             /
//                          "E:\AllProject\51\Keyboard Firmware Source        /
//                          Code\Debug\List\" -o "E:\AllProject\51\Keyboard   /
//                          Firmware Source Code\Debug\Obj\" -e               /
//                          --char_is_signed --no_cse --no_unroll             /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          -I "C:\Program Files\IAR Systems\Embedded         /
//                          Workbench 5.3 Evaluation version\8051\INC\" -I    /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.3 Evaluation version\8051\INC\CLIB\" -Ol        /
//    List file          =  E:\AllProject\51\Keyboard Firmware Source         /
//                          Code\Debug\List\support.s51                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME support

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0

        PUBLIC memcmp
        FUNCTION memcmp,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC memcpy
        FUNCTION memcpy,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC sendUartByte
        FUNCTION sendUartByte,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC sendUartHex
        FUNCTION sendUartHex,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC sendUartString
        FUNCTION sendUartString,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC strlen
        FUNCTION strlen,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
// E:\AllProject\51\Keyboard Firmware Source Code\support.c
//    1 /******************************************************************************
//    2  *                         VAULT INFORMATION SERVICES                         *
//    3  *                          TEXAS INSTRUMENTS, INC.                           *
//    4  *----------------------------------------------------------------------------*
//    5  *                  "Support Program for TUSB2136 Demo App"                   *
//    6  *                                                                            * 
//    7  * Programmed by: Craig Steiner, VIS (csteiner@vaultbbs.com)                  * 
//    8  * Develop Date:  30/Sep/2000                                                 *  
//    9  *----------------------------------------------------------------------------*
//   10  * Description: This module is a component of the TUSB2136 Demo App.  It      *
//   11  *   contains generic, non-specific support routines that are utilized by     *
//   12  *   other modules in the project.                                            *
//   13  ******************************************************************************/
//   14 
//   15 #include <io51.h>
//   16 #include "types.h"
//   17 #include "tusb2136.h"
//   18 
//   19 /***************************************************************************
//   20  * Function:   strlen                                                      *
//   21  * Programmer: Craig Steiner (csteiner@vaultbbs.com)                       *
//   22  * Description: Generic, simple version of the normal strlen() C-function. *
//   23  *    It is coded here because using the following version of strlen() is  *
//   24  *    approximately 40 bytes more efficient than using the standard lib    *
//   25  *    version of strlen() with IAR tools.                                  * 
//   26  ***************************************************************************/
//   27 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   28 BYTE strlen(PBYTE string)
strlen:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function strlen
//   29 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   30 	BYTE str;
//   31 	for(str = 0; str < 255 ; str++)
        MOV     R1,#0x0
        SJMP    ??strlen_0
??strlen_1:
        INC     R1
??strlen_0:
        MOV     A,R1
        CLR     C
        SUBB    A,#-0x1
        JNC     ??strlen_2
//   32 		if( string[str] == 0x00 )
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??strlen_1
//   33 			return(str);
        SJMP    ??strlen_3
//   34 	return(0);
??strlen_2:
        MOV     R1,#0x0
??strlen_3:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   35 }
//   36 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   37 void memcpy(char *string1, char *string2, BYTE count)
memcpy:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function memcpy
//   38 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   39 	BYTE str;
//   40 	for(str = 0; str < count; str++)
        MOV     R6,#0x0
        SJMP    ??memcpy_0
//   41 		string1[str] = string2[str];
??memcpy_1:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R6
??memcpy_0:
        MOV     A,R6
        CLR     C
        SUBB    A,R1
        JC      ??memcpy_1
//   42 }
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   43 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   44 BYTE memcmp(PBYTE string1, PBYTE string2, BYTE count)
memcmp:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function memcmp
//   45 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   46 	BYTE str;
//   47 	for(str = 0; str < count; str++)
        MOV     R7,#0x0
        SJMP    ??memcmp_0
??memcmp_1:
        INC     R7
??memcmp_0:
        MOV     A,R7
        CLR     C
        SUBB    A,R1
        JNC     ??memcmp_2
//   48 		if( string1[str] != string2[str] )
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??memcmp_1
//   49 			return(1);
        MOV     R1,#0x1
        SJMP    ??memcmp_3
//   50 	return(0);
??memcmp_2:
        MOV     R1,#0x0
??memcmp_3:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   51 }
//   52 
//   53 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   54 void sendUartByte(BYTE bValue)
sendUartByte:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function sendUartByte
//   55 {
        ; Saved register size: 0
        ; Auto size: 0
//   56 #ifdef SERIALDEBUG
//   57 	while(TI == 0);
//   58 	TI = 0;
//   59 	SBUF = bValue;
//   60 #endif
//   61 }
        RET
        CFI EndBlock cfiBlock3
//   62 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   63 void sendUartString(char *string, BYTE bCount)
sendUartString:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function sendUartString
//   64 {
        ; Saved register size: 0
        ; Auto size: 0
//   65 #ifdef SERIALDEBUG
//   66 	BYTE bIndex;
//   67 	for(bIndex = 0; bIndex < bCount; bIndex++)
//   68 		sendUartByte(string[bCount]);
//   69 #endif
//   70 }
        RET
        CFI EndBlock cfiBlock4
//   71 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   72 void sendUartHex(BYTE bValue)
sendUartHex:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function sendUartHex
//   73 {
        ; Saved register size: 0
        ; Auto size: 0
//   74 #ifdef SERIALDEBUG
//   75 	BYTE hexValue;
//   76 	hexValue = (bValue & 0xF0)>> 4;
//   77 	if(hexValue < 10 )
//   78 		sendUartByte(hexValue + '0');
//   79 	else
//   80 		sendUartByte(hexValue + 55);
//   81 
//   82 	hexValue = (bValue & 0x0F);
//   83 	if(hexValue < 10 )
//   84 		sendUartByte(hexValue + '0');
//   85 	else
//   86 		sendUartByte(hexValue + 55);
//   87 #endif
//   88 }
        RET
        CFI EndBlock cfiBlock5

        END
//   89 
//   90 
//   91 #ifdef XXX
//   92 /***************************************************************************
//   93  * Function:   DelaymSecond                                                *
//   94  * Programmer: Horng-Ming Lobo Tai (lobotai@ti.com)                        *
//   95  * Description: Delays the given amount of msecs, assuming the processor   *
//   96  *    is running at 12MHz.                                                 *
//   97  ***************************************************************************/
//   98 
//   99 VOID DelaymSecond(UINT uiCounter)   // 12Mhz
//  100 {
//  101     TMOD &= 0xf0;
//  102     TMOD |= 0x01;               // timer 0 in mode 1, 16bit counter
//  103 
//  104     while(uiCounter--){
//  105         TL0 = (65536-1000*SYS_CLOCK/12) % 256;
//  106         TH0 = (65536-1000*SYS_CLOCK/12) / 256;
//  107         TR0 = 1;                // start timer
//  108         while(TF0 !=1);
//  109         TF0 = 0;
//  110     }
//  111     TR0 = 0;
//  112 }
//  113 #endif
// 
// 164 bytes in segment NEAR_CODE
// 
// 164 bytes of CODE memory
//
//Errors: none
//Warnings: none
