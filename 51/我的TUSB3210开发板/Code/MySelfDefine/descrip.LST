C51 COMPILER V8.02   DESCRIP                                                               06/06/2010 13:59:39 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE DESCRIP
OBJECT MODULE PLACED IN descrip.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE descrip.c BROWSE DEFINE(WORK_AROUND_192) DEBUG OBJECTEXTEND CODE

line level    source

   1          /******************************************************************************
   2           *                         VAULT INFORMATION SERVICES                         *
   3           *                          TEXAS INSTRUMENTS, INC.                           *
   4           *----------------------------------------------------------------------------*
   5           *                  "USB Descriptors for TUSB2136 Demo App"                   *
   6           *                                                                            * 
   7           * Programmed by: Craig Steiner, VIS (csteiner@vaultbbs.com)                  * 
   8           * Develop Date:  30/Sep/2000                                                 *  
   9           *----------------------------------------------------------------------------*
  10           * Description: This module is a component of the TUSB2136 Demo App.  It      *
  11           *   contains all the pre-defined descriptors used by the application.        *
  12           *                                                                            *
  13           * Modified by Jim Chen 2001/01/03:                                           *
  14           *   1. total 102 keys                                                        *
  15           *   2. can work in Mac                                                       *
  16           *   3. use scanline8, scanline9 and return 0x40 as suspend key               *
  17           *   4. added usbSetIdle(void), void usbSetProtocol(void) for Mac             *
  18           *                                                                            *
  19           ******************************************************************************/
  20          
  21          #include "types.h"
  22          #include "tusb2136.h"
  23          #include "usb.h"
  24          
  25          
  26          BYTE code abromReportDescriptor[27] =
  27          {
  28           0x05, 0x01, // USAGE_PAGE (Generic Desktop)
  29           0x09, 0x00, // USAGE (0)
  30           0xa1, 0x01, // COLLECTION (Application)
  31           0x15, 0x00, //     LOGICAL_MINIMUM (0)
  32           0x25, 0xff, //     LOGICAL_MAXIMUM (255)
  33           0x19, 0x01, //     USAGE_MINIMUM (1)
  34           0x29, 0x08, //     USAGE_MAXIMUM (8) 
  35           0x95, 0x08, //     REPORT_COUNT (8)
  36           0x75, 0x08, //     REPORT_SIZE (8)
  37           0x81, 0x02, //     INPUT (Data,Var,Abs)
  38           0x19, 0x01, //     USAGE_MINIMUM (1)
  39           0x29, 0x08, //     USAGE_MAXIMUM (8) 
  40           0x91, 0x02, //   OUTPUT (Data,Var,Abs)
  41           0xc0        // END_COLLECTION
  42          };
  43          /***************************************************************************
  44           * Structure: Device Descriptor Structure                                  *
  45           * Programmer: Craig Steiner (csteiner@vaultbbs.com)                       *
  46           * Description: The abromDeviceDescriptor[] structure holds the 12h (18)   *
  47           *    bytes that make up the device descriptor for the keyboard device.    *
  48           ***************************************************************************/
  49          
  50          BYTE code abromDeviceDescriptor[SIZEOF_DEVICE_DESCRIPTOR] = 
  51          {
  52              SIZEOF_DEVICE_DESCRIPTOR,       // Length of this descriptor (12h bytes)
  53              DESC_TYPE_DEVICE,               // Type code of this descriptor (01h)
  54              0x10,0x01,                      // Release of USB spec (Rev 1.1)
  55              0x00,                               // Device's base class code
C51 COMPILER V8.02   DESCRIP                                                               06/06/2010 13:59:39 PAGE 2   

  56              0,                              // Device's sub class code
  57              0,                              // Device's protocol type code
  58              EP0_MAX_PACKET_SIZE,            // End point 0's max packet size = 8
  59              0x88,0x88,                      // Vendor ID: Texas Instruments
  60              0x06, 0x00,                                 // Product ID: UCD9110 EVM
  61              0x00,0x01,                      // Revision level of device, UPDATED AT RUN-TIME
  62              1,                              // Index of manufacturer name string desc, UPDATED AT RUN-TIME
  63              2,                              // Index of product name string desc, UPDATED AT RUN-TIME
  64              3,                              // Index of serial number string desc, UPDATED AT RUN-TIME
  65              1                               // Number of configurations supported
  66          };
  67          
  68          /***************************************************************************
  69           * Structure: Configuration Descriptor Structure                           *
  70           * Programmer: Craig Steiner (csteiner@vaultbbs.com)                       *
  71           * Description: The abromConfigurationDescriptorGroup structure holds the  *
  72           *    data that makes up the Configuration descriptor for the keyboard     *
  73           *    device.                                                              *
  74           ***************************************************************************/
  75          
  76          BYTE code abromConfigurationDescriptorGroup[] =
  77                  {
  78              // CONFIGURATION DESCRIPTOR (9 bytes)
  79              SIZEOF_CONFIG_DESCRIPTOR,        // bLength
  80              DESC_TYPE_CONFIG,                // bDescriptorType
  81                  9+9+9+7+7,//wTotalLength low byte
  82                  0x00,//wTotalLength high byte
  83              0x01,                            // bNumInterfaces
  84              0x01,                            // bConfigurationValue
  85              0x00,                            // iConfiguration Description offset
  86              0x80,                            // bmAttributes, bus power, do not support remote wakeup
  87              0x4B,                            // Max. Power Consumption at 2mA unit = 150mA
  88              // INTERFACE DESCRIPTOR (9 bytes)
  89              SIZEOF_INTERFACE_DESCRIPTOR,    // bLength
  90              DESC_TYPE_INTERFACE,            // bDescriptorType
  91              0x00,                           // bInterfaceNumber
  92              0x00,                           // bAlternateSetting
  93                  0x02,                                                   // bNumEndPoints
  94                  0x03,                                                   // bInterfaceClass: 3 = HID Device
  95                  0x00,                                                   // bInterfaceSubClass: Boot 
  96                  0x00,                                                   // bInterfaceProtocol: Keyboard
  97              0x00,                           // iInterface
  98          
  99              // KEYBOARD HID DESCRIPTOR (9 bytes)
 100              0x09,                                   // bLength of HID descriptor
 101              0x21,                               // HID Descriptor Type:
 102              0x10,0x01,                              // HID Revision number 1.00
 103              0x21,                                       // Target country, USA
 104              0x01,                                       // Number of HID classes to follow 
 105              0x22,                                       // Report descriptor type
 106                  sizeof(abromReportDescriptor)&0xff,
 107                  (sizeof(abromReportDescriptor)>>8)&0xff,
 108              // ENDPOINT #1 INPUT DESCRIPTOR, (7 bytes)
 109              SIZEOF_ENDPOINT_DESCRIPTOR,     // bLength
 110              DESC_TYPE_ENDPOINT,             // bDescriptorType
 111              0x81,                           // bEndpointAddress; bit7=1 for IN, bits 3-0=1 for ep1
 112              EP_DESC_ATTR_TYPE_INT,          // bmAttributes, interrupt transfers
 113              0x40, 0x00,                     // wMaxPacketSize, 64 bytes
 114              0x0A,                                                       // Polling interval: Every 10 ms
 115                  //ENDPOINT #1 OUTPUT DESCRIPTOR,(7 bytes)
 116                  SIZEOF_ENDPOINT_DESCRIPTOR,//bLength
 117                  DESC_TYPE_ENDPOINT,//bDescriptorType字段。端点描述符编号为0x05。
C51 COMPILER V8.02   DESCRIP                                                               06/06/2010 13:59:39 PAGE 3   

 118                  0x01,//bEndpointAddress; bit7=0 for OUT, bits 3-0=1 for ep1                     
 119                  EP_DESC_ATTR_TYPE_INT,//bmAttributes字段。D1~D0为端点传输类型选择。
 120                  0x40,0x00,//wMaxPacketSize字段。该端点的最大包长。端点1的最大包长为16字节。
 121                  0x0A//bInterval字段。端点查询的时间，我们设置为10个帧时间，即10ms。
 122          };
 123          
 124          
 125          
 126          
 127          BYTE code ManufacturerStringDescriptor[]={
 128          10,         //该描述符的长度为10字节
 129          0x03,       //字符串描述符的类型编码为0x03
 130          0x31, 0x72, //爱
 131          0xfd, 0x56, //国
 132          0x31, 0x72, //爱
 133          0x5a, 0x51, //党
 134          //注：请将最后一个多余的逗号删除
 135          };
 136          BYTE code LanguageId[4]=
 137          {
 138          0x04,//length
 139          0x03,//string descriptor
 140          0x09,//0x0409:America
 141          0x04
 142          };
 143          BYTE code ProductStringDescriptor[]={
 144          10,         //该描述符的长度为10字节
 145          0x03,       //字符串描述符的类型编码为0x03
 146          0x31, 0x72, //爱
 147          0xfd, 0x56, //国
 148          0x31, 0x72, //爱
 149          0x5a, 0x51, //党
 150          //注：请将最后一个多余的逗号删除
 151          //注：请将最后一个多余的逗号删除
 152          };
 153          BYTE code SerialNumberStringDescriptor[]={
 154          16,         //该描述符的长度为16字节
 155          0x03,       //字符串描述符的类型编码为0x03
 156          0xa0, 0x52, //加
 157          0x65, 0x51, //入
 158          0x2d, 0x4e, //中
 159          0xfd, 0x56, //国
 160          0x71, 0x51, //共
 161          0xa7, 0x4e, //产
 162          0x5a, 0x51, //党
 163          //注：请将最后一个多余的逗号删除
 164          };
C51 COMPILER V8.02   DESCRIP                                                               06/06/2010 13:59:39 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    126    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
