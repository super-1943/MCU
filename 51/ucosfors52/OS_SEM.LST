C51 COMPILER V8.02   OS_SEM                                                                02/27/2009 13:42:31 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE OS_SEM
OBJECT MODULE PLACED IN OS_SEM.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OS_SEM.C BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *                                          SEMAPHORE MANAGEMENT
   6          *
   7          *                        (c) Copyright 1992-1998, Jean J. Labrosse, Plantation, FL
   8          *                                           All Rights Reserved
   9          *
  10          *                                                  V2.00
  11          *
  12          * File : OS_SEM.C
  13          * By   : Jean J. Labrosse
  14          *********************************************************************************************************
  15          */
  16          
  17          #ifndef  OS_MASTER_FILE
  18          #include "includes.h"
  19          #endif
  20          
  21          #if OS_Sem_EN
  22          /*
  23          *********************************************************************************************************
  24          *                                           ACCEPT SEMAPHORE
  25          *
  26          * Description: This function checks the semaphore to see if a resource is available or, if an event
  27          *              occurred.  Unlike OSSemPend(), OSSemAccept() does not suspend the calling task if the
  28          *              resource is not available or the event did not occur.
  29          *
  30          * Arguments  : pevent     is a pointer to the event control block
  31          *
  32          * Returns    : >  0       if the resource is available or the event did not occur the semaphore is
  33          *                         decremented to obtain the resource.
  34          *              == 0       if the resource is not available or the event did not occur or,
  35          *                         you didn't pass a pointer to a semaphore
  36          *********************************************************************************************************
  37          */
  38          #if OS_Sem_Accept_EN
              INT16U OSSemAccept (OS_EVENT *pevent)reentrant
              {
                  INT16U cnt;
              
              
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
                      OS_EXIT_CRITICAL();
                      return (0);
                  }
                  cnt = pevent->OSEventCnt;
                  if (cnt > 0) {                                    /* See if resource is available                  */
                      pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
                  }
                  OS_EXIT_CRITICAL();
                  return (cnt);                                     /* Return semaphore count                        */
              }
C51 COMPILER V8.02   OS_SEM                                                                02/27/2009 13:42:31 PAGE 2   

              #endif
  57          
  58          /*$PAGE*/
  59          /*
  60          *********************************************************************************************************
  61          *                                           CREATE A SEMAPHORE
  62          *
  63          * Description: This function creates a semaphore.
  64          *
  65          * Arguments  : cnt           is the initial value for the semaphore.  If the value is 0, no resource is
  66          *                            available (or no event has occurred).  You initialize the semaphore to a 
  67          *                            non-zero value to specify how many resources are available (e.g. if you have
  68          *                            10 resources, you would initialize the semaphore to 10).
  69          *
  70          * Returns    : != (void *)0  is a pointer to the event control clock (OS_EVENT) associated with the
  71          *                            created semaphore
  72          *              == (void *)0  if no event control blocks were available
  73          *********************************************************************************************************
  74          */
  75          #if OS_Sem_Create_EN
  76          OS_EVENT *OSSemCreate (INT16U cnt)reentrant
  77          {
  78   1          OS_EVENT *pevent;
  79   1      
  80   1      
  81   1          OS_ENTER_CRITICAL();
  82   1          pevent = OSEventFreeList;                              /* Get next free event control block        */
  83   1          if (OSEventFreeList != (OS_EVENT *)0) 
  84   1          {                /* See if pool of free ECB pool was empty   */
  85   2              OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  86   2          }
  87   1          OS_EXIT_CRITICAL();
  88   1          if (pevent != (OS_EVENT *)0) 
  89   1          {                         /* Get an event control block               */
  90   2              pevent->OSEventType = OS_EVENT_TYPE_SEM;
  91   2              pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
  92   2              OSEventWaitListInit(pevent);
  93   2          }
  94   1          return (pevent);
  95   1      }
  96          #endif
  97          
  98          /*$PAGE*/
  99          /*
 100          *********************************************************************************************************
 101          *                                           PEND ON SEMAPHORE
 102          *
 103          * Description: This function waits for a semaphore.
 104          *
 105          * Arguments  : pevent        is a pointer to the event control block associated with the desired 
 106          *                            semaphore.
 107          *
 108          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
 109          *                            wait for the resource up to the amount of time specified by this argument.  
 110          *                            If you specify 0, however, your task will wait forever at the specified 
 111          *                            semaphore or, until the resource becomes available (or the event occurs).
 112          *
 113          *              err           is a pointer to where an error message will be deposited.  Possible error
 114          *                            messages are:
 115          *
 116          *                            OS_NO_ERR          The call was successful and your task owns the resource 
 117          *                                               or, the event you are waiting for occurred.
C51 COMPILER V8.02   OS_SEM                                                                02/27/2009 13:42:31 PAGE 3   

 118          *                            OS_TIMEOUT         The semaphore was not received within the specified 
 119          *                                               timeout.
 120          *                            OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a semaphore.
 121          *                            OS_ERR_PEND_ISR    If you called this function from an ISR and the result
 122          *                                               would lead to a suspension.
 123          *
 124          * Returns    : none
 125          *********************************************************************************************************
 126          */
 127          #if OS_Sem_Pend_EN
 128          void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)reentrant
 129          {
 130   1          OS_ENTER_CRITICAL();
 131   1          if (pevent->OSEventType != OS_EVENT_TYPE_SEM)  /* Validate event block type                     */
 132   1          {  
 133   2              OS_EXIT_CRITICAL();
 134   2              *err = OS_ERR_EVENT_TYPE;
 135   2          }
 136   1          if (pevent->OSEventCnt > 0)  /* If sem. is positive, resource available ...   */
 137   1          {                    
 138   2              pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 139   2              OS_EXIT_CRITICAL();
 140   2              *err = OS_NO_ERR;
 141   2          } 
 142   1          else if (OSIntNesting > 0)  /* See if called from ISR ...                    */
 143   1          {                   
 144   2              OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
 145   2              *err = OS_ERR_PEND_ISR;
 146   2          } 
 147   1          else 
 148   1          {                                          /* Otherwise, must wait until event occurs       */
 149   2              OSTCBCur->OSTCBStat    |= OS_STAT_SEM;        /* Resource not available, pend on semaphore     */
 150   2              OSTCBCur->OSTCBDly      = timeout;            /* Store pend timeout in TCB                     */
 151   2              OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
 152   2              OS_EXIT_CRITICAL();
 153   2              OSSched();                                    /* Find next highest priority task ready         */
 154   2              OS_ENTER_CRITICAL();
 155   2              if (OSTCBCur->OSTCBStat & OS_STAT_SEM) 
 156   2              {      /* Must have timed out if still waiting for event*/
 157   3                  OSEventTO(pevent);
 158   3                  OS_EXIT_CRITICAL();
 159   3                  *err = OS_TIMEOUT;                        /* Indicate that didn't get event within TO      */
 160   3              } 
 161   2              else 
 162   2              {
 163   3                  OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
 164   3                  OS_EXIT_CRITICAL();
 165   3                  *err = OS_NO_ERR;
 166   3              }
 167   2          }
 168   1      }
 169          #endif
 170          /*$PAGE*/
 171          /*
 172          *********************************************************************************************************
 173          *                                         POST TO A SEMAPHORE
 174          *
 175          * Description: This function signals a semaphore
 176          *
 177          * Arguments  : pevent        is a pointer to the event control block associated with the desired 
 178          *                            semaphore.
 179          *
C51 COMPILER V8.02   OS_SEM                                                                02/27/2009 13:42:31 PAGE 4   

 180          * Returns    : OS_NO_ERR          The call was successful and the semaphore was signaled.
 181          *              OS_SEM_OVF         If the semaphore count exceeded its limit.  In other words, you have 
 182          *                                 signalled the semaphore more often than you waited on it with either
 183          *                                 OSSemAccept() or OSSemPend().
 184          *              OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a semaphore
 185          *********************************************************************************************************
 186          */
 187          #if OS_Sem_Post_EN
 188          INT8U OSSemPost (OS_EVENT *pevent)reentrant
 189          {
 190   1          OS_ENTER_CRITICAL();
 191   1          if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 192   2              OS_EXIT_CRITICAL();
 193   2              return (OS_ERR_EVENT_TYPE);
 194   2          }
 195   1          if (pevent->OSEventGrp) {                              /* See if any task waiting for semaphore    */
 196   2              OSEventTaskRdy(pevent, (void *)0, OS_STAT_SEM);    /* Ready highest prio task waiting on event */
 197   2              OS_EXIT_CRITICAL();
 198   2              OSSched();                                    /* Find highest priority task ready to run       */
 199   2              return (OS_NO_ERR);
 200   2          } else {
 201   2              if (pevent->OSEventCnt < 65535) {             /* Make sure semaphore will not overflow         */
 202   3                  pevent->OSEventCnt++;                     /* Increment semaphore count to register event   */
 203   3                  OS_EXIT_CRITICAL();
 204   3                  return (OS_NO_ERR);
 205   3              } else {                                      /* Semaphore value has reached its maximum       */
 206   3                  OS_EXIT_CRITICAL();
 207   3                  return (OS_SEM_OVF);
 208   3              }
 209   2          }
 210   1      }
 211          #endif
 212          /*
 213          *********************************************************************************************************
 214          *                                          QUERY A SEMAPHORE
 215          *
 216          * Description: This function obtains information about a semaphore
 217          *
 218          * Arguments  : pevent        is a pointer to the event control block associated with the desired 
 219          *                            semaphore
 220          *
 221          *              dataptr         is a pointer to a structure that will contain information about the 
 222          *                            semaphore.
 223          *
 224          * Returns    : OS_NO_ERR          The call was successful and the message was sent
 225          *              OS_ERR_EVENT_TYPE  If you are attempting to obtain data from a non semaphore.
 226          *********************************************************************************************************
 227          */
 228          #if   OS_Sem_Query_EN
              INT8U OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *dataptr)reentrant
              {
                  INT8U  i;
                  INT8U *psrc;
                  INT8U *pdest;
                  
                  
                  OS_ENTER_CRITICAL();
                  if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
                      OS_EXIT_CRITICAL();
                      return (OS_ERR_EVENT_TYPE);
                  }
                  dataptr->OSEventGrp = pevent->OSEventGrp;                /* Copy message mailbox wait list           *
C51 COMPILER V8.02   OS_SEM                                                                02/27/2009 13:42:31 PAGE 5   

             -/
                  psrc              = &pevent->OSEventTbl[0];
                  pdest             = &dataptr->OSEventTbl[0];
                  for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
                      *pdest++ = *psrc++;   
                  }
                  dataptr->OSCnt      = pevent->OSEventCnt;                /* Get semaphore count                      *
             -/
                  OS_EXIT_CRITICAL();
                  return (OS_NO_ERR);
              }
              #endif
 252          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    608    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
