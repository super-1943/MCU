C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE ZUIZHONG
OBJECT MODULE PLACED IN zuizhong.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE zuizhong.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*********************************************************************************/
   2          /* LCM MGLS-240128TA （ ）显示程序   */
   3          /* MCU 型号 : Winbond W78E58-24 */
   4          /* 时钟频率 : 22.1184 MHz */
   5          /* 接口方式 :  直接接口（挂总线） */
   6          /* 开发环境 : Keil C51 V6.14 */
   7          /* 开发日期 : 2001.06.12- */
   8          /* 程序编写 : Youth */
   9          /*********************************************************************************/
  10          #include <absacc.h>
  11          #include <reg52.h>
  12          #include <stdarg.h>
  13          #include <stdio.h>
  14          #define ulong unsigned long
  15          
  16          #define STX 0x02
  17          #define ETX 0x03
  18          #define EOT 0x04
  19          #define ENQ 0x05
  20          #define BS 0x08
  21          #define CR 0x0D
  22          #define LF 0x0A
  23          #define DLE 0x10
  24          #define ETB 0x17
  25          #define SPACE 0x20
  26          #define COMMA 0x2C
  27                          
  28          #define TRUE 1
  29          #define FALSE 0
  30                          
  31          #define HIGH 1
  32          #define LOW 0
  33          // T6963C 端口定义6
  34          
  35          #define LCMDW   XBYTE[0x9000] // 数据口
  36          #define LCMCW   XBYTE[0x9100] // 命令口
  37          // T6963C 命令定义
  38          #define LC_CUR_POS      0x21 // 光标位置设置
  39          #define LC_CGR_POS      0x22 // CGRAM偏置地址设置
  40          #define LC_ADD_POS      0x24 // 地址指针位置
  41          #define LC_TXT_STP      0x40 // 文本区首址
  42          #define LC_TXT_WID      0x41 // 文本区宽度
  43          #define LC_GRH_STP      0x42 // 图形区首址
  44          #define LC_GRH_WID      0x43 // 图形区宽度
  45          #define LC_MOD_OR       0x80 // 显示方式：逻辑“或”
  46          #define LC_MOD_XOR0x81 // 显示方式：逻辑“异或”
  47          #define LC_MOD_AND0x82 // 显示方式：逻辑“与”
  48          #define LC_MOD_TCH      0x83 // 显示方式：文本特征
  49          #define LC_DIS_SW       0x90    //  D0=1/0: /显示开关： 光标闪烁启用 禁用；
  50                                                                          //  D1=1/0: /光标显示启用 禁用；
  51                                                                          //  D2=1/0: /文本显示启用 禁用；
  52                                                                          //  D3=1/0: /图形显示启用 禁用；
  53          #define LC_CUR_SHP      0xA0 //  0xA0-0xA7光标形状选择： 表示光标占的行数
  54          #define LC_AUT_WR       0xB0 // 自动写设置
  55          #define LC_AUT_RD       0xB1 // 自动读设置
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 2   

  56          #define LC_AUT_OVR      0xB2 //  /自动读 写结束
  57          #define LC_INC_WR       0xC0 //  1数据一次写，地址加
  58          #define LC_INC_RD       0xC1 //  1数据一次读，地址加
  59          #define LC_DEC_WR       0xC2 //  1数据一次写，地址减
  60          #define LC_DEC_RD       0xC3 //  1数据一次读，地址减
  61          #define LC_NOC_WR       0xC4 // 数据一次写，地址不变
  62          #define LC_NOC_RD       0xC5 // 数据一次读，地址不变
  63          #define LC_SCN_RD       0xE0 // 屏读
  64          #define LC_SCN_CP       0xE8 // 屏拷贝
  65          #define LC_BIT_OP       0xF0 //  D0-D2 D0-D7 D3 1 0位操作： ：定义 位； ： 置位； ：清除
  66          code unsigned char const uPowArr[]   = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  67          // ASCII 字模宽度及高度定义
  68          #define ASC_CHR_WIDTH  8
  69          #define ASC_CHR_HEIGHT 12
  70          // ASCII  8*16字模，显示为
  71          char code ASC_MSK[96*12] = {
  72          // Terminal9;    x =8x12此字体下对应的点阵为：宽 高
  73          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff, // < 0x20 ,时 打印此字
  74          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // ' '
  75          0x00,0x0C,0x1E,0x1E,0x1E,0x0C,0x0C,0x00,0x0C,0x0C,0x00,0x00,// '!'
  76          0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // '"'
  77          0x00,0x36,0x36,0x7F,0x36,0x36,0x36,0x7F,0x36,0x36,0x00,0x00, // '#'7
  78          
  79          0x0C,0x0C,0x3E,0x03,0x03,0x1E,0x30,0x30,0x1F,0x0C,0x0C,0x00, // '$'
  80          0x00,0x00,0x00,0x23,0x33,0x18,0x0C,0x06,0x33,0x31,0x00,0x00, // '%'
  81          0x00,0x0E,0x1B,0x1B,0x0E,0x5F,0x7B,0x33,0x3B,0x6E,0x00,0x00, // '&'
  82          0x00,0x0C,0x0C,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // '''
  83          0x00,0x30,0x18,0x0C,0x06,0x06,0x06,0x0C,0x18,0x30,0x00,0x00, // '('
  84          0x00,0x06,0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x06,0x00,0x00, // ')'
  85          0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x00, // '*'
  86          0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00, // '+'
  87          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x1C,0x06,0x00, // ','
  88          0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00, // '-'
  89          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x1C,0x00,0x00, // '.'
  90          0x00,0x00,0x40,0x60,0x30,0x18,0x0C,0x06,0x03,0x01,0x00,0x00, // '/'
  91          //0x00,0x3E,0x63,0x73,0x7B,0x6B,0x6F,0x67,0x63,0x3E,0x00,0x00, // '0'
  92          //0x00,0x08,0x0C,0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0x3F,0x00,0x00, // '1'
  93          //0x00,0x1E,0x33,0x33,0x30,0x18,0x0C,0x06,0x33,0x3F,0x00,0x00, // '2'
  94          //0x00,0x1E,0x33,0x30,0x30,0x1C,0x30,0x30,0x33,0x1E,0x00,0x00, // '3'
  95          //0x00,0x30,0x38,0x3C,0x36,0x33,0x7F,0x30,0x30,0x78,0x00,0x00, // '4'
  96          //0x00,0x3F,0x03,0x03,0x03,0x1F,0x30,0x30,0x33,0x1E,0x00,0x00, // '5'
  97          //0x00,0x1C,0x06,0x03,0x03,0x1F,0x33,0x33,0x33,0x1E,0x00,0x00, // '6'
  98          //0x00,0x7F,0x63,0x63,0x60,0x30,0x18,0x0C,0x0C,0x0C,0x00,0x00, // '7'
  99          //0x00,0x1E,0x33,0x33,0x37,0x1E,0x3B,0x33,0x33,0x1E,0x00,0x00, // '8'
 100          //0x00,0x1E,0x33,0x33,0x33,0x3E,0x18,0x18,0x0C,0x0E,0x00,0x00, // '9'
 101          /*--  文字:  0  --*/
 102          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 103          0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,
 104          
 105          /*--  文字:  1  --*/
 106          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 107          0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,
 108          
 109          /*--  文字:  2  --*/
 110          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 111          0x00,0x3C,0x42,0x42,0x42,0x04,0x04,0x08,0x10,0x20,0x42,0x7E,
 112          
 113          /*--  文字:  3  --*/
 114          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 115          0x00,0x3C,0x42,0x42,0x04,0x18,0x04,0x02,0x02,0x42,0x44,0x38,
 116          
 117          /*--  文字:  4  --*/
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 3   

 118          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 119          0x00,0x04,0x0C,0x14,0x24,0x24,0x44,0x44,0x7E,0x04,0x04,0x1E,
 120          
 121          /*--  文字:  5  --*/
 122          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 123          0x00,0x7E,0x40,0x40,0x40,0x58,0x64,0x02,0x02,0x42,0x44,0x38,
 124          
 125          /*--  文字:  6  --*/
 126          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 127          0x00,0x1C,0x24,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x24,0x18,
 128          
 129          /*--  文字:  7  --*/
 130          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 131          0x00,0x7E,0x44,0x44,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,
 132          
 133          /*--  文字:  8  --*/
 134          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 135          0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,
 136          
 137          /*--  文字:  9  --*/
 138          /*--  宋体12;  此字体下对应的点阵为：宽x高=8x16   --*/
 139          0x00,0x18,0x24,0x42,0x42,0x42,0x26,0x1A,0x02,0x02,0x24,0x38,
 140          
 141          
 142          0x00,0x00,0x00,0x1C,0x1C,0x00,0x00,0x1C,0x1C,0x00,0x00,0x00, // ':'
 143          0x00,0x00,0x00,0x1C,0x1C,0x00,0x00,0x1C,0x1C,0x18,0x0C,0x00, // ';'
 144          0x00,0x30,0x18,0x0C,0x06,0x03,0x06,0x0C,0x18,0x30,0x00,0x00, // '<'
 145          0x00,0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00, // '='
 146          0x00,0x06,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x06,0x00,0x00, // '>'
 147          0x00,0x1E,0x33,0x30,0x18,0x0C,0x0C,0x00,0x0C,0x0C,0x00,0x00, // '?'
 148          0x00,0x3E,0x63,0x63,0x7B,0x7B,0x7B,0x03,0x03,0x3E,0x00,0x00, // '@'
 149          0x00,0x0C,0x1E,0x33,0x33,0x33,0x3F,0x33,0x33,0x33,0x00,0x00, // 'A'
 150          0x00,0x3F,0x66,0x66,0x66,0x3E,0x66,0x66,0x66,0x3F,0x00,0x00, // 'B'
 151          0x00,0x3C,0x66,0x63,0x03,0x03,0x03,0x63,0x66,0x3C,0x00,0x00, // 'C'
 152          0x00,0x1F,0x36,0x66,0x66,0x66,0x66,0x66,0x36,0x1F,0x00,0x00, // 'D'
 153          0x00,0x7F,0x46,0x06,0x26,0x3E,0x26,0x06,0x46,0x7F,0x00,0x00, // 'E'
 154          0x00,0x7F,0x66,0x46,0x26,0x3E,0x26,0x06,0x06,0x0F,0x00,0x00, // 'F'
 155          0x00,0x3C,0x66,0x63,0x03,0x03,0x73,0x63,0x66,0x7C,0x00,0x00, // 'G'
 156          0x00,0x33,0x33,0x33,0x33,0x3F,0x33,0x33,0x33,0x33,0x00,0x00, // 'H'
 157          0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,0x00,0x00,// 'I'
 158          0x00,0x78,0x30,0x30,0x30,0x30,0x33,0x33,0x33,0x1E,0x00,0x00, // 'J'
 159          0x00,0x67,0x66,0x36,0x36,0x1E,0x36,0x36,0x66,0x67,0x00,0x00, // 'K'
 160          0x00,0x0F,0x06,0x06,0x06,0x06,0x46,0x66,0x66,0x7F,0x00,0x00, // 'L'
 161          0x00,0x63,0x77,0x7F,0x7F,0x6B,0x63,0x63,0x63,0x63,0x00,0x00, // 'M'
 162          0x00,0x63,0x63,0x67,0x6F,0x7F,0x7B,0x73,0x63,0x63,0x00,0x00, // 'N'
 163          0x00,0x1C,0x36,0x63,0x63,0x63,0x63,0x63,0x36,0x1C,0x00,0x00, // 'O'
 164          0x00,0x3F,0x66,0x66,0x66,0x3E,0x06,0x06,0x06,0x0F,0x00,0x00, // 'P'
 165          0x00,0x1C,0x36,0x63,0x63,0x63,0x73,0x7B,0x3E,0x30,0x78,0x00, // 'Q'8
 166          
 167          0x00,0x3F,0x66,0x66,0x66,0x3E,0x36,0x66,0x66,0x67,0x00,0x00, // 'R'
 168          0x00,0x1E,0x33,0x33,0x03,0x0E,0x18,0x33,0x33,0x1E,0x00,0x00, // 'S'
 169          0x00,0x3F,0x2D,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,0x00,0x00,// 'T'
 170          0x00,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x1E,0x00,0x00, // 'U'
 171          0x00,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x1E,0x0C,0x00,0x00, // 'V'
 172          0x00,0x63,0x63,0x63,0x63,0x6B,0x6B,0x36,0x36,0x36,0x00,0x00, // 'W'
 173          0x00,0x33,0x33,0x33,0x1E,0x0C,0x1E,0x33,0x33,0x33,0x00,0x00, // 'X'
 174          0x00,0x33,0x33,0x33,0x33,0x1E,0x0C,0x0C,0x0C,0x1E,0x00,0x00, // 'Y'
 175          0x00,0x7F,0x73,0x19,0x18,0x0C,0x06,0x46,0x63,0x7F,0x00,0x00, // 'Z'
 176          0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,// '['
 177          0x00,0x00,0x01,0x03,0x06,0x0C,0x18,0x30,0x60,0x40,0x00,0x00, // '\'
 178          0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00, // ']'
 179          0x08,0x1C,0x36,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // '^'
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 4   

 180          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00, // '_'
 181          0x0C,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // '`'
 182          0x00,0x00,0x00,0x00,0x1E,0x30,0x3E,0x33,0x33,0x6E,0x00,0x00, // 'a'
 183          0x00,0x07,0x06,0x06,0x3E,0x66,0x66,0x66,0x66,0x3B,0x00,0x00, // 'b'
 184          0x00,0x00,0x00,0x00,0x1E,0x33,0x03,0x03,0x33,0x1E,0x00,0x00, // 'c'
 185          0x00,0x38,0x30,0x30,0x3E,0x33,0x33,0x33,0x33,0x6E,0x00,0x00, // 'd'
 186          0x00,0x00,0x00,0x00,0x1E,0x33,0x3F,0x03,0x33,0x1E,0x00,0x00, // 'e'
 187          0x00,0x1C,0x36,0x06,0x06,0x1F,0x06,0x06,0x06,0x0F,0x00,0x00, // 'f'
 188          0x00,0x00,0x00,0x00,0x6E,0x33,0x33,0x33,0x3E,0x30,0x33,0x1E, // 'g'
 189          0x00,0x07,0x06,0x06,0x36,0x6E,0x66,0x66,0x66,0x67,0x00,0x00, // 'h'
 190          0x00,0x18,0x18,0x00,0x1E,0x18,0x18,0x18,0x18,0x7E,0x00,0x00, // 'i'
 191          0x00,0x30,0x30,0x00,0x3C,0x30,0x30,0x30,0x30,0x33,0x33,0x1E, // 'j'
 192          0x00,0x07,0x06,0x06,0x66,0x36,0x1E,0x36,0x66,0x67,0x00,0x00, // 'k'
 193          0x00,0x1E,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,0x00, // 'l'
 194          0x00,0x00,0x00,0x00,0x3F,0x6B,0x6B,0x6B,0x6B,0x63,0x00,0x00, // 'm'
 195          0x00,0x00,0x00,0x00,0x1F,0x33,0x33,0x33,0x33,0x33,0x00,0x00, // 'n'
 196          0x00,0x00,0x00,0x00,0x1E,0x33,0x33,0x33,0x33,0x1E,0x00,0x00, // 'o'
 197          0x00,0x00,0x00,0x00,0x3B,0x66,0x66,0x66,0x66,0x3E,0x06,0x0F, // 'p'
 198          0x00,0x00,0x00,0x00,0x6E,0x33,0x33,0x33,0x33,0x3E,0x30,0x78, // 'q'
 199          0x00,0x00,0x00,0x00,0x37,0x76,0x6E,0x06,0x06,0x0F,0x00,0x00, // 'r'
 200          0x00,0x00,0x00,0x00,0x1E,0x33,0x06,0x18,0x33,0x1E,0x00,0x00, // 's'
 201          //0x00,0x00,0x04,0x06,0x3F,0x06,0x06,0x06,0x36,0x1C,0x00,0x00, // 't'
 202          0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x0C,0x00,0x00,
 203          0x00,0x00,0x00,0x00,0x33,0x33,0x33,0x33,0x33,0x6E,0x00,0x00, // 'u'
 204          0x00,0x00,0x00,0x00,0x33,0x33,0x33,0x33,0x1E,0x0C,0x00,0x00, // 'v'
 205          0x00,0x00,0x00,0x00,0x63,0x63,0x6B,0x6B,0x36,0x36,0x00,0x00, // 'w'
 206          0x00,0x00,0x00,0x00,0x63,0x36,0x1C,0x1C,0x36,0x63,0x00,0x00, // 'x'
 207          0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x30,0x18,0x0F, // 'y'
 208          0x00,0x00,0x00,0x00,0x3F,0x31,0x18,0x06,0x23,0x3F,0x00,0x00, // 'z'
 209          0x00,0x38,0x0C,0x0C,0x06,0x03,0x06,0x0C,0x0C,0x38,0x00,0x00, // '{'
 210          0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x00,0x00, // '|'
 211          0x00,0x07,0x0C,0x0C,0x18,0x30,0x18,0x0C,0x0C,0x07,0x00,0x00, // '}'
 212          0x00,0xCE,0x5B,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // '~'
 213          };
 214          
 215          typedef struct typFNT_GB16 // 汉字字模显示数据结构
 216          {
 217          char Index[2];
 218          char Msk[32];
 219          };
 220          struct typFNT_GB16 xdata GB_16[] = { //  16*16显示为" 中 "," 文 "," 测 "," 试 "
 221                          0x01,0x00,0x01,0x00,0x21,0x08,0x3F,0xFC,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,
 222                          0x21,0x08,0x3F,0xF8,0x21,0x08,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,
 223                          0x02,0x00,0x01,0x00,0x01,0x00,0xFF,0xFE,0x08,0x20,0x08,0x20,0x08,0x20,0x04,0x40,
 224                          0x04,0x40,0x02,0x80,0x01,0x00,0x02,0x80,0x04,0x60,0x18,0x1E,0xE0,0x08,0x00,0x00,
 225                          0x40,0x02,0x27,0xC2,0x24,0x42,0x84,0x52,0x45,0x52,0x55,0x52,0x15,0x52,0x25,0x52,
 226                          0x25,0x52,0x25,0x52,0xC5,0x52,0x41,0x02,0x42,0x82,0x42,0x42,0x44,0x4A,0x48,0x04,
 227                          0x00,0x20,0x40,0x28,0x20,0x24,0x30,0x24,0x27,0xFE,0x00,0x20,0xE0,0x20,0x27,0xE0,
 228                          0x21,0x20,0x21,0x10,0x21,0x10,0x21,0x0A,0x29,0xCA,0x36,0x06,0x20,0x02,0x00,0x00,
 229          };
 230          unsigned char gCurRow,gCurCol; //  16 8当前行、列存储，行高 点，列宽 点
 231          unsigned char fnGetRow(void)
 232          {
 233   1              return gCurRow;
 234   1      }
 235          unsigned char fnGetCol(void)
 236          {
 237   1              return gCurCol;
 238   1      }
 239          unsigned char fnST01(void) //  STA1,STA0状态位 判断（读写指令和读写数据）
 240          {
 241   1              unsigned char i;
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 5   

 242   1              for(i=10;i>0;i--)
 243   1              {
 244   2                      if((LCMCW & 0x03) == 0x03)
 245   2                      break;
 246   2              }
 247   1              return i; // 若返回零，说明错误
 248   1      }
 249          unsigned char fnST2(void) //  ST2状态位 判断（数据自动读状态）
 250          {
 251   1              unsigned char i;
 252   1              for(i=10;i>0;i--)
 253   1              {
 254   2                      if((LCMCW & 0x04) == 0x04)
 255   2                      break;
 256   2              }
 257   1              return i; // 若返回零，说明错误
 258   1      }
 259          unsigned char fnST3(void) //  ST3状态位 判断（数据自动写状态）
 260          {
 261   1              unsigned char i;
 262   1              for(i=10;i>0;i--)
 263   1              {
 264   2                      if((LCMCW & 0x08) == 0x08)
 265   2                      break;
 266   2              }
 267   1              return i; // 若返回零，说明错误
 268   1      }
 269          unsigned char fnST6(void) //  ST6 /状态位 判断（屏读 屏拷贝状态）
 270          {
 271   1              unsigned char i;
 272   1              for(i=10;i>0;i--)
 273   1              {
 274   2                      if((LCMCW & 0x40) == 0x40)
 275   2                      break;
 276   2              }
 277   1              return i; // 若返回零，说明错误
 278   1      }
 279          unsigned char fnPR1(unsigned char uCmd,unsigned char uPar1,unsigned char uPar2) // 写双参数的指令
 280          {
 281   1              if(fnST01() == 0)
 282   1                      return 1;
 283   1              LCMDW = uPar1;
 284   1              if(fnST01() == 0)
 285   1                      return 2;
 286   1              LCMDW = uPar2;
 287   1              if(fnST01() == 0)
 288   1                      return 3;
 289   1              LCMCW = uCmd;
 290   1              return 0; //  0返回 成功
 291   1      }
 292          unsigned char fnPR11(unsigned char uCmd,unsigned char uPar1) // 写单参数的指令
 293          {
 294   1              if(fnST01() == 0)
 295   1                      return 1;
 296   1              LCMDW = uCmd;
 297   1              if(fnST01() == 0)
 298   1                      return 2;
 299   1              LCMCW = uPar1;
 300   1              return 0; //  0返回 成功
 301   1      }
 302          unsigned char fnPR12(unsigned char uCmd) // 写无参数的指令
 303          {
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 6   

 304   1              if(fnST01() == 0)
 305   1                      return 1;
 306   1              LCMCW = uCmd;
 307   1              return 0; //  0返回 成功
 308   1      }
 309          unsigned char fnPR13(unsigned char uData) // 写数据
 310          {
 311   1              if(fnST3() == 0)
 312   1                      return 1;
 313   1              LCMDW = uData;
 314   1              return 0; //  0返回 成功
 315   1      }
 316          unsigned char fnPR2(void) // 读数据
 317          {
 318   1              if(fnST01() == 0)
 319   1                      return 1;
 320   1              return LCMDW;
 321   1      }
 322          // 设置当前地址
 323          void fnSetPos(unsigned char urow, unsigned char ucol)
 324          {
 325   1              unsigned int  iPos;
 326   1              iPos = urow * 30 + ucol;
 327   1              fnPR1(LC_ADD_POS,iPos & 0xFF,iPos / 256);
 328   1              gCurRow = urow;
 329   1              gCurCol = ucol;
 330   1      }
 331          // 设置当前显示行、列
 332          void cursor(unsigned char uRow, unsigned char uCol)
 333          {
 334   1              fnSetPos(uRow * 16, uCol);
 335   1      }
 336          // 清屏
 337          void cls(void)
 338          {
 339   1              unsigned int  i;
 340   1              fnPR1(LC_ADD_POS,0x00,0x00); // 置地址指针
 341   1              fnPR12(LC_AUT_WR); // 自动写
 342   1              for(i=0;i<240*30;i++)
 343   1              {
 344   2                      fnST3();
 345   2                      fnPR13(0x00); // 写数据
 346   2              }
 347   1              fnPR12(LC_AUT_OVR); // 自动写结束
 348   1              fnPR1(LC_ADD_POS,0x00,0x00); // 重置地址指针
 349   1              gCurRow = 0; // 置地址指针存储变量
 350   1              gCurCol = 0;
 351   1      }
 352          // LCM 初始化
 353          char fnLCMInit(void)
 354          {
 355   1              if(fnPR1(LC_TXT_STP,0x00,0x00) != 0) // 文本显示区首地址
 356   1                      return -1;
 357   1              fnPR1(LC_TXT_WID,0x1E,0x00); // 文本显示区宽度
 358   1              fnPR1(LC_GRH_STP,0x00,0x00); // 图形显示区首地址
 359   1              fnPR1(LC_GRH_WID,0x1E,0x00); // 图形显示区宽度
 360   1              fnPR12(LC_CUR_SHP | 0x01); // 光标形状
 361   1              fnPR12(LC_MOD_OR); // 显示方式设置
 362   1              fnPR12(LC_DIS_SW | 0x08); // 显示开关设置
 363   1              return 0;
 364   1      }
 365          // ASCII(8*16)    (16*16) 及 汉字 显示函数
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 7   

 366          unsigned char dprintf(char *fmt, ...)
 367          {
 368   1              va_list arg_ptr;
 369   1              char  c1,c2,cData;
 370   1              char tmpBuf[64]; // LCD显示数据缓冲区
 371   1              unsigned char i=0,j,uLen,uRow,uCol;
 372   1              unsigned int  k;
 373   1              va_start(arg_ptr, fmt);
 374   1              uLen = (unsigned char)vsprintf(tmpBuf, fmt, arg_ptr);
 375   1              va_end(arg_ptr);
 376   1              while(i<uLen)
 377   1              {
 378   2                      c1 = tmpBuf[i];
 379   2                      c2 = tmpBuf[i+1];
 380   2                      uRow = fnGetRow();
 381   2                      uCol = fnGetCol();
 382   2                      if(c1 >= 0)
 383   2                      { // ASCII
 384   3                              if(c1 < 0x20)
 385   3                              {
 386   4                                      switch(c1)
 387   4                                      {
 388   5                                              case CR:
 389   5                                              case LF: // 回车或换行
 390   5                                                      i++;
 391   5                                              if(uRow < 112)
 392   5                                                      fnSetPos(uRow+16,0);
 393   5                                              else
 394   5                                                      fnSetPos(0,0);
 395   5                                              continue;
 396   5                                              case BS: // 退格
 397   5                                                      if(uCol > 0)
 398   5                                                              uCol--;
 399   5                                                      fnSetPos(uRow,uCol);
 400   5                                                      cData = 0x00;
 401   5                                              break;
 402   5                                              default: // 其他
 403   5                                                      c1 = 0x1f;
 404   5                                      }
 405   4                              }
 406   3                              for(j=0;j<16;j++)
 407   3                              {
 408   4                                      fnPR12(LC_AUT_WR); // 写数据
 409   4                                      if(c1 >= 0x1f)
 410   4                                      {
 411   5                                              if(j < (16-ASC_CHR_HEIGHT))
 412   5                                                      fnPR13(0x00);
 413   5                                              else
 414   5                                                      fnPR13(ASC_MSK[(c1-0x1f)*ASC_CHR_HEIGHT+j-(16-ASC_CHR_HEIGHT)]);
 415   5                                      }
 416   4                                      else
 417   4                                              fnPR13(cData);
 418   4                                      fnPR12(LC_AUT_OVR);
 419   4                                      fnSetPos(uRow+j+1,uCol);
 420   4                              }
 421   3                              if(c1 != BS) // 非退格
 422   3                              uCol++;
 423   3                      }
 424   2                      else
 425   2                      { // 中文
 426   3                              for(j=0;j<sizeof(GB_16)/sizeof(GB_16[0]);j++)
 427   3                              {
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 8   

 428   4                                      if(c1 == GB_16[j].Index[0] && c2 == GB_16[j].Index[1])
 429   4                                      break;
 430   4                              }
 431   3                              for(k=0;k<sizeof(GB_16[0].Msk)/2;k++)
 432   3                              {
 433   4                                      fnSetPos(uRow+k,uCol);
 434   4                                      fnPR12(LC_AUT_WR); // 写数据
 435   4                                      if(j < sizeof(GB_16)/sizeof(GB_16[0]))
 436   4                                      {
 437   5                                              fnPR13(GB_16[j].Msk[k*2]);
 438   5                                              fnPR13(GB_16[j].Msk[k*2+1]);
 439   5                                      }
 440   4                                      else // 未找到该字
 441   4                                      {
 442   5                                              if(k < sizeof(GB_16[0].Msk)/4)
 443   5                                              {
 444   6                                                      fnPR13(0x00);
 445   6                                                      fnPR13(0x00);
 446   6                                              }
 447   5                                              else
 448   5                                              {
 449   6                                                      fnPR13(0xff);
 450   6                                                      fnPR13(0xff);
 451   6                                              }
 452   5                                      }
 453   4                                      fnPR12(LC_AUT_OVR);
 454   4                              }
 455   3                              uCol += 2;
 456   3                              i++;
 457   3                      }
 458   2                      if(uCol >= 30) // 光标后移
 459   2                      {
 460   3                              uRow += 16;
 461   3                              if(uRow < 0x80)
 462   3                              uCol -= 30;
 463   3                              else
 464   3                              {
 465   4                                      uRow = 0;
 466   4                                      uCol = 0;
 467   4                              }
 468   3                      }
 469   2                      fnSetPos(uRow,uCol);
 470   2                      i++;
 471   2              }
 472   1              return uLen;
 473   1      }
 474          //求字符串长度
 475          unsigned char strleng(unsigned char *d)
 476          {
 477   1              unsigned char i=0;
 478   1              while(d[i++]);
 479   1              return --i;
 480   1      }
 481          //将字符串倒置
 482          void reverse(unsigned char * d)
 483          {
 484   1              unsigned char i,j,k;
 485   1              i=strleng(d);
 486   1              for(j=0;j<i/2;j++)
 487   1              {
 488   2                      k=d[j];
 489   2                      d[j]=d[i-j-1];
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 9   

 490   2                      d[i-j-1]=k;
 491   2              }
 492   1      }
 493          //将char变成int
 494          int char2int(unsigned char c)
 495          {
 496   1              if(c>='0' && c<='9')
 497   1              {
 498   2                      return (int)(c-'0');
 499   2              }
 500   1              else
 501   1              {
 502   2                      return -1;
 503   2              }
 504   1      }
 505          //将int变成char
 506          void int2char(unsigned char*d,int a)
 507          {
 508   1              unsigned char *dd,t;
 509   1              dd=d;
 510   1              while(a)
 511   1              {
 512   2                      t=a%10;
 513   2                      *d++='0'+t;
 514   2                      a/=10;
 515   2              }
 516   1              *d=0;
 517   1              reverse(dd);
 518   1      }
 519          void bcd2char(unsigned char*d,unsigned char a)
 520          {
 521   1              *d++='0'+(a>>4);
 522   1              *d++='0'+a&0x0f;
 523   1              *d=0;
 524   1      }
 525          //字符串输出函数
 526          void delay(void)
 527          {
 528   1              unsigned char i,j,k;
 529   1              for(i=24;i;i--)
 530   1              for(j=200;j;j--)
 531   1              for(k=30;k;k--);
 532   1      }
 533          /*****************************
 534          ds12887 port
 535          *****************************/
 536          #define RAM(a) XBYTE[0xB000+a]
 537          unsigned char tb[]={1,0xff,23,0xff,23,0xff,1,20,4,9};
 538          void initram(void)
 539          {
 540   1              unsigned char i;
 541   1              RAM(0x0b)=0xa6;
 542   1              for(i=0;i<10;i++)
 543   1              {
 544   2                      RAM(i)=tb[i];
 545   2              }
 546   1              RAM(0x0a)=0x20;
 547   1              i=RAM(0x0c);
 548   1              i=RAM(0x0d);
 549   1              RAM(0x0b)=0x26;
 550   1      }
 551          
C51 COMPILER V8.02   ZUIZHONG                                                              07/16/2009 15:35:22 PAGE 10  

 552          
 553          /*****************************
 554          ds12887 port
 555          *****************************/
 556          
 557          void main(void) // 测试用 ,中文测试
 558          {
 559   1              unsigned char buff[10]={0};
 560   1              unsigned char i,j;
 561   1              fnLCMInit();
 562   1              cls();
 563   1              cursor(0,0);
 564   1              
 565   1              initram();
 566   1      
 567   1              while(1)
 568   1              {
 569   2              
 570   2                              for(j=0;j<10;j++)
 571   2                              {
 572   3                                      if(j==1|j==3|j==5)continue;
 573   3                                      i=RAM(j);
 574   3                                      int2char(buff,i);
 575   3                                      dprintf("%s,",buff);
 576   3                              }
 577   2                              
 578   2                              delay();
 579   2                              dprintf("\n");
 580   2                              cls();
 581   2              }
 582   1              
 583   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1703    ----
   CONSTANT SIZE    =   1176    ----
   XDATA SIZE       =    148     154
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
