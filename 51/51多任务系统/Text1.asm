BUF1H EQU 0X30
BUF1L EQU 0X31
BUF2H EQU 0X32
BUF2L EQU 0X33
FLAG BIT 0X00;   FLAG==0---->TASK1;FLAG==1--->TASK2
ORG 00H
LJMP START
ORG 0BH
LJMP INT0X

START: 
		MOV SP,#0X60;
		MOV BUF1H,#TASK1/256;
		MOV BUF1L,#TASK1 MOD 256
		MOV BUF2H,#TASK2/256;
		MOV BUF2L,#TASK2 MOD 256
		MOV TMOD,#01H
		MOV TH0,#0xff
		MOV TL0,#0xF0
		SETB TR0
		SETB ET0
		SETB EA
		CLR FLAG;
		CALL TASK1;
		SJMP $
INT0X:
		CLR TF0;
		CLR EA
		MOV TH0,#0xff
		MOV TL0,#0xF0
		MOV R1,SP;
		JB FLAG,NEXT;			IF FLAG==0,GO ON;ELSE JMP TO NEXT
		DEC R1;
		MOV A,@R1;
		MOV BUF1L,A;
		DEC R1;
		MOV A,@R1;
		MOV BUF1H,A;			STORE PC
		
		MOV A,BUF2H;			PUT TASK2'S PC INTO STACK
		MOV @R1,A;
		MOV A,BUF2L;
		INC R1;
		MOV @R1,A;
		SETB EA
		SETB FLAG
		RETI;
NEXT:
		DEC R1;
		MOV A,@R1;
		MOV BUF2L,A;
		DEC R1;
		MOV A,@R1;
		MOV BUF2H,A;			STORE PC
		
		MOV A,BUF1H;			PUT TASK2'S PC INTO STACK
		MOV @R1,A;
		MOV A,BUF1L;
		INC R1;
		MOV @R1,A;
		SETB EA
		CLR FLAG;
		RETI
TASK1:
		MOV P1,#0X00;
		CLR EA
		CALL DELAY
		SETB EA
		MOV P1,#0XFF;
		CLR EA
		CALL DELAY;
		SETB EA
		SJMP TASK1;
TASK2:
		MOV P2,#0X00;
		CLR EA
		CALL DELAY;
		SETB EA
		MOV P2,#0XFF;
		CLR EA
		CALL DELAY;
		SETB EA
		SJMP TASK2;
DELAY:
		MOV R5,#0XFF;
L:		MOV R6,#0XFF;
		DJNZ R6,$;
		DJNZ R5,L
		
		RET;
END